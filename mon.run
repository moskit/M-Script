#!/bin/bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

currentlocale=`echo ${LC_MESSAGES}`
export LC_MESSAGES="C"

HOSTNAME=`which hostname 2>/dev/null`
SQLBIN=`which sqlite3 2>/dev/null`
#SAR=`which sar 2>/dev/null`
[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
M_ROOT="$rpath" ; export M_ROOT
commline="$0 $*"
commlinehash=`echo "$commline" | md5sum | cut -b 1,2,3,4,5,6,7,8`
echo "`date +"%H:%M:%S"` == Running $commline ==" >> "$rpath/monitoring.log"
#*/

# removing stale lock file
[ -n "$MAXLOCK" ] || MAXLOCK=30 
lockfile=`find "$rpath" -maxdepth 1 -name mon.run.lock -mmin +$MAXLOCK`
if [ -n "$lockfile" ] ; then
  ls -l "$lockfile" >> "$rpath/monitoring.log"
  echo "`date +"%H:%M:%S"` *** Lock file is older than $MAXLOCK minutes, removing" >> "$rpath/monitoring.log"
  rm -f "$lockfile"
fi
sleep $((RANDOM%5))
for ((i=1; i<=10; i++))
do
  if [ -e "$rpath/mon.run.lock" ] ; then
    printf "." >> "$rpath/monitoring.log"
    sleep $((RANDOM%10))
    continue
  else
    echo "`date +"%H:%M:%S"` not locked" >> "$rpath/monitoring.log"
    break
  fi
done
if [ -f "$rpath/mon.run.lock" ] ; then
  echo >> "$rpath/monitoring.log"
  echo "Giving up..." >> "$rpath/monitoring.log"
  exit 1
fi

touch "$rpath/mon.run.lock" && echo "`date +"%H:%M:%S"` >>> locking by $commline" >> "$rpath/monitoring.log"
# bc workaround to make it work with floating point numbers
solve() {
bc << EOF
scale=6
${1}
EOF
}

function mailreport() {
  while read RLINE
  do
    if [ -n "$RLINE" ]; then
      cat "$rpath/conf/rep.header" "$rpath/report" | $MAILX -s "Server `$HOSTNAME -f 2>/dev/null || $HOSTNAME` report" "$RLINE"
    fi
  done < ${rpath}/conf/mail.admin.list
}

function mailalert() {
  if [ -f "$rpath/alert1" ] && [ `cat "$rpath/alert1" | wc -l` -ne 0 ]; then
    al='*' ; aln=1
    cat "$rpath/conf/header.alert1" "$rpath/alert1" >> "$rpath/alert"
  fi
  if [ -f "$rpath/alert2" ] && [ `cat "$rpath/alert2" | wc -l` -ne 0 ]; then
    al='**' ; aln=2
    cat "$rpath/conf/header.alert2" "$rpath/alert2" >> "$rpath/alert"
  fi
  if [ -f "$rpath/alert3" ] && [ `cat "$rpath/alert3" | wc -l` -ne 0 ]; then
    al='***' ; aln=3
    cat "$rpath/conf/header.alert3" "$rpath/alert3" >> "$rpath/alert"
  fi
  if [ -n "$al" ] ; then
    echo "================ sending alert =================" >> "$rpath/monitoring.log"
    cat "$rpath/alert" >> "$rpath/monitoring.log"
    echo "================================================" >> "$rpath/monitoring.log"
    for MLINE in `cat "$rpath/conf/mail.alert.list"|grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#|awk '{print $1}'`
    do
      recipn=`grep "^$MLINE" "$rpath/conf/mail.alert.list" | awk '{print $2}'`
      if ([ -z "$recipn" ] || [ $recipn -le $aln ]) ; then
        cat "$rpath/alert" | $MAILX -s "$al Server `$HOSTNAME -f 2>/dev/null || $HOSTNAME` alert" "$MLINE" >> "$rpath/monitoring.log" 2>&1
      fi
    done
  fi
  unset al aln
}

function cleanup() {
  rm -f "$rpath"/alert* 2>/dev/null
}

function runscript() {
  local LOG="$rpath/monitoring.log"
  daynow=$(date +"%Y%m%d")
  if [ "X$SQLITE3" == "X1" ] && ([ "X$1" == "XSQL" ] || [ "X$2" == "XSQL" ])
  then
    $SQLITE "$rpath/sysdata" "insert into sysdata (timeindex, day) values ('$timeindexnow', '$daynow')"
  fi

  echo -e "$etitle" >> "$LOG"
  echo -e "$etitle" > "$rpath/report"

  if [ "X$1" == "XSQL" ]; then
    
    for script in "$rpath/rc/"*.mon  #*/
    do
      [ -n "$RUNDELAY" ] && sleep $RUNDELAY && delay+=$RUNDELAY
      time0=`date +"%s"`
      mon="$rpath/rc/`readlink $script`"
      if [ -x "$mon" ]; then
        log "$mon"
        monoutput=`$mon $SQL 2>&1`
        echo "$monoutput" >> "$LOG"
        if alert_blocked ${mon##*/} ; then
          log "=== alert is blocked for $mon"
          echo "$monoutput" >> "$rpath/report.blocked"
        else  
          echo "$monoutput" >> "$rpath/report"
        fi
        time1=`date +"%s"`
        $SQLITE "$rpath/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '${rscript##*/}', '`expr $time1 - $time0`')"
      else
        log "monitor $mon does not exist or is not executable"
      fi
    done

  elif [ -n "$1" ]; then
    for mon in `echo $1 | sed 's|,| |g'` ; do
      [ -n "$RUNDELAY" ] && sleep $RUNDELAY
      if [ -x "$rpath/tests/$mon" ]; then
        log "$mon"
        monoutput=`"$rpath"/tests/$mon $SQL 2>&1`
        echo "$monoutput" >> "$LOG"
        if alert_blocked ${mon##*/} ; then
          log "=== alert is blocked for $mon"
          echo "$monoutput" >> "$rpath/report.blocked"
        else  
          echo "$monoutput" >> "$rpath/report"
        fi
      fi
    done
  fi
  al3=`grep '<\*\*\*>' "$rpath/report" | sed 's|<\*\*\*>||g'` > "$rpath/alert3"
  al2=`grep '<\*\*>' "$rpath/report" | sed 's|<\*\*>||g'` > "$rpath/alert2"
  al1=`grep '<\*>' "$rpath/report" | sed 's|<\*>||g'` > "$rpath/alert1"
  al0=`grep '<OK>' "$rpath/report" | sed 's|<OK>||g'` > "$rpath/alert0"
  [ -n "$al3" -o -n "$al2" -o -n "$al1" -o -n "$alok" ] && echo -e "$etitle" > "$rpath/alert"
  [ -n "$al3" ] && echo -e "$al3\n" > "$rpath/alert3"
  [ -n "$al2" ] && echo -e "$al2\n" > "$rpath/alert2"
  [ -n "$al1" ] && echo -e "$al1\n" > "$rpath/alert1"
  [ -n "$al0" ] && echo -e "$al0\n" > "$rpath/alert0"
}

function runactions() {
  local LOG="$M_ROOT/logs/actions.log"
  if [ -f "$rpath/report.blocked" ]; then
    log "blocked alerts found"
    
    grep '<\*\*\*>' "$rpath/report.blocked" | sed 's|<\*\*\*>||g' >> "$rpath/alert3"
    grep '<\*\*>' "$rpath/report.blocked" | sed 's|<\*\*>||g' >> "$rpath/alert2"
    grep '<\*>' "$rpath/report.blocked" | sed 's|<\*>||g' >> "$rpath/alert1"
    grep '<OK>' "$rpath/report.blocked" | sed 's|<OK>||g' >> "$rpath/alert0"
  fi
  rm -f "$rpath/report.blocked"
  IFS1=$IFS; IFS='
'
  for action in `cat "$rpath/conf/actions.conf" | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*# | cut -d'|' -f3 | sort | uniq` ; do
    all_alerts_found=false
    action_blocked "$action" && log "not doing anything: action $action is blocked" && continue
    touch "$M_TEMP/consequent_alerts.tmp"
    for confline in `grep -E "\|${action}\||\|${action}$" "$rpath/conf/actions.conf" | grep -v ^# | grep -v ^[[:space:]]*#` ; do
      pattern=`echo $confline | cut -d'|' -f1`
      level=`echo $confline | cut -d'|' -f2`
      nalerts=`echo $confline | cut -d'|' -f4`
      blockccl=`echo $confline | cut -d'|' -f5`
      BLOCK_ERR13=`echo $confline | cut -d'|' -f6`
      BLOCK_ERR5=`echo $confline | cut -d'|' -f7`
      export BLOCK_ERR13 BLOCK_ERR5
      if [ -n "$nalerts" ] ; then
        calerts=`cat "$M_TEMP/consequent_alerts.tmp" | grep ^"$commline"\|"$pattern"\|$level\| | tail -1`
        if [ -n "$calerts" ] ; then
          calerts=`echo "$calerts" | cut -d'|' -f4`
        else
          echo "$commline|$pattern|$level|0" >> "$M_TEMP/consequent_alerts.tmp"
        fi
      fi
      
      [ -z "$level" -o `expr "$level" : ".*[^[0-9]]*.*"` -gt 0 ] && echo "Bad alert level setting in actions.conf" >> "$rpath/monitoring.log" && continue
      [ `expr "$nalerts" : ".*[^[0-9]]*.*"` -gt 0 ] && echo "Bad consequent alerts number setting in actions.conf" >> "$rpath/monitoring.log" && continue
      
      action_alert_found=false
      alert_match=false
      
      [[ $level -eq 0 ]] && levelmax=0 || levelmax=3

      for ((i=$level; i<=$levelmax; i++)) ; do
        while read line ; do
          if [ -z "$nalerts" ]; then
            if [[ $line =~ $pattern ]]; then
              alert_match=true
              break
            fi
          else
            if [[ $line =~ $pattern ]] ; then
              action_alert_found=true
              if [ -z "$calerts" ]; then
                calerts=1
              elif [ `expr "$calerts" : ".*[^0-9].*"` -ne 0 ]; then
                echo "Warning: bad consequent alerts number in $M_TEMP/consequent_alerts.tmp for action $action" >> "${rpath}/monitoring.log"
                calerts=1
              fi
              calerts=`expr $calerts + 1`
              sed -i "s%^$commline|$pattern|$level|.*%$commline|$pattern|$level|${calerts}%" "$M_TEMP/consequent_alerts.tmp"
              [[ $calerts -ge $nalerts ]] && alert_match=true && break
            fi
          fi
        done <"$rpath/alert$i"
      done   ## <-- finished reading alerts
      
      if $alert_match ; then
        # matching condition found, but conditions may be ANDed
        all_alerts_found=true
        log "alert match"
      else
        all_alerts_found=false
      fi
      if ! $action_alert_found ; then
        # if no match, alert is not consequent and must be zeroed
        [ -n "$nalerts" ] && sed -i "s%^$commline|$pattern|$level|.*%$commline|$pattern|$level|0%" "$M_TEMP/consequent_alerts.tmp"
      fi
    done   ## <-- finished reading config
    
    if $all_alerts_found ; then
      log "all alerts found for action: $action ; block enabled, cycles: $blockccl"
      [ -n "$blockccl" ] && block_action $blockccl "$action"
      echo -e "\n`date +"%m.%d %H:%M:%S"` action initiated: $action\n" >> "${rpath}/monitoring.log" | tee -a $LOG
      action $action
      [ -n "$nalerts" ] && sed -i "s%^$commline|$pattern|$level|.*%$commline|$pattern|$level|0%" "$M_TEMP/consequent_alerts.tmp"
    fi

  done
IFS=$IFS1
}

function runactionstest() {
IFS1=$IFS; IFS='
'
for confline in `cat "$rpath/conf/actions.conf" | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#` ; do
  pattern=`echo $confline | cut -d'|' -f1`
  level=`echo $confline | cut -d'|' -f2`
  action=`echo $confline | cut -d'|' -f3`
  while read line ; do
    [[ $line =~ $pattern ]] && echo && echo "The alert message: \'$line\' would trigger the action: \'$action\'" && echo
  done<"$rpath/alert$level"
done
IFS=$IFS1
}

function runsysanalyze() {
  source "$rpath/conf/analysis.conf"
  echo "------------------------------" >> "$rpath/monitoring.log"
  date | tee -a "$rpath/monitoring.log" | tee "$rpath/report" | tee "$rpath/alert" >/dev/null
  echo "------------------------------" | tee -a "$rpath/monitoring.log"  | tee -a "$rpath/report" | tee -a "$rpath/alert" >/dev/null
  sysanalysis 2>&1 | tee -a "$rpath/monitoring.log" | tee -a "$rpath/report" >/dev/null
  grep '<\*\*\*>' "$rpath/report" | sed 's|<\*\*\*>||g' > "$rpath/alert3"
  grep '<\*\*>' "$rpath/report" | sed 's|<\*\*>||g' > "$rpath/alert2"
  grep '<\*>' "$rpath/report" | sed 's|<\*>||g' > "$rpath/alert1"
}

function analyzesysparams() {
  afrdayfirst=$3

  if [ "X$4" == "X" ]
  then
    partotal=""
  else
    partotal=`$SQLITE "$rpath/sysdata" "select avg($4) from sysdata where day='$afrdayfirst' group by day"`
  fi

  for ((n=1; n <= $ANALYS_DAYS; n++))
  do
    results[$n]=`$SQLITE "$rpath/sysdata" "select avg($1) from sysdata where day='$afrdayfirst' group by day"`
    #echo "== n=$n; date: $afrdatefirst; result: ${results[$n]}"
    afrdayfirst=`date -d "$afrdayfirst + 1 day" +"%Y%m%d"`
  done
  daysnum="${#results[@]}"
  if [ $daysnum -lt $ANALYS_DAYS ]
  then
    echo "Number of days we have $1 results for is $daysnum"
    return
  fi
  avg1=0
  avg2=0
  days1=`expr $daysnum / 2`
  days2=`expr $daysnum - $days1`
  #echo "Days total: $daysnum, last date: $afrdatefirst"
  #echo "=================================================================="
  #for ((i=1; i <= $daysnum; i++))
  #do
  #  printf "$i: ${results[$i]}; "
  #done
  #printf "\n"
  #echo "-----------------"
  for ((n=1; n <= ${days1}; n++))
  do
    #echo "days1=$days1, days2=$days2"
    m=`expr $days2 + $n`
    #echo "left count: $n, right count: $m"
    #echo "results left: ${results[$n]}, right: ${results[$m]}"
    avg1=`solve "$avg1 + (${results[$n]} / $days1)"`
    avg2=`solve "$avg2 + (${results[$m]} / $days1)"`
    #echo "left average: $avg1, right average: $avg2"
    #echo "---------------"
  done
  changespeed=`solve "($avg2 - $avg1) / $days2"`
  #echo "changespeed=$changespeed; days=$days2"
  x1="$(echo "$changespeed > 0" | bc)"
  x2="$(echo "$changespeed < 0" | bc)"
  if [ "$x1" == "1" ]
  then
    if [ "X$4" == "X" ]
    then
      changespeedperc=''
      changes=$changespeed
    else
      changespeedperc=`solve "$changespeed / $partotal * 100"`
      changespeedperc=`echo "$changespeedperc" | sed "s|0*$||" | sed "s|\.$|\.0|"`
      changes=$changespeedperc
      changespeedperc="( $changespeedperc % )"
    fi
    if [ "X$(eval echo \$${6}_1)" != "X" ] &&
       [ "X$(eval echo \$${6}_2)" != "X" ] &&
       [ "X$(eval echo \$${6}_3)" != "X" ]
    then
      y1="$(echo "$changes $7 $(eval echo \$${6}_1)" | bc)"
      y2="$(echo "$changes $7 $(eval echo \$${6}_2)" | bc)"
      y3="$(echo "$changes $7 $(eval echo \$${6}_3)" | bc)"
      warnind='(OK) '
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
    else
      echo "$6 is not set correctly. Check conf/mon.conf please."
      echo "Note that *three* levels must be set: ${6}_1, ${6}_2 and ${6}_3."
    fi
    echo "$warnind $5 has been increasing by `echo $changespeed | sed "s|0*$||" | sed "s|\.$|\.0|"` $2 $changespeedperc a day during last $daysnum days"
  elif [ "$x2" == "1" ]
  then
    if [ "X$4" == "X" ]
    then
      changespeedperc=""
      changespeed=`solve "- $changespeed"`
      changes=$changespeed
    else
      changespeedperc=`solve "- $changespeed / $partotal * 100"`
      changespeedperc=`echo "$changespeedperc" | sed "s|0*$||" | sed "s|\.$|\.0|"`
      changes=$changespeedperc
      changespeedperc="( $changespeedperc % )"
      changespeed=`solve "- $changespeed"`
    fi
    if [ "X$(eval echo \$${6}_1)" != "X" ] &&
       [ "X$(eval echo \$${6}_2)" != "X" ] &&
       [ "X$(eval echo \$${6}_3)" != "X" ]
    then
      y1="$(echo "$changes $7 $(eval echo \$${6}_1)" | bc)"
      y2="$(echo "$changes $7 $(eval echo \$${6}_2)" | bc)"
      y3="$(echo "$changes $7 $(eval echo \$${6}_3)" | bc)"
      warnind='(OK) '
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
    else
      echo "$6 is not set correctly. Check conf/mon.conf please."
      echo "Note that *three* levels must be set: ${6}_1, ${6}_2 and ${6}_3."
    fi
    echo "$warnind $5 has been decreasing by `echo $changespeed | sed "s|0*$||" | sed "s|\.$|\.0|"` $2 $changespeedperc a day during the last $daysnum days"
  else
    echo "(OK)  $5 hasn't been changing during the last $daysnum days"
  fi
}

function sysanalysis() {
  if [ "X$SQLITE3" != "X1" ]
  then
    echo "To use --analyze-system option, sqlite3 must be installed and SQLITE3 must"
    echo "be set to 1 in conf/mon.conf"
    exit 1
  fi

  if [ $ANALYS_DAYS -lt 2 ]
  then
    echo "Configuration error! ANALYS_DAYS variable cannot be set lower than 2"
    exit 1
  fi
  dayfirst=`date -d "- 7 day" +"%Y%m%d"`
  testdays=`$SQLITE "$rpath/sysdata" "select day from sysdata where day='$dayfirst'"`
  if [ "X$testdays" != "X" ]
  then
#   ------------ Database -- un -- "From" - DB column  - Human  ----- Warning level - Con
#   ------------  column  -- it --  date  - name for   - column ----- variable name - dit
#   ------------   name   -- s  --        - total(max) -  name  ----- (conf/mon.conf)    - ion
analyzesysparams 'freeram'   KB   $dayfirst totalram  "Free RAM"      "FREERAM"      '>='
analyzesysparams 'activeram' KB   $dayfirst totalram  "Active RAM"    "ACTIVERAM"    '>='
analyzesysparams 'freeswap'  KB   $dayfirst totalswap "Free swap"     "FREESWAP"     '>='
analyzesysparams 'loadavg'   ""   $dayfirst   ""      "Load average"  "LOADAVG"      '>='
analyzesysparams 'procnum'   ""   $dayfirst   ""   "Number of processes" "PROCNUM"   '>='
analyzesysparams 'diskusage' '%'  $dayfirst   ""      "Disk usage"    "DISKUSAGE"    '>='
analyzesysparams 'diskiord' 'MB/sec' $dayfirst "" "Disk average read speed" "DISKIORD" '>='
analyzesysparams 'diskiowr' 'MB/sec' $dayfirst "" "Disk average write speed" "DISKIOWR" '>='
analyzesysparams 'cpuusage'  '%'  $dayfirst   ""     "CPU usage"       "CPUUSAGE"    '>='
analyzesysparams 'uptime'   'days' $dayfirst   ""       "Uptime"        "UPTIME"     '<'
  else
    echo "There is no data in the database for $ANALYS_DAYS days back."
  fi
}

function newtimeindex() {
  timeindexnow=$(date +"%s")
  echo $timeindexnow > "$M_TEMP/timeindex.$commlinehash"
  lasttimeindex=`cat "$M_TEMP/lasttimeindex.$commlinehash" 2>/dev/null || echo 0`
  export timeindexnow lasttimeindex
}

function deltimeindex() {
  mv "$M_TEMP/timeindex.$commlinehash" "$M_TEMP/lasttimeindex.$commlinehash"
}

function timeshift() {
  fintime=$(date +"%s")
  if [ -n "$timeshift" ]; then
    timeshift=$(expr \( $fintime - $timeindexnow + $timeshift \) / 2)
  else
    timeshift=$(expr $fintime - $timeindexnow)
  fi
  export timeshift
  echo $timeshift > "$M_TEMP"/timeshift
  for l in 1 2 3 ; do
    MAINSEQ_EXECTIME=`eval "echo \\$MAINSEQ_EXECTIME_$l"`
    [ `expr $timeshift \> $MAINSEQ_EXECTIME` -eq 1 ] && echo "${BASH_SOURCE##*/} execution time is longer than $MAINSEQ_EXECTIME" >> "$rpath/alert$l" && return
  done
}

function action() {
  local newfile=false
  act=`echo "$@" | sed 's|/|\\\/|g;s| |\\\ |g'`
  [ -f "$rpath/actions.in" ] || newfile=true
  JOBINTIME=`date +"%y%m%d%H%M%S"`
  echo "`grep "$act" "$rpath/conf/actions.conf" | cut -d'|' -f3`|$JOBINTIME|" >> "$rpath/actions.in" && log "=== job created: $@"
  $newfile && chmod 600 "$rpath/actions.in"
  "$rpath"/lib/mq.run &
}

source "$rpath/conf/mon.conf"
[ -z "$MAILX" ] && MAILX=`which mail 2>/dev/null`
# needed for actions (only?)
source "$rpath/lib/functions.sh"
SQLITE=dbquery
declare -i delay ; delay=0
export M_TEMP FREQ M_ROOT
[ "X$2" == "XSQL" ] && SQL=SQL
[ -d $M_TEMP ] || install -d $M_TEMP
etitle="------------------------------\n`date`\n------------------------------"

case $1 in
  --alert-only | -ao | -alert | --only-alert)
    newtimeindex
    runscript SQL
    mailalert
    [ -n "$DASHBOARD" ] && gendash "$M_ROOT/report" servers marked
    runactions
    deltimeindex
    cleanup
  ;;
  -dry | --dry | --dry-run | -test | --test)
    export TEST=1
    newtimeindex
    runscript SQL
    runactionstest
    deltimeindex
    cat "$rpath/report"
    cleanup
  ;;
  -analyze-sys | -analyze-system | --analyze-system | -as)
    runsysanalyze
    mailreport
    mailalert
    cleanup
  ;;
  -analyze-logs | --analyze-logs | -al)
    loganalysis
    mailreport
    mailalert
    cleanup
  ;;
  -h | -help | --help)
    echo "Usage: mon.run --report"
    echo "         - collects and logs system data and then sends report"
    echo "       mon.run --alert-only"
    echo "         - collects and logs system data, but sends report only if problems"
    echo "           found"
    echo "       mon.run --dry-run"
    echo "         - collects and logs system data, outputs it to stdout and store it"
    echo "           into the database, but doesn't send any reports."
    echo "       mon.run --analyze-system"
    echo "         - analyzes system parameters change over a period of time and sends"
    echo "       a report."
    echo "       mon.run <scriptname.mon.sh>"
    echo "         - runs a selected script and sends an alert if necessary"
#    echo "       mon.run --analyze-logs"
#    echo "         - analyzes log messages since the last run and sends the statistical"
#    echo "       data and an unusual activity report."
  ;;
  -rep | -report | --report)
    newtimeindex
    runscript SQL
    mailreport
    mailalert
    [ -n "$DASHBOARD" ] && genreport "$M_ROOT/report" servers
    deltimeindex
    cleanup
  ;;
  *.mon)
    newtimeindex
    runscript "$1" $SQL
    timeshift
    mailalert
    [ -n "$DASHBOARD" ] && gendash "$M_ROOT/report" servers
    runactions
    deltimeindex
    cleanup
  ;;
  *)
    echo "Run mon.run --help to see available options"
  ;;
esac
rm -f "$rpath/mon.run.lock" && echo "`date +"%H:%M:%S"` <<< unlocking by $commline" >> "$rpath/monitoring.log"

export LC_MESSAGES=`echo $currentlocale`

