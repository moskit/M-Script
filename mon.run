#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


currentlocale=`echo ${LC_MESSAGES}`
export LC_MESSAGES="C"
MAILX=`which mail 2>/dev/null`
HOSTNAME=`which hostname 2>/dev/null`
SQLITE=`which sqlite3 2>/dev/null`
#SAR=`which sar 2>/dev/null`
[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/ (this is needed to fool vi syntax highlighting)
tmpdir=/tmp/m_script && install -d $tmpdir
#[ "X$SAR" == "X" ] || $SAR -o $tmpdir/sar.tmp 1 5 >/dev/null
# removing stale lock file
[ -n "$MAXLOCK" ] || MAXLOCK=30 
find ${rpath} -name mon.run.lock -mmin +$MAXLOCK | xargs rm -f
for ((i=1; i<=10; i++))
do
  if [ -e ${rpath}/mon.run.lock ] ; then
    printf "." >> ${rpath}/monitoring.log
    sleep 10
    continue
  else
    break
  fi
done
if [ -f ${rpath}/mon.run.lock ] ; then
  echo "Giving up..." >> ${rpath}/monitoring.log
  exit 1
fi
touch ${rpath}/mon.run.lock
# bc workaround to make it work with floating point numbers
solve() {
bc << EOF
scale=6
${1}
EOF
}

function mailreport() {
  while read RLINE
  do
    if [ -n "${RLINE}" ]; then
      cat ${rpath}/conf/rep.header ${rpath}/report | ${MAILX} -s "Server `$HOSTNAME -f 2>/dev/null || $HOSTNAME` report" ${RLINE}
    fi
  done < ${rpath}/conf/mail.admin.list
}

function mailalert() {
  if [ -f ${rpath}/alert1 ] && [ `cat ${rpath}/alert1 | wc -l` -ne 0 ]; then
    al='*' ; aln=1
    cat "${rpath}/conf/header.alert1" "${rpath}/alert1" >> "${rpath}/alert"
    echo >> "${rpath}/alert"
  fi
  if [ -f ${rpath}/alert2 ] && [ `cat ${rpath}/alert2 | wc -l` -ne 0 ]; then
    al='**' ; aln=2
    cat "${rpath}/conf/header.alert2" "${rpath}/alert2" >> "${rpath}/alert"
    echo >> "${rpath}/alert"
  fi
  if [ -f ${rpath}/alert3 ] && [ `cat ${rpath}/alert3 | wc -l` -ne 0 ]; then
    al='***' ; aln=3
    cat "${rpath}/conf/header.alert3" "${rpath}/alert3" >> "${rpath}/alert"
    echo >> "${rpath}/alert"
  fi
  if [ -n "$al" ] ; then
    cat ${rpath}/alert >> ${rpath}/monitoring.log
    for MLINE in `cat "${rpath}/conf/mail.alert.list"|grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#|awk '{print $1}'`
    do
      recipn=`grep "^$MLINE" ${rpath}/conf/mail.alert.list | awk '{print $2}'`
      if ([ -z "$recipn" ] || [ "X$recipn" == "X$aln" ]) ; then
        cat ${rpath}/alert | ${MAILX} -s "$al Server `$HOSTNAME -f 2>/dev/null || $HOSTNAME` alert" ${MLINE} >>${rpath}/monitoring.log 2>&1
      fi
    done
  fi
  unset al aln
  rm -f ${rpath}/alert* 2>/dev/null
}

function runscript() {
  daynow=$(date +"%Y%m%d")
  if [ "X$SQLITE3" == "X1" ] && [ "X$1" == "XSQL" ]
  then
    $SQLITE "${rpath}/sysdata" "select max(timeindex) from sysdata" > "${tmpdir}/lasttimeindex"
    $SQLITE "${rpath}/sysdata" "insert into sysdata (timeindex, day) values ('$timeindexnow', '$daynow')"
  fi
  if [ "X$1" == "XSQL" ]; then
    echo "------------------------------" >> "${rpath}/monitoring.log"
    date | tee -a "${rpath}/monitoring.log" | tee "${rpath}/report" | tee "${rpath}/alert" >/dev/null
    echo "------------------------------" | tee -a "${rpath}/monitoring.log"  | tee -a ${rpath}/report | tee -a "${rpath}/alert" >/dev/null
    if [ -n "$2" ] ; then
      for script in `find ${rpath}/rc/ -maxdepth 1 -name "*.mon" | head -n $2`
      do
        time0=`date +"%s"`
        rscript=${rpath}/rc/`readlink $script`
        $rscript SQL
        time1=`date +"%s"`
        $SQLITE "${rpath}/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '${rscript##*/}', '`expr $time1 - $time2`')"
      done 2>&1 | tee -a "${rpath}/monitoring.log" | tee -a "${rpath}/report" >/dev/null
    else
      for script in ${rpath}/rc/*.mon  #*/
      do
        time0=`date +"%s"`
        rscript=${rpath}/rc/`readlink $script`
        [ -f "$rscript" ] && $rscript SQL
        time1=`date +"%s"`
        $SQLITE "${rpath}/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '${rscript##*/}', '`expr $time1 - $time0`')"
      done 2>&1 | tee -a "${rpath}/monitoring.log" | tee -a "${rpath}/report" >/dev/null
    fi
  elif [ "X$1" != "X" ]; then
    date | tee "${rpath}/alert" >/dev/null
    echo "------------------------------" | tee -a "${rpath}/alert" >/dev/null
    echo > "${rpath}/report"
    for mon in `echo ${1} | sed 's|,| |g'` ; do
      [ -x "${rpath}/tests/${mon}" ] && ${rpath}/tests/${mon} $SQL 2>&1 | tee -a "${rpath}/report" >/dev/null #*/
    done
  fi
  grep '<\*\*\*>' "${rpath}/report" | sed 's|<\*\*\*>||g' > "${rpath}/alert3"
  grep '<\*\*>' "${rpath}/report" | sed 's|<\*\*>||g' > "${rpath}/alert2"
  grep '<\*>' "${rpath}/report" | sed 's|<\*>||g' > "${rpath}/alert1"
}

function runactions() {
IFS1=$IFS; IFS='
'
  for confline in `cat "${rpath}/conf/actions.conf" | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#` ; do
    pattern=`echo $confline | cut -d'%' -f1`
    level=`echo $confline | cut -d'%' -f2`
    action=`echo $confline | cut -d'%' -f3`
    while read line ; do
      [[ $line =~ $pattern ]] && echo && echo "Action initiated: $action" >> ${rpath}/monitoring.log && eval $action >> ${rpath}/monitoring.log && echo
    done<"${rpath}/alert$level"
  done
IFS=$IFS1
}

function runactionstest() {
IFS1=$IFS; IFS='
'
  for confline in `cat "${rpath}/conf/actions.conf" | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#` ; do
    pattern=`echo $confline | cut -d'%' -f1`
    level=`echo $confline | cut -d'%' -f2`
    action=`echo $confline | cut -d'%' -f3`
    while read line ; do
      [[ $line =~ $pattern ]] && echo && echo "The alert message: \'$line\' would trigger the action: \'$action\'" && echo
    done<"${rpath}/alert$level"
  done
IFS=$IFS1
}

function runsysanalyze() {
  source ${rpath}/conf/analysis.conf
  echo "------------------------------" >> ${rpath}/monitoring.log
  date | tee -a ${rpath}/monitoring.log | tee ${rpath}/report | tee ${rpath}/alert >/dev/null
  echo "------------------------------" | tee -a ${rpath}/monitoring.log  | tee -a ${rpath}/report | tee -a ${rpath}/alert >/dev/null
  sysanalysis 2>&1 | tee -a ${rpath}/monitoring.log | tee -a ${rpath}/report >/dev/null
  grep '<\*\*\*>' ${rpath}/report | sed 's|<\*\*\*>||g' > ${rpath}/alert3
  grep '<\*\*>' ${rpath}/report | sed 's|<\*\*>||g' > ${rpath}/alert2
  grep '<\*>' ${rpath}/report | sed 's|<\*>||g' > ${rpath}/alert1
}

function analyzesysparams() {
  afrdayfirst=$3

  if [ "X$4" == "X" ]
  then
    partotal=""
  else
    partotal=`$SQLITE ${rpath}/sysdata "select avg($4) from sysdata where day='$afrdayfirst' group by day"`
  fi

  for ((n=1; n <= $ANALYS_DAYS; n++))
  do
    results[$n]=`$SQLITE ${rpath}/sysdata "select avg($1) from sysdata where day='$afrdayfirst' group by day"`
    #echo "== n=$n; date: $afrdatefirst; result: ${results[$n]}"
    afrdayfirst=`date -d "$afrdayfirst + 1 day" +"%Y%m%d"`
  done
  daysnum="${#results[@]}"
  if [ $daysnum -lt $ANALYS_DAYS ]
  then
    echo "Number of days we have $1 results for is $daysnum"
    return
  fi
  avg1=0
  avg2=0
  days1=`expr $daysnum / 2`
  days2=`expr $daysnum - $days1`
  #echo "Days total: $daysnum, last date: $afrdatefirst"
  #echo "=================================================================="
  #for ((i=1; i <= $daysnum; i++))
  #do
  #  printf "$i: ${results[$i]}; "
  #done
  #printf "\n"
  #echo "-----------------"
  for ((n=1; n <= ${days1}; n++))
  do
    #echo "days1=$days1, days2=$days2"
    m=`expr $days2 + $n`
    #echo "left count: $n, right count: $m"
    #echo "results left: ${results[$n]}, right: ${results[$m]}"
    avg1=`solve "$avg1 + (${results[$n]} / $days1)"`
    avg2=`solve "$avg2 + (${results[$m]} / $days1)"`
    #echo "left average: $avg1, right average: $avg2"
    #echo "---------------"
  done
  changespeed=`solve "($avg2 - $avg1) / $days2"`
  #echo "changespeed=$changespeed; days=$days2"
  x1="$(echo "$changespeed > 0" | bc)"
  x2="$(echo "$changespeed < 0" | bc)"
  if [ "${x1}" == "1" ]
  then
    if [ "X$4" == "X" ]
    then
      changespeedperc=''
      changes=$changespeed
    else
      changespeedperc=`solve "$changespeed / $partotal * 100"`
      changespeedperc=`echo "$changespeedperc" | sed "s|0*$||" | sed "s|\.$|\.0|"`
      changes=$changespeedperc
      changespeedperc="( $changespeedperc % )"
    fi
    if [ "X$(eval echo \$${6}_1)" != "X" ] &&
       [ "X$(eval echo \$${6}_2)" != "X" ] &&
       [ "X$(eval echo \$${6}_3)" != "X" ]
    then
      y1="$(echo "$changes ${7} $(eval echo \$${6}_1)" | bc)"
      y2="$(echo "$changes ${7} $(eval echo \$${6}_2)" | bc)"
      y3="$(echo "$changes ${7} $(eval echo \$${6}_3)" | bc)"
      warnind='(OK) '
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
    else
      echo "${6} is not set correctly. Check conf/mon.conf please."
      echo "Note that *three* levels must be set: ${6}_1, ${6}_2 and ${6}_3."
    fi
    echo "${warnind} ${5} has been increasing by `echo $changespeed | sed "s|0*$||" | sed "s|\.$|\.0|"` $2 ${changespeedperc} a day during last $daysnum days"
  elif [ "$x2" == "1" ]
  then
    if [ "X$4" == "X" ]
    then
      changespeedperc=""
      changespeed=`solve "- $changespeed"`
      changes=$changespeed
    else
      changespeedperc=`solve "- $changespeed / $partotal * 100"`
      changespeedperc=`echo "$changespeedperc" | sed "s|0*$||" | sed "s|\.$|\.0|"`
      changes=$changespeedperc
      changespeedperc="( $changespeedperc % )"
      changespeed=`solve "- $changespeed"`
    fi
    if [ "X$(eval echo \$${6}_1)" != "X" ] &&
       [ "X$(eval echo \$${6}_2)" != "X" ] &&
       [ "X$(eval echo \$${6}_3)" != "X" ]
    then
      y1="$(echo "$changes ${7} $(eval echo \$${6}_1)" | bc)"
      y2="$(echo "$changes ${7} $(eval echo \$${6}_2)" | bc)"
      y3="$(echo "$changes ${7} $(eval echo \$${6}_3)" | bc)"
      warnind='(OK) '
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
    else
      echo "${6} is not set correctly. Check conf/mon.conf please."
      echo "Note that *three* levels must be set: ${6}_1, ${6}_2 and ${6}_3."
    fi
    echo "${warnind} ${5} has been decreasing by `echo $changespeed | sed "s|0*$||" | sed "s|\.$|\.0|"` $2 ${changespeedperc} a day during the last $daysnum days"
  else
    echo "(OK)  $5 hasn't been changing during the last $daysnum days"
  fi
}

function sysanalysis() {
  if [ "X$SQLITE3" != "X1" ]
  then
    echo "To use --analyze-system option, sqlite3 must be installed and SQLITE3 must"
    echo "be set to 1 in conf/mon.conf"
    exit 1
  fi

  if [ $ANALYS_DAYS -lt 2 ]
  then
    echo "Configuration error! ANALYS_DAYS variable cannot be set lower than 2"
    exit 1
  fi
  dayfirst=`date -d "- 7 day" +"%Y%m%d"`
  testdays=`$SQLITE ${rpath}/sysdata "select day from sysdata where day='$dayfirst'"`
  if [ "X$testdays" != "X" ]
  then
#   ------------ Database -- un -- "From" - DB column  - Human  ----- Warning level - Con
#   ------------  column  -- it --  date  - name for   - column ----- variable name - dit
#   ------------   name   -- s  --        - total(max) -  name  ----- (conf/mon.conf)    - ion
analyzesysparams 'freeram'   KB   $dayfirst totalram  "Free RAM"      "FREERAM"      '>='
analyzesysparams 'activeram' KB   $dayfirst totalram  "Active RAM"    "ACTIVERAM"    '>='
analyzesysparams 'freeswap'  KB   $dayfirst totalswap "Free swap"     "FREESWAP"     '>='
analyzesysparams 'loadavg'   ""   $dayfirst   ""      "Load average"  "LOADAVG"      '>='
analyzesysparams 'procnum'   ""   $dayfirst   ""   "Number of processes" "PROCNUM"   '>='
analyzesysparams 'diskusage' '%'  $dayfirst   ""      "Disk usage"    "DISKUSAGE"    '>='
analyzesysparams 'diskiord' 'MB/sec' $dayfirst "" "Disk average read speed" "DISKIORD" '>='
analyzesysparams 'diskiowr' 'MB/sec' $dayfirst "" "Disk average write speed" "DISKIOWR" '>='
analyzesysparams 'cpuusage'  '%'  $dayfirst   ""     "CPU usage"       "CPUUSAGE"    '>='
analyzesysparams 'uptime'   'days' $dayfirst   ""       "Uptime"        "UPTIME"     '<'
  else
    echo "There is no data in the database for $ANALYS_DAYS days back."
  fi
}

function newtimeindex() {
  timeindexnow=$(date +"%s")
  echo $timeindexnow > ${tmpdir}/timeindex
}

function deltimeindex() {
  rm -f ${tmpdir}/timeindex
}

function gendash() {
  indic="ok"
  [ -n "`grep '<\*>' ${rpath}/report`" ] && indic="w1"
  [ -n "`grep '<\*\*>' ${rpath}/report`" ] && indic="w2"
  [ -n "`grep '<\*\*\*>' ${rpath}/report`" ] && indic="w3"
  case $DASHBOARD in
    HTML)
      ${rpath}/genhtml --type=dash --css=${indic}${1} ${rpath}/report 2>${rpath}/dashboard.log
# sed 's|<|\&lt\;|g;s|>|\&gt\;|g;s|"|\&quot\;|g'|while read line ; do echo -n "$line" ; done
      ;;
    JSON)
      ${rpath}/genjson --type=dash --css=${indic}${1} "`${rpath}/lib/txt2html ${rpath}/report`" 2>${rpath}/dashboard.log
      ;;
  esac
}

function genreport() {
  case $DASHBOARD in
    HTML)
      ${rpath}/genhtml --type=report 2>${rpath}/dashboard.log
      ;;
    JSON)
      ${rpath}/genjson --type=report 2>${rpath}/dashboard.log
      ;;
  esac
}

source ${rpath}/conf/mon.conf
[ "X$2" == "XSQL" ] && SQL=SQL
case ${1} in
  --alert-only | -ao | -alert | --only-alert)
    newtimeindex
    runscript SQL
    runactions
    mailalert
    [ -n "$DASHBOARD" ] && gendash marked
    deltimeindex
  ;;
  -dry | --dry | --dry-run)
    newtimeindex
    runscript SQL
    runactionstest
    deltimeindex
    cat ${rpath}/report
  ;;
  -analyze-sys | -analyze-system | --analyze-system | -as)
    runsysanalyze
    mailreport
    mailalert
  ;;
  -analyze-logs | --analyze-logs | -al)
    loganalysis
    mailreport
    mailalert
  ;;
  -h | -help | --help)
    echo "Usage: mon.run --report"
    echo "         - collects and logs system data and then sends report"
    echo "       mon.run --alert-only"
    echo "         - collects and logs system data, but sends report only if problems"
    echo "           found"
    echo "       mon.run --dry-run"
    echo "         - collects and logs system data, outputs it to stdout and store it"
    echo "           into the database, but doesn't send any reports."
    echo "       mon.run --analyze-system"
    echo "         - analyzes system parameters change over a period of time and sends"
    echo "       a report."
    echo "       mon.run <scriptname.mon.sh>"
    echo "         - runs a selected script and sends an alert if necessary"
#    echo "       mon.run --analyze-logs"
#    echo "         - analyzes log messages since the last run and sends the statistical"
#    echo "       data and an unusual activity report."
  ;;
  -rep | -report | --report)
    newtimeindex
    runscript SQL
    mailreport
    mailalert
    [ -n "$DASHBOARD" ] && genreport
    deltimeindex
  ;;
  --report=*)
    limit=${1#*=}
    [[ $limit =~ [^[0-9]] ]] && echo "Usage: --report=<number>" && exit 1
    newtimeindex
    runscript SQL $limit
    mailreport
    mailalert
    [ -n "$DASHBOARD" ] && genreport
    deltimeindex
  ;;
  *.mon)
    newtimeindex
    runscript ${1}
    runactions
    mailalert
    [ -n "$DASHBOARD" ] && gendash
    deltimeindex
  ;;
  *)
    echo "Run mon.run --help to see available options"
  ;;
esac
rm -f ${rpath}/mon.run.lock
#rm -f ${tmpdir}/sar.tmp
chmod 666 ${rpath}/alert* 2>/dev/null
export LC_MESSAGES=`echo ${currentlocale}`

