#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### Daemon control
# This allows to start this script on boot
# Just create a symlink like this:
# ln -s /path-to/monitoringload.run /etc/init.d
# (or /etc/rc.d/init.d if you have FHS compliant distro)

tempfile=/tmp/avgload-$$
pidfile=/var/run/monitorload.pid
mgpidfile=/var/run/mongoose.pid
touch ${tempfile}
trap 'rm -f $tempfile; exit' 0
trap 'rm -f $tempfile; exit' 3
trap 'rm -f $tempfile; exit' 15

case $1 in
start)
  [ -f ${pidfile} ] && echo "Already running (PID `cat $pidfile`)" && exit 0
  [ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
  rcommand=${xcommand##*/}
  rpath=${xcommand%/*}
#*/ (this is needed to fool vi comments syntax highlighting)

  source ${rpath}/conf/mon.conf
  LOAD_CRIT=${LOAD_CRIT%.*} ; [ "X$LOAD_CRIT" == "X" ] && LOAD_CRIT=0
  install -d $TMPDIR
  UPTIME=`which uptime`
  if [ -n "$DASHBOARD_TRANSPORT" ] ; then
    if [ "X$DASHBOARD_TRANSPORT" == "XSSH" ] ; then
      SCP=`which scp 2>/dev/null`
      [ -z "$SCP" ] && echo "scp utility not found, exiting" && exit 1
      SSH=`which ssh 2>/dev/null`
    fi
    [ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
    [ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
  fi
  echo $$ > $pidfile
  echo 0 > $tempfile
  
  if [ "X$MONGOOSE" == "X1" ] ; then
    printf "Starting web interface...      "
    MG=`which mongoose 2>/dev/null`
    if [ "X$MG" == "X" ] ; then
      if [ -f ${rpath}/mongoose ] ; then
        MG="${rpath}/mongoose"
      else
        echo "Error"
        echo "Mongoose is enabled in ${rpath}/conf/mon.conf but not found"
        exit 1
      fi
    fi
    [ -f ${rpath}/conf/htaccess ] || ($MG -A ${rpath}/conf/htaccess ${MONGOOSE_HOSTNAME} admin admin && printf "access file ${rpath}/conf/htaccess not found, created with login: admin, password: admin; use $MG -A ${rpath}/conf/htaccess <realm> <user> <passwd> to change credentials  ")
    MGOPTS=$(for opt in `cat ${rpath}/conf/mongoose.conf | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*# | sed 's|^|-|g'`; do printf " $opt" ; done)
    echo "`date` -- Starting $MG ${MGOPTS} -R ${MONGOOSE_HOSTNAME}" >> ${rpath}/mongoose.log
    $MG ${MGOPTS} -R ${MONGOOSE_HOSTNAME} >> ${rpath}/mongoose.log 2>&1 </dev/null &
    succ=$?
    echo $! > $mgpidfile
    [[ $succ -eq 0 ]] && echo "done" || echo "error"
  fi
  printf "Starting monitorload...      "
  
##### Main loop ########################################

  while true
  do
  # Checking how much the load average has changed
    rloadprev=`cat ${tempfile} 2>/dev/null` || rloadprev=0
    rload="$(cat /proc/loadavg | cut -d' ' -f2 | tee $tempfile)"
    rloadabs=${rload%.*} ; [ "X$rloadabs" == "X" ] && rloadabs=0
    rloadchng="$(echo "scale=2; $rload - $rloadprev" | bc)"
    x="$(echo "$rloadchng > $THRESHOLD" | bc)"
    [ "${1}" == "--verbose" ] && echo "Was: $rloadprev; Now: $rload; Change: $rloadchng; Test started? $x"

##### Running tests #####

### Tests that run if load has changed - we're interested in various metrics here
    if [ "X$x" == "X1" ]; then
## If load is not too high, all tests run
      if [[ $rloadabs -lt $LOAD_CRIT ]] ; then
        ${rpath}/mon.run -ao </dev/null &
      else
## otherwise, these tests only
        ${rpath}/mon.run mem.mon </dev/null &
      fi
      sleep $FREQ
      continue
    fi

    sleep $FREQ

## Tests that are disabled if load average is too high
    if [[ $rloadabs -lt $LOAD_CRIT ]] ; then
    ## Connections alerts number limit
      if [ -f /tmp/m_script/conn_test_runs_count ] ; then
        [ `cat /tmp/m_script/conn_test_runs_count|wc -l` -gt $PORTSMON_RUNS ] && echo > /tmp/m_script/conn_test_runs_count && ${rpath}/fixports.run || echo >> /tmp/m_script/conn_test_runs_count
      else
        echo > /tmp/m_script/conn_test_runs_count
      fi
    ## With dashboard enabled, it is necessary to run all tests in a single run
      ${rpath}/mon.run connections.mon,bandwidth.mon,services.mon,mem.mon,cpu.mon,servers.mon SQL </dev/null &
      if [ -n "$DASHBOARD_TRANSPORT" ] ; then
      # means that we need to fetch reports from other servers
        source "${rpath}/conf/cloud.conf"
        [ -n "$SSHPORT" ] || SSHPORT=22
        case $DASHBOARD_TRANSPORT in
          SSH)
            for cluster in `cat "${rpath}/servers.list" | grep -v ^$ | grep -v ^# | grep -v ^[[:space:]]*# | cut -d'|' -f5 | sort | uniq` ; do
              mpath=`grep ^$cluster\| "${rpath}/conf/clusters.conf" | cut -d'|' -f8`
              [ -z "$mpath" ] && mpath="/opt/m"
              for server in `grep \|${cluster}$ "${rpath}/servers.list" | grep -v ^# | grep -v ^[[:space:]]*#` ; do
                ip=${server%%|*}
                [ `echo $ip | grep -c "$localip"` -ne 0 ] && continue
                key=`echo $server | cut -d'|' -f2`
                [ -f "${rpath}/keys/${key}" ] || key=${key}.pem
                [ -f "${rpath}/keys/${key}" ] || (echo "Key $key not found" >> "${rpath}/monitoring.log" ; continue)
                servername=`echo $server | cut -d'|' -f4`
                install -d "${rpath}/www/servers/${cluster}/${servername}"
                $SSH -i "${rpath}/keys/${key}" -p $SSHPORT ${ip} find ${mpath}/www/servers/localhost -type f -printf \"%f\\n\" | sort > ${TMPDIR}/${ip}.remote.dash.list
                find "${rpath}/www/servers/${cluster}/${servername}" -type f -printf "%f\n" | sort > ${TMPDIR}/${ip}.local.dash.list
                nd=`diff ${TMPDIR}/${ip}.remote.dash.list ${TMPDIR}/${ip}.local.dash.list | grep ^\< | sed 's|^< ||'`
                if [ -n "$nd" ] ; then
                  nd="$nd dash.html report.html"
                  for dashfile in $nd ; do
                    $SCP -i "${rpath}/keys/${key}" -P $SSHPORT ${ip}:${mpath}/www/servers/localhost/$dashfile "${rpath}/www/servers/${cluster}/${servername}/" >/dev/null 2>&1 </dev/null &
                  done
                  [ -e "${rpath}/www/servers/${cluster}/${servername}/notfound" ] && rm -f "${rpath}/www/servers/${cluster}/${servername}/notfound"
                  [ -e "${rpath}/www/servers/${cluster}/${servername}/stopped" ] && rm -f "${rpath}/www/servers/${cluster}/${servername}/stopped"
                else
                  echo "No data received from server ${servername}, cluster ${cluster}" >> "${rpath}/monitoring.log"
                  if [ -e "${rpath}/www/servers/${cluster}/${servername}/notfound" ] ; then
                    rm -f "${rpath}/www/servers/${cluster}/${servername}/notfound"
                    touch "${rpath}/www/servers/${cluster}/${servername}/stopped"
                  else
                    touch "${rpath}/www/servers/${cluster}/${servername}/notfound"
                  fi
                fi
                for dashfile in `diff ${TMPDIR}/${ip}.remote.dash.list ${TMPDIR}/${ip}.local.dash.list | grep ^\> | sed 's|^> ||'` ; do
                  rm -f "${rpath}/www/servers/${cluster}/${servername}/${dashfile}"
                done
              done
              for server in `find ${rpath}/www/servers/$cluster/* -maxdepth 0 -type d 2>/dev/null` ; do
                [ `cat "${rpath}/servers.list" | grep "|${cluster}[[:space:]]*$" | grep -c "|${server##*/}|"` -eq 0 ] && rm -rf "${rpath}/www/servers/$cluster/${server##*/}"
              done
            done
          ;;
          JSON)
          
          ;;
          XML)
          
          ;;
          HTML)
          
          ;;
          *)
          echo "Fetching data with $DASHBOARD_TRANSPORT is not supported" >> "${rpath}/dashboard.log"
          ;;
        esac
      fi
      # Standalone tests, if any
      for sa in ${rpath}/standalone/rc/* ; do
        for satest in ${sa}/rc/* ; do
          $satest >> ${rpath}/sa.log
        done  </dev/null &
      done
    else
## Tests that are always enabled
      ${rpath}/mon.run mem.mon,servers.mon </dev/null &
    fi
###
  done >/dev/null 2>&1 </dev/null &
###########################################################

  succ=$?
  echo $! > $pidfile
  [[ $succ -eq 0 ]] && echo "done" || echo "error"
  exit 0
  ;;
stop)
  if [ -f ${pidfile} ]; then
    pid=`cat ${pidfile}|tail -1`
    printf "Stopping monitorload (pid $pid)...      "
    rm -f $pidfile
    kill -15 $pid && rm -f $tempfile && echo "done"
  else
    echo "${pidfile} not found!"
  fi
  if [ -f $mgpidfile ] ; then
    pid=`cat $mgpidfile|tail -1`
    printf "Stopping web interface (pid $pid)...       "
    kill -15 $pid && rm -f $mgpidfile && echo "done"
  fi
  ;;
restart)
  $0 stop
  sleep 3
  $0 start
  ;;
status)
  if [ -f ${pidfile} ]; then
    pid=`cat ${pidfile}|tail -1`
    echo "${0##*/} is running (pid $pid)"
  else
    echo "${0##*/} is not running"
  fi
  if [ -f $mgpidfile ] ; then
    pid=`cat $mgpidfile|tail -1`
    echo "HTTP is running (pid $pid)"
  else
    echo "HTTP is not running"
  fi
  ;;
*)
  echo "Usage: $0 start|stop|restart|status"
  ;;
esac


