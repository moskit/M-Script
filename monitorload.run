#!/bin/bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### Daemon control
# This allows to start this script on boot
# Just create a symlink like this:
# ln -s /path-to/monitoringload.run /etc/init.d
### For chkconfig:
# chkconfig:   2345 99 1
# description: monitorload
# processname: monitorload.run
### BEGIN INIT INFO
# Provides:          monitorload
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Required-Start:
# Required-Stop:
### END INIT INFO

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${BASH_SOURCE##*/}
rpath=${rpath%/*}
#*/
## The root folder for descendant processes. It is not recommended to rely on
## this in scripts, because they would mess up things if executed independently
## Good idea might be to check if M_ROOT is defined and then find the path if it
## is not.
export M_ROOT="$rpath"

pidfile=/var/run/${rcommand}.pid
mgpidfile=/var/run/${rcommand}.http.pid
[ -f "$rpath/conf/mon.conf" ] && source "$rpath/conf/mon.conf" || exit 1
[ `find "$rpath/standalone/rc" -prune -type l | wc -l` -gt 0 ] && source "$rpath/lib/functions.sh"

set +h

case $1 in
start)

  [ -f "$pidfile" ] && [ -d /proc/`cat "$pidfile"` ] && echo "Already running (PID `cat "$pidfile"`)" | tee -a "$rpath/monitoring.log" && exit 0
  
  [ -f "$rpath/mon.run.lock" ] && rm -f "$rpath/mon.run.lock"
  
  LOAD_CRIT=${LOAD_CRIT%.*} ; [ -z "$LOAD_CRIT" ] && LOAD_CRIT=0
  install -d "$M_TEMP"
  [ -z "$BASIC_SEQUENCE" ] &&  BASIC_SEQUENCE=connections.mon,bandwidth.mon,services.mon,mem.mon,cpu.mon,servers.mon,netstat.mon
  [ -z "$HIGH_LOAD_SEQUENCE" ] && HIGH_LOAD_SEQUENCE=mem.mon
  echo $$ > $pidfile
  
  [ -n "$FREQ" ] || FREQ=200
  if [ "X$MONGOOSE" == "X1" ] ; then
    echo -n "Starting web interface...      "
    MG=`which mongoose 2>/dev/null`
    if [ -z "$MG" ] ; then
      if [ -f "$rpath/mongoose" ] ; then
        MG="$rpath/mongoose"
      else
        echo -e "Error\nMongoose is enabled in $rpath/conf/mon.conf but not found"
        exit 1
      fi
    fi
    [ -f "$rpath/conf/htaccess" ] || ([ -z "$MONGOOSE_HOSTNAME" ] && MONGOOSE_HOSTNAME=`hostname` ; "$rpath"/helpers/setvar MONGOOSE_HOSTNAME=`hostname` ; $MG -A "$rpath/conf/htaccess" "$MONGOOSE_HOSTNAME" admin admin && echo -e "access file $rpath/conf/htaccess not found, creating one with:\n\nlogin: admin\npassword: admin\n\nuse $MG -A $rpath/conf/htaccess <realm> <user> <passwd> to change credentials\n\n")
    MGOPTS=$(for opt in `cat "$rpath/conf/mongoose.conf" | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*# | sed 's|^|-|g'`; do printf " $opt" ; done)
    echo "`date` -- Starting $MG $MGOPTS -R $MONGOOSE_HOSTNAME" >> "$rpath/mongoose.log"
    $MG $MGOPTS -R $MONGOOSE_HOSTNAME >> "$rpath/mongoose.log" 2>&1 </dev/null &
    succ=$?
    echo $! > $mgpidfile
    if [[ $succ -eq 0 ]]; then
      echo "done"
      echo "Mongoose server started" >> "$rpath/monitoring.log"
    else
      echo "error"
    fi
  fi
  printf "Starting monitorload...      "
  
##### Main loop ########################################

  while true
  do
  # Checking how much load average has changed
    [ -n "$rload" ] && rloadprev=$rload || rloadprev=0
    rload="$(cat /proc/loadavg | cut -d' ' -f2)"
    rloadabs=${rload%.*}
    rloadchng="$(echo "scale=2; $rload - $rloadprev" | bc)"
    x="$(echo "$rloadchng > $THRESHOLD" | bc)"

##### Running tests #####
    sleep 10
    # Running actions from the queue
    "$rpath"/lib/mq.run &
    
### Tests that run if load has changed - we are interested in more metrics here
    if [ "X$x" == "X1" ]; then
## A pause is necessary here, because it is practically the same moment as test
## at line 114 from the previous run, so lock file doesn't really work.
## But the full cycle is not a good idea because we want to know what caused
## the load. So we need just some delay to secure the lock.
## If load is not too high, all tests run
      if [[ $rloadabs -lt $LOAD_CRIT ]] ; then
        "$rpath"/mon.run -ao </dev/null &
      else
## otherwise, these tests only
        "$rpath"/mon.run "$HIGH_LOAD_SEQUENCE" </dev/null &
      fi
    fi
    
    sleep $FREQ

## Tests that are disabled if load average is too high
    if [[ $rloadabs -lt $LOAD_CRIT ]] ; then
      "$rpath"/mon.run "$BASIC_SEQUENCE" SQL </dev/null &
      if [ -n "$DASHBOARD_TRANSPORT" ] ; then
      # means that we need to fetch reports from other servers
        case $DASHBOARD_TRANSPORT in
          SSH)
            "$rpath"/getdash.ssh 2>>"$rpath/logs/dashboard.log" </dev/null &
          ;;
          JSON)
          
          ;;
          XML)
          
          ;;
          HTML)
          
          ;;
          *)
          echo "Fetching data with $DASHBOARD_TRANSPORT is not supported" >> "$rpath/logs/dashboard.log"
          ;;
        esac
      fi
      # Standalone tests, if any
      if [ -d "$rpath/standalone/rc" ]; then
        for sa in `find "$rpath/standalone/rc/" -prune -type l` ; do
          [ -n "$RUNDELAY" ] && sleep $RUNDELAY
          safolder=$(readlink -f "$sa")
          echo "`date +"%H:%M:%S"` Running tests from folder $safolder:" >> "$rpath/logs/sa.log"
          for satest in `find "$sa/rc/" -maxdepth 1 -type l | sort` ; do
            rsatest=$(readlink -f "$satest")
            rsatest=${rsatest##*/}
            [ -n "$RUNDELAY" ] && sleep $RUNDELAY
            echo "`date +"%H:%M:%S"` $satest" >> "$rpath/logs/sa.log"
            sares=`$satest 2>>"$rpath/logs/sa.log"`
            if [ -n "$sares" -a $? -eq 0 ]; then
              echo -e "${sares}\n" > "$safolder/${rsatest}.report"
              gendash "${rsatest%.mon}" "$safolder/${rsatest}.report"
            fi
          done </dev/null &
        done
      fi
    else
## Tests that are always enabled
      "$rpath"/mon.run "$HIGH_LOAD_SEQUENCE" </dev/null &
    fi
###
  done >/dev/null 2>&1 </dev/null &
###########################################################

  succ=$?
  echo $! > $pidfile
  if [[ $succ -eq 0 ]]; then
    echo "Monitorload daemon started" >> "$rpath/monitoring.log"
    echo "done"
  else
    echo "error"
  fi
  exit 0
  ;;
stop)
  if [ -f "$pidfile" ]; then
    echo "3" > "$rpath/services.mon.lock"
    pid=`cat "$pidfile"|tail -1`
    echo -n "Stopping monitorload (PID $pid)...      "
    kill -15 $pid
    [ $? -ne 0 ] && echo "ERROR" && exit 1
    sleep 1
    for ((i=0; i<5; i++)); do
      [ ! -d /proc/$pid ] && rm -f $pidfile && echo "done" && echo "Monitorload daemon stopped" >> "$rpath/monitoring.log" && break || sleep 3
    done
    [ -d /proc/$pid ] && kill -6 $pid && rm -f $pidfile && echo "done" && echo "Monitorload server has been killed brutally" >> "$rpath/monitoring.log"
  else
    echo "$pidfile not found!"
  fi
  if [ "X$MONGOOSE" == "X1" ] ; then
    if [ -f $mgpidfile ] ; then
      echo "3" > "$rpath/connections.mon.lock"
      pid=`cat $mgpidfile|tail -1`
      printf "Stopping web interface (PID $pid)...       "
      kill -15 $pid
      [ $? -ne 0 ] && echo "ERROR" && exit 1
      sleep 3
      for ((i=0; i<5; i++)); do
        [ ! -d /proc/$pid ] && rm -f $mgpidfile && echo "done" && echo "Mongoose server stopped" >> "$rpath/monitoring.log" && break || sleep 3
      done
      [ -d /proc/$pid ] && kill -6 $pid && rm -f $mgpidfile && echo "done" && echo "Mongoose server has been killed brutally" >> "$rpath/monitoring.log"
    else
      echo "$mgpidfile not found!"
    fi
  fi
  ;;
restart)
  $0 stop && $0 start
  ;;
status)
  if [ -f "$pidfile" ]; then
    pid=`cat "$pidfile"|tail -1`
    if [ -d /proc/$pid ]; then
      echo "${0##*/} is running (PID $pid)"
    else
      echo "PID file exists, but process PID $pid does not"
    fi
  else
    echo "${0##*/} is not running"
  fi
  if [ -f $mgpidfile ] ; then
    pid=`cat $mgpidfile|tail -1`
    if [ -d /proc/$pid ]; then
      echo "HTTP is running (pid $pid)"
    else
      echo "PID file exists, but process PID $pid does not"
    fi
  else
    echo "HTTP is not running"
  fi
  ;;
*)
  echo "Usage: $0 start|stop|restart|status"
  ;;
esac


