#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


### Daemon control
# This allows to start this script on boot
# Just create a symlink like this:
# ln -s /path-to/monitoringload.run /etc/init.d
# (or /etc/rc.d/init.d if you have FHS compliant distro)

tempfile=/tmp/avgload-$$
pidfile=/var/run/monitorload.pid
mgpidfile=/var/run/mongoose.pid
touch ${tempfile}
trap 'rm -f $tempfile; rm -f $pidfile; rm -f $mgpidfile 2>/dev/null; exit' 0
trap 'rm -f $tempfile; rm -f $pidfile; rm -f $mgpidfile 2>/dev/null; exit' 3
trap 'rm -f $tempfile; rm -f $pidfile; rm -f $mgpidfile 2>/dev/null; exit' 15

case $1 in
start)

  [ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
  rcommand=${xcommand##*/}
  rpath=${xcommand%/*}
#*/ (this is needed to fool vi comments syntax highlighting)

  source ${rpath}/conf/mon.conf
  LOAD_CRIT=${LOAD_CRIT%.*} ; [ "X$LOAD_CRIT" == "X" ] && LOAD_CRIT=0
  
  UPTIME=`which uptime`
  echo $$ > $pidfile
  echo 0 > $tempfile

  if [ "X$MONGOOSE" == "X1" ] ; then
    printf "Starting web interface...      "
    MG=`which mongoose 2>/dev/null`
    if [ "X$MG" == "X" ] ; then
      if [ -f ${rpath}/mongoose ] ; then
        MG="${rpath}/mongoose"
      else
        echo "Error"
        echo "Mongoose is enabled in ${rpath}/conf/mon.conf but not found"
        exit 1
      fi
    fi
    [ -f ${rpath}/conf/htaccess ] || ($MG -A ${rpath}/conf/htaccess `hostname` admin admin && printf "access file ${rpath}/conf/htaccess not found, created with login: admin, password: admin; use $MG -A ${rpath}/conf/htaccess <realm> <user> <passwd> to change credentials  ")
    MGOPTS=$(for opt in `cat ${rpath}/conf/mongoose.conf | grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*# | sed 's|^|-|g'`; do printf " $opt" ; done)
    echo "`date` -- Starting $MG ${MGOPTS}" >> ${rpath}/mongoose.log
    $MG ${MGOPTS} >> ${rpath}/mongoose.log 2>&1 &
    echo $! > $mgpidfile
    echo "done"
  fi
  printf "Starting monitoring daemon...      "
  while true
  do
    rloadprev=`cat ${tempfile} 2>/dev/null` || rloadprev=0
    rload="$(cat /proc/loadavg | cut -d' ' -f2 | tee $tempfile)"
    rloadabs=${rload%.*} ; [ "X$rloadabs" == "X" ] && rloadabs=0
    rloadchng="$(echo "scale=2; $rload - $rloadprev" | bc)"
    x="$(echo "$rloadchng > $THRESHOLD" | bc)"
    [ "${1}" == "--verbose" ] && echo "Was: $rloadprev; Now: $rload; Change: $rloadchng; Test started? $x"
    
    if [ "X$x" == "X1" ]; then
      if [[ $rload -lt $LOAD_CRIT ]] ; then
        ${rpath}/mon.run -ao &
      else
        ${rpath}/mon.run mem.mon.sh &
      fi
    fi

    sleep $FREQ
    
### Comment this out and put your scripts or tests to the 'custom' folder to run
### them every FREQ seconds. They must be executable.
### Output of custom scripts is not captured, you have to care about it yourself
### This is intended for some quick additions. If you want to add an 'official' 
### test, put it to the 'tests' folder and symlink it to the 'rc' folder.

# for customscript in `find ${rpath}/custom -type f -executable` ; do $customscript ; done

### But consider uncommenting this line inside the condition below instead; this
### disables custom scripts if the system load is very high

    if [[ $rload -lt $LOAD_CRIT ]] ; then
    
      # for customscript in `find ${rpath}/custom -type f -executable` ; do $customscript ; done
    
      if [ -f /tmp/m_script/conn_test_runs_count ] ; then
        [ `cat /tmp/m_script/conn_test_runs_count|wc -l` -gt $PORTSMON_RUNS ] && echo > /tmp/m_script/conn_test_runs_count && ${rpath}/fixports.run
      else
        echo > /tmp/m_script/conn_test_runs_count
      fi
      ${rpath}/mon.run connections.mon.sh ; echo >> /tmp/m_script/conn_test_runs_count
# Checking running processes (services.conf)
      ${rpath}/mon.run services.mon.sh
# Checking other servers (listed in servers.conf) availability
      ${rpath}/mon.run servers.mon.sh
###
    fi
  
  done & 2>/dev/null
  echo $! > $pidfile
  echo "done"
  ;;
stop)
  if [ -f ${pidfile} ]; then
    pid=`cat ${pidfile}|tail -1`
    printf "Stopping monitorload (pid $pid)...      "
    kill -15 $pid && echo "done"
  else
    echo "${pidfile} not found!"
  fi
  if [ -f $mgpidfile ] ; then
    pid=`cat $mgpidfile|tail -1`
    printf "Stopping web interface...       "
    kill -15 $pid && rm -f $mgpidfile && echo "done"
  fi
  ;;
restart)
  $0 stop
  sleep 3
  $0 start
  ;;
*)
  echo "Usage: $0 start|stop|restart"
  ;;
esac


