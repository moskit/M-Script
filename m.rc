#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

M_ROOT="$rpath"

setup_env() {
  [ -f $HOME/.bashrc ] && source $HOME/.bashrc
  source "$rpath/conf/mon.conf"
  source "$rpath/conf/deploy.conf"
  HOME_ORIG=$HOME
  HOME=$M_ROOT
  # with a single cloud we can speed up things a bit (see scripts in cloud/common)
  CLOUD=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
  if [ `echo "$CLOUD" | wc -l` -eq 1 ]; then
    export CLOUD
  else
    # DEFAULT_CLOUD is not present in any config because it seems more reasonable
    # to have it in some environment settings file like .bash_profile, .bashrc or
    # .msh.env. But you can put it into any config sourced above, that is
    # mon.conf or deploy.conf
    if [ -n "$DEFAULT_CLOUD" ]; then
      CLOUD="$DEFAULT_CLOUD"
      export CLOUD
    else
      unset CLOUD
    fi
  fi
  export ROLES_ROOT M_ROOT HOME HOME_ORIG M_TEMP
  $ALWAYS_LOGIN_SHELL && source /etc/profile
  [ -f "$HOME/.bashrc" ] && source "$HOME/.bashrc"
  [ -f "$HOME/.msh.env" ] && source "$HOME/.msh.env"
  export PATH="$M_ROOT/deploy:$M_ROOT/cloud/common:$M_ROOT/helpers:$M_ROOT/backup:${PATH}"
}

cr() {
  [ -z "$1" ] && cd "$ROLES_ROOT/roles" && return
  [ "_$1" == "_--list" ] && ls "$ROLES_ROOT/roles" && return
  [ "_$1" == "_--reload" ] && cr "$role" && return
  if [ -n "$1" ] && [ ! -d "$ROLES_ROOT/roles/$1" ] ; then
    echo "Role $1 doesn't exist. Use cr --list to get the list of roles available."
    return
  fi
  cd "$ROLES_ROOT/roles/$1"
  export M_ROLE="${1%/}"
  export role="${1%/}"
  [ -e role.rc ] && source role.rc
  if [ -n "$cluster" ]; then
    M_CLUSTER="$cluster"
    echo "Default cluster is $M_CLUSTER"
  else
    M_CLUSTER=`cat "$rpath/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -d'|' -f1,10,12 | grep \|${CLOUD}$ | grep \|${M_ROLE}\| | cut -sd'|' -f1`
    ncl=`echo -e "$M_CLUSTER" | wc -l`
  [ $ncl -gt 1 ] && M_CLUSTER=`echo -n "$M_CLUSTER" | tr '\n' ','` && echo -e "$ncl clusters found for this role. Default cluster is a list: $M_CLUSTER\nTo set specific cluster, use command 'role set cluster <cluster name>'."
  fi
  if [ -z "$M_CLUSTER" ]; then
    echo "Cluster not found for this role, default cluster and flavor cannot be determined."
  else
    export M_CLUSTER
    flavor=`grep ^$M_CLUSTER\| "$rpath/conf/clusters.conf" | cut -d'|' -f11`
    export flavor
    [ -z "$CLOUD" ] && CLOUD=`grep ^$M_CLUSTER\| "$rpath/conf/clusters.conf" | cut -d'|' -f12`
    export CLOUD
  fi
  source "$M_ROOT/conf/clouds/${CLOUD}.conf"
  set_default_ps
  [ -f "$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf" ] && source "$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf"
}

exitrole() {
  unset M_ROLE M_CLUSTER role flavor cluster
  setup_env
  set_default_ps
}

set_default_ps() {
  if $use_color ; then
    if [ -z "$PS_COLOR" ] ; then
      PS1_COLOR="$ATTR_BOLD$FG_RED"
    else
      PS1_COLOR="`eval echo "$PS_COLOR"`"
    fi
    PS1="\[${CONTR_SEQ}$ATTR_NONE$FG_WHITE\][\[${CONTR_SEQ}$PS1_COLOR\]${HOSTNAME%%.*}\[${UNSET_COLOR}\]:\[${CONTR_SEQ}$ATTR_BOLD$FG_CYAN\]${M_ROLE}\[${CONTR_SEQ}$ATTR_NONE$FG_WHITE\] \W]# \[${UNSET_COLOR}\]"
  else
    PS1="[${HOSTNAME%%.*}:${M_ROLE}]# "
  fi
  export PS1
}

ce() {
  [ -f "$M_ROOT/.msh.env.${1}" ] && source "$M_ROOT/.msh.env.${1}"
}

safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
  && type -P dircolors >/dev/null \
  && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && M_COLOR=1

if [ -n "$M_COLOR" ] ; then
  export M_COLOR
# Attribute codes: 
# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed
# Text color codes:
# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white
# Background color codes:
# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white
  CONTR_SEQ='\033['
  UNSET_COLOR="${CONTR_SEQ}0m"
  FG_BLACK='30m'
  FG_RED='31m'
  FG_GREEN='32m'
  FG_YELLOW='33m'
  FG_BLUE='34m'
  FG_MAGENTA='35m'
  FG_CYAN='36m'
  FG_WHITE='37m'
  BG_BLACK='40m'
  BG_RED='41m'
  BG_GREEN='42m'
  BG_YELLOW='43m'
  BG_BLUE='44m'
  BG_MAGENTA='45m'
  BG_CYAN='46m'
  BG_WHITE='47m'
  ATTR_NONE='00;'
  ATTR_BOLD='01;'
  ATTR_UNDERSCORE='04;'
  ATTR_BLINK='05;'
  ATTR_REVERSE='07;'
  ATTR_CONCEALED='08;'
  # Example:
  # echo -e "$CONTR_SEQ$ATTR_BOLD$FG_RED$HOSTNAME$CONTR_SEQ$ATTR_BLINK${FG_WHITE}:$UNSET_COLOR"
  # echo -e "$CONTR_SEQ$FG_MAGENTA blablabla $UNSET_COLOR"  ### - simplest case
  export CONTR_SEQ UNSET_COLOR FG_BLACK FG_RED FG_GREEN FG_YELLOW FG_BLUE FG_MAGENTA FG_CYAN FG_WHITE BG_BLACK BG_RED BG_GREEN BG_YELLOW BG_BLUE BG_MAGENTA BG_CYAN BG_WHITE ATTR_NONE ATTR_BOLD ATTR_UNDERSCORE ATTR_BLINK ATTR_REVERSE ATTR_CONCEALED
fi

[ -n "$1" ] && customenv="$1"
setup_env
set_default_ps
cd


unset safe_term match_lhs

