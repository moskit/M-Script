#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/

[ -z "$SCP" ] && SCP=`which scp 2>/dev/null`
[ -z "$SCP" ] && echo "scp utility not found, exiting" && exit 1
[ -z "$SSH" ] && SSH=`which ssh 2>/dev/null`
[ -z "$SSH_TIMEOUT" ] && SSH_TIMEOUT=10
SSH_OPTS="-o StrictHostKeyChecking=yes -o PasswordAuthentication=no -o ConnectTimeout=$SSH_TIMEOUT"
#SSH="$SSH $SSH_OPTS"
#SCP="$SCP $SSH_OPTS"
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"

source "$rpath/conf/mon.conf"
#source "$rpath/conf/clouds/${CLOUD}.conf"
source "$rpath/lib/functions.sh"

SQLITE=dbquery
#SQLITE=`which sqlite3 2>/dev/null`

LOG="$rpath/logs/dashboard.log"
[ -n "$debug" ] && debug=false || debug=true

[ -n "$SSHPORT" ] || SSHPORT=22

monitor="$1"
if [ -z "$monitor" ]; then
  monitor="servers"
else
  shift
  if [ -n "$1" ]; then
    targetcluster="$1"
    shift
    clustered_as="$1"
  fi
fi

IFS1=$IFS ; IFS='
'

for cld in `cat "$rpath/servers.list" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f6 | sort | uniq` ; do

for cluster in `cat "$rpath/servers.list" | grep -vE "^$|^#|^[[:space:]]*#" | grep "|${cld}$" | cut -d'|' -f5 | sort | uniq` ; do
  SSH_REMOTE_USER=`grep ^$cluster\| "$rpath/conf/clusters.conf" | cut -s -d'|' -f13`
  [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root"
  [ "X$cluster" == "X$SUPER_CLUSTER" ] && continue
  [ -n "$targetcluster" -a "$targetcluster" != "$cluster" ] && continue
  [ -z "$clustered_as" ] && clustered_as="$cluster"
  $debug && log "Getting dash files from cluster $cluster monitor $monitor clustered as $clustered_as"
  mpath=`grep ^$cluster\| "$rpath/conf/clusters.conf" | cut -d'|' -f8`
  [ -z "$mpath" ] && mpath="/opt/m"
  for server in `grep "|${cld}$" "$rpath/servers.list" | grep "|${cluster}|" | grep -vE "^$|^#|^[[:space:]]*#"` ; do
    [ -n "$RUNDELAY" ] && sleep $RUNDELAY
    time0=`date +"%s"`
    ip=${server%%|*}
    [ `echo $ip | grep -c "^$localip$"` -ne 0 ] && continue
    key=`find_key server $ip`
    servername=`echo $server | cut -d'|' -f4`
    [ -d "$rpath/www/$monitor/$cld/$clustered_as/$servername" ] || install -d "$rpath/www/$monitor/$cld/$clustered_as/$servername"
    (IFS=$IFS1 ; $SSH -i "$key" -p $SSHPORT $SSH_OPTS "$SSH_REMOTE_USER"@"$ip" find "$mpath/www/$monitor/localhost" -type f -printf \"%f\\n\" | sort > "$M_TEMP/${ip}.${monitor}.remote.dash.list")
    find "$rpath/www/$monitor/$cld/$clustered_as/$servername" -type f -printf "%f\n" | sort > "$M_TEMP/${ip}.${monitor}.local.dash.list"
    nd=(`diff "$M_TEMP/${ip}.${monitor}.remote.dash.list" "$M_TEMP/${ip}.${monitor}.local.dash.list" | grep ^\< | sed 's|^< ||'`)
    if [ -n "$nd" ] ; then
      nd+=( "dash.html" "report.html" )
      scplist="{`echo -n "${nd[*]}" | tr '\n' ','`}"
      (IFS=$IFS1 ; $SCP -i "$key" -P $SSHPORT $SSH_OPTS "$SSH_REMOTE_USER"@"$ip":"$mpath/www/$monitor/localhost/$scplist" "$rpath/www/$monitor/$cld/$clustered_as/$servername/" > /dev/null 2>&1 </dev/null &)
      unset nd
      [ -e "$rpath/www/$monitor/$cld/$clustered_as/$servername/notfound" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$servername/notfound"
      [ -e "$rpath/www/$monitor/$cld/$clustered_as/$servername/stopped" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$servername/stopped"
    else
      log "No data received from server ${servername}, cluster ${cluster}, monitor ${monitor}"
      if [ -e "$rpath/www/$monitor/$cld/$clustered_as/$servername/notfound" ] ; then
        rm -f "$rpath/www/$monitor/$cld/$clustered_as/$servername/notfound"
        touch "$rpath/www/$monitor/$cld/$clustered_as/$servername/stopped"
      else
        touch "$rpath/www/$monitor/$cld/$clustered_as/$servername/notfound"
      fi
    fi
    for dashfile in `diff "$M_TEMP/${ip}.${monitor}.remote.dash.list" "$M_TEMP/${ip}.${monitor}.local.dash.list" | grep ^\> | sed 's|^> ||'` ; do
      [ -n "$dashfile" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$servername/$dashfile"
    done
    time1=`date +"%s"`
    timediff=`expr $time1 - $time0`
    if [ "X$SQLITE3" == "X1" ] ; then
      daynow=$(date +"%Y%m%d")
      $SQLITE "$rpath/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '$clustered_as/$servername', '$timediff')"
    else
      log "$clustered_as/${servername}: $timediff sec"
    fi
  done
  for server in `find "$rpath/www/$monitor/$cld/$clustered_as/"* -maxdepth 0 -type d 2>/dev/null` ; do
    [ `cat "$rpath/servers.list" | grep "|${cld}$" | grep "|$cluster|" | grep -c "|${server##*/}|"` -eq 0 ] && rm -rf "$rpath/www/$monitor/$cld/$clustered_as/${server##*/}"
  done
  unset clustered_as
done

[ -d "$rpath/mon.backups/dash/" ] || install -d "$rpath/mon.backups/dash/"
for cluster in `find "$rpath/www/$monitor/$cld" -mindepth 1 -maxdepth 1 -type d` ; do
  cluster=${cluster##*/}
  [ -z "$cluster" ] && continue
  if [ "X$monitor" == "Xservers" ] ; then
    # Clusters not present in clusters.conf are backuped to M_ROOT/mon.backups/dash
    if [ -n "$cluster" -a "$cluster" != "localhost" ]; then
      if [ `grep -c "^$cluster|" "$rpath/conf/clusters.conf"` -eq 0 ]; then
        [ -d "$rpath/mon.backups/dash/$cld/" ] || install -d "$rpath/mon.backups/dash/$cld/"
        cp -ru "$rpath/www/$monitor/$cld/$cluster" "$rpath/mon.backups/dash/$cld/"
        rm -rf "$rpath/www/$monitor/$cld/$cluster"
      fi
    fi
    # Servers terminated or stopped
    for server in `find "$rpath/www/$monitor/$cld/$cluster" -mindepth 1 -maxdepth 1 -type d` ; do
      server=${server##*/}
      if [ `grep "|${cld}$" "$rpath/servers.list" | grep -E -c "^$server\||\|$server\|" "$rpath/servers.list"` -eq 0 ]; then
        cp -ru "$rpath/www/$monitor/$cld/$clustered_as/$server" "$rpath/mon.backups/dash/$cld/"
        rm -rf "$rpath/www/$monitor/$cld/$clustered_as/$server"
      fi
    done
  fi
done

done

IFS=$IFS1

