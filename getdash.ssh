#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/

SCP=`which scp 2>/dev/null`
[ -z "$SCP" ] && echo "scp utility not found, exiting" && exit 1
SSH=`which ssh 2>/dev/null`
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
SQLITE=`which sqlite3 2>/dev/null`
source "${rpath}/conf/mon.conf"
source "${rpath}/conf/cloud.conf"
[ -n "$SSHPORT" ] || SSHPORT=22
timeindexnow=`cat ${TMPDIR}/timeindex 2>/dev/null` || timeindexnow=`date +"%s"`

monitor="$1"
if [ -z "$monitor" ]; then
  monitor="servers"
else
  shift
  if [ -n "$1" ]; then
    targetcluster="$1"
    shift
    clustered_as="$1"
  fi
fi


IFS1=$IFS ; IFS='
'
for cluster in `cat "${rpath}/servers.list" | grep -v ^$ | grep -v ^# | grep -v ^[[:space:]]*# | cut -d'|' -f5 | sort | uniq` ; do
  [ -n "$targetcluster" -a "$targetcluster" != "$cluster" ] && continue
  [ -z "$clustered_as" ] && clustered_as="$cluster"
  mpath=`grep ^$cluster\| "${rpath}/conf/clusters.conf" | cut -d'|' -f8`
  [ -z "$mpath" ] && mpath="/opt/m"
  for server in `grep \|${cluster}$ "${rpath}/servers.list" | grep -v ^# | grep -v ^[[:space:]]*#` ; do
    [ -n "$RUNDELAY" ] && sleep $RUNDELAY
    time0=`date +"%s"`
    ip=${server%%|*}
    [ `echo $ip | grep -c "^$localip$"` -ne 0 ] && continue
    key=`echo $server | cut -d'|' -f2`
    [ -f "${rpath}/keys/${key}" ] || key=${key}.pem
    [ -f "${rpath}/keys/${key}" ] || (echo "Key $key not found" >> "${rpath}/monitoring.log" ; continue)
    servername=`echo $server | cut -d'|' -f4`
    install -d "${rpath}/www/$monitor/${clustered_as}/${servername}"
    $SSH -i "${rpath}/keys/${key}" -p $SSHPORT ${ip} find ${mpath}/www/$monitor/localhost -type f -printf \"%f\\n\" | sort > ${TMPDIR}/${ip}.remote.dash.list
    find "${rpath}/www/$monitor/${clustered_as}/${servername}" -type f -printf "%f\n" | sort > ${TMPDIR}/${ip}.local.dash.list
    nd=`diff ${TMPDIR}/${ip}.remote.dash.list ${TMPDIR}/${ip}.local.dash.list | grep ^\< | sed 's|^< ||'`
    if [ -n "$nd" ] ; then
      nd+=( "$nd" dash.html report.html )
      for dashfile in ${nd[*]} ; do
        $SCP -i "${rpath}/keys/${key}" -P $SSHPORT ${ip}:${mpath}/www/$monitor/localhost/$dashfile "${rpath}/www/$monitor/${clustered_as}/${servername}/" >/dev/null 2>&1 </dev/null &
      done
      [ -e "${rpath}/www/$monitor/${clustered_as}/${servername}/notfound" ] && rm -f "${rpath}/www/$monitor/${cluster}/${servername}/notfound"
      [ -e "${rpath}/www/$monitor/${clustered_as}/${servername}/stopped" ] && rm -f "${rpath}/www/$monitor/${cluster}/${servername}/stopped"
    else
      echo "No data received from server ${servername}, cluster ${cluster}" >> "${rpath}/monitoring.log"
      if [ -e "${rpath}/www/$monitor/${clustered_as}/${servername}/notfound" ] ; then
        rm -f "${rpath}/www/$monitor/${clustered_as}/${servername}/notfound"
        touch "${rpath}/www/$monitor/${clustered_as}/${servername}/stopped"
      else
        touch "${rpath}/www/$monitor/${clustered_as}/${servername}/notfound"
      fi
    fi
    for dashfile in `diff ${TMPDIR}/${ip}.remote.dash.list ${TMPDIR}/${ip}.local.dash.list | grep ^\> | sed 's|^> ||'` ; do
      rm -f "${rpath}/www/$monitor/${clustered_as}/${servername}/${dashfile}"
    done
    time1=`date +"%s"`
    timediff=`expr $time1 - $time0`
    if [ "X$SQLITE3" == "X1" ] ; then
      daynow=$(date +"%Y%m%d")
      $SQLITE "${rpath}/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '${clustered_as}/${servername}', '$timediff')"
    else
      echo "${clustered_as}/${servername}: $timediff sec" >> "${rpath}/dashboard.log"
    fi
  done
  for server in `find ${rpath}/www/$monitor/$clustered_as/* -maxdepth 0 -type d 2>/dev/null` ; do
    [ `cat "${rpath}/servers.list" | grep "|${clustered_as}[[:space:]]*$" | grep -c "|${server##*/}|"` -eq 0 ] && rm -rf "${rpath}/www/$monitor/$clustered_as/${server##*/}"
  done
done

# Clusters not present in clusters.conf are backuped to M_ROOT/mon.backups/dash
install -d "$rpath/mon.backups/dash/"
for cluster in `find "$rpath/www/$monitor/" -maxdepth 1 -type d` ; do
  cluster=${cluster##*/}
  if [ -n "$cluster" -a "$cluster" != "localhost" ]; then
    if [ `grep -c "^$cluster|" "$rpath/conf/clusters.conf"` -eq 0 ]; then
      cp -ru "$rpath/www/$monitor/$cluster" "$rpath/mon.backups/dash/"
      rm -rf "$rpath/www/$monitor/$cluster"
    fi
  fi
done

IFS=$IFS1

