#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/

[ -z "$SCP" ] && SCP=`which scp 2>/dev/null`
[ -z "$SCP" ] && echo "scp utility not found, exiting" && exit 1
[ -z "$SSH" ] && SSH=`which ssh 2>/dev/null`

source "$rpath/conf/mon.conf"
source "$rpath/lib/functions.sh"

SQLITE=dbquery

LOG="$rpath/logs/dashboard.log"
[ -n "$debug" ] && debug=true || debug=false
timeindexnow=`date +"%s"`

monitor="$1"
if [ -z "$monitor" ]; then
  monitor="nodes"
else
  shift
  if [ -n "$1" ]; then
    targetcluster="$1"
    shift
    clustered_as="$1"
  fi
fi

IFS1=$IFS ; IFS='
'

for cld in `cat "$rpath/nodes.list" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f6 | sort | uniq` ; do

  source "$rpath/conf/clouds/${cld}.conf"
  [ -z "$SSHPORT" ] && SSHPORT=22
  [ -z "$CONNECT_TIMEOUT" ] && CONNECT_TIMEOUT=10
  SSH_OPTS="-o StrictHostKeyChecking=yes -o PasswordAuthentication=no -o ConnectTimeout=$CONNECT_TIMEOUT"

  for cluster in `cat "$rpath/nodes.list" | grep -vE "^$|^#|^[[:space:]]*#" | grep "|${cld}$" | cut -d'|' -f5 | sort | uniq` ; do
    SSH_REMOTE_USER=`grep ^$cluster\| "$rpath/conf/clusters.conf" | cut -s -d'|' -f13`
    [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root"
    [ "_$cluster" == "_$SUPER_CLUSTER" ] && continue
    [ -n "$targetcluster" -a "$targetcluster" != "$cluster" ] && continue
    [ -z "$clustered_as" ] && clustered_as="$cluster"
    $debug && log "Getting dash files from cluster $cluster monitor $monitor clustered as $clustered_as"
    mpath=`grep ^$cluster\| "$rpath/conf/clusters.conf" | cut -d'|' -f8`
    [ -z "$mpath" ] && mpath="/opt/m"
    for node in `grep "|${cld}$" "$rpath/nodes.list" | grep "|$cluster|" | grep -vE "^$|^#|^[[:space:]]*#"` ; do
      [ -n "$RUNDELAY" ] && sleep $RUNDELAY
      time0=`date +"%s"`
      ip=${node%%|*}
      "$M_ROOT"/helpers/localips | grep -q "^$ip$" && continue
      key=`"$M_ROOT"/helpers/find_key node $ip` || continue
      nodename=`echo $node | cut -d'|' -f4`
      [ -d "$rpath/www/$monitor/$cld/$clustered_as/$nodename" ] || install -d "$rpath/www/$monitor/$cld/$clustered_as/$nodename"
      rdl=$(IFS=$IFS1 ; $SSH -i "$key" -p $SSHPORT $SSH_OPTS "$SSH_REMOTE_USER"@"$ip" find "$mpath/www/$monitor/localhost" -type f -printf \"%f\\n\" || echo $? | sort)
      if [ "_$rdl" == "_255" ]; then
        timeid=`date +"%m.%d_%H:%M:%S"`
        echo "<h3>`date`</h3>\n\n<div class=\"info info_w3\">Unable to get monitoring data! This node is either down or not accessible by SSH.</div>\n" > "$rpath/www/$monitor/$cld/$clustered_as/$nodename/${timeid}_${nodename}.html"
        echo "<div id=\"${timeid}_${nodename}\" title=\"${timeid}\" class=\"chunk w3\" onclick=\"showData('${timeid}_${nodename}','/nodes')\">&nbsp;<div id=\"data_${timeid}_${nodename}\" class=\"dhtmlmenu\" style=\"display: none\"></div></div>" >> "$rpath/www/$monitor/$cld/$clustered_as/$nodename/dash.list"
        sed -i '1d' "$rpath/www/$monitor/$cld/$clustered_as/$nodename/dash.list"
      elif [ "_$rdl" == "_1" ]; then
        echo "<div class=\"chunk empty\">&nbsp;</div>\n" >> "$rpath/www/$monitor/$cld/$clustered_as/$nodename/dash.list"
      else
        echo "$rdl" > "$M_TEMP/${ip}.${monitor}.remote.dash.list"
        find "$rpath/www/$monitor/$cld/$clustered_as/$nodename" -type f -printf "%f\n" | sort > "$M_TEMP/${ip}.${monitor}.local.dash.list"
        nd=(`diff "$M_TEMP/${ip}.${monitor}.remote.dash.list" "$M_TEMP/${ip}.${monitor}.local.dash.list" | grep ^\< | sed 's|^< ||'`)
        if [ -n "$nd" ] ; then
          nd+=( "dash.html" "report.html" )
          scplist="{`echo -n "${nd[*]}" | tr '\n' ','`}"
          (IFS=$IFS1 ; $SCP -i "$key" -P $SSHPORT $SSH_OPTS "$SSH_REMOTE_USER"@"$ip":"$mpath/www/$monitor/localhost/$scplist" "$rpath/www/$monitor/$cld/$clustered_as/$nodename/" > /dev/null 2>&1 </dev/null &)
          unset nd
          [ -e "$rpath/www/$monitor/$cld/$clustered_as/$nodename/notfound" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$nodename/notfound"
          [ -e "$rpath/www/$monitor/$cld/$clustered_as/$nodename/stopped" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$nodename/stopped"
        else
          log "No data received from node ${nodename}, cluster ${cluster}, monitor ${monitor}"
          if [ -e "$rpath/www/$monitor/$cld/$clustered_as/$nodename/notfound" ] ; then
            rm -f "$rpath/www/$monitor/$cld/$clustered_as/$nodename/notfound"
            touch "$rpath/www/$monitor/$cld/$clustered_as/$nodename/stopped"
          else
            if [ ! -e "$rpath/www/$monitor/$cld/$clustered_as/$nodename/stopped" ] ; then
              touch "$rpath/www/$monitor/$cld/$clustered_as/$nodename/notfound"
            fi
          fi
        fi
        for dashfile in `diff "$M_TEMP/${ip}.${monitor}.remote.dash.list" "$M_TEMP/${ip}.${monitor}.local.dash.list" | grep ^\> | sed 's|^> ||'` ; do
          [ -n "$dashfile" ] && rm -f "$rpath/www/$monitor/$cld/$clustered_as/$nodename/$dashfile"
        done
        time1=`date +"%s"`
        timediff=`expr $time1 - $time0`
        if [ "_$SQLITE3" == "_1" ] ; then
          daynow=$(date +"%Y%m%d")
          $SQLITE "$rpath/sysdata" "insert into selfmon (timeindex, day, monitor, duration) values ('$timeindexnow', '$daynow', '$clustered_as/$nodename', '$timediff')"
        else
          log "$clustered_as/${nodename}: $timediff sec"
        fi
      fi
    done
    for node in `find "$rpath/www/$monitor/$cld/$clustered_as/"* -maxdepth 0 -type d 2>/dev/null` ; do
      [ `cat "$rpath/nodes.list" | grep "|${cld}$" | grep "|$cluster|" | grep -c "|${node##*/}|"` -eq 0 ] && rm -rf "$rpath/www/$monitor/$cld/$clustered_as/${node##*/}"
    done
    unset clustered_as
  done

  [ -d "$rpath/mon.backups/dash/" ] || install -d "$rpath/mon.backups/dash/"
  for cluster in `find "$rpath/www/$monitor/$cld" -mindepth 1 -maxdepth 1 -type d` ; do
    cluster=${cluster##*/}
    [ -z "$cluster" ] && continue
    if [ "_$monitor" == "_nodes" ] ; then
      # Clusters not present in clusters.conf are backuped to M_ROOT/mon.backups/dash
      if [ -n "$cluster" -a "$cluster" != "localhost" ]; then
        if [ `grep -c "^$cluster|" "$rpath/conf/clusters.conf"` -eq 0 ]; then
          [ -d "$rpath/mon.backups/dash/$cld/" ] || install -d "$rpath/mon.backups/dash/$cld/"
          cp -ru "$rpath/www/$monitor/$cld/$cluster" "$rpath/mon.backups/dash/$cld/"
          rm -rf "$rpath/www/$monitor/$cld/$cluster"
        fi
      fi
      # Servers terminated or stopped
      for node in `find "$rpath/www/$monitor/$cld/$cluster" -mindepth 1 -maxdepth 1 -type d` ; do
        node=${node##*/}
        if [ `grep "|${cld}$" "$rpath/nodes.list" | grep -E -c "^$node\||\|$node\|" "$rpath/nodes.list"` -eq 0 ]; then
          cp -ru "$rpath/www/$monitor/$cld/$cluster/$node" "$rpath/mon.backups/dash/$cld/"
          rm -rf "$rpath/www/$monitor/$cld/$cluster/$node"
        fi
      done
    fi
  done

done

IFS=$IFS1

