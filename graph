#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

addxmarks() {
  marksX="$marksX`echo "<line x1=\\"$1\\" y1=\\"$mX1\\" x2=\\"$1\\" y2=\\"$mX2\\" />"`"
  textX="${textX}`echo "<text x=\\"$1\\" y=\\"$mXT1\\" >$2</text>"`"
}

addxlongmark() {
  coord="$1"
  shift
  marksX="$marksX`echo "<line x1=\\"$coord\\" y1=\\"$mXL\\" x2=\\"$coord\\" y2=\\"$startY\\" />"`"
  #textX="${textX}`echo "<text x=\\"$coord\\" y=\\"$mXLT\\" transform=\\"rotate(90,${coord},${mXLT})\\">$@</text>"`"
  textX="${textX}`echo "<text x=\\"$coord\\" y=\\"$mXLT\\" >$@</text>"`"
}

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath")
#*/

# to enable debug logging even without command-line option
debug=true

[ -n "$CLOUD" ] && source "$rpath/conf/clouds/${CLOUD}.conf"
[ -n "$SSHPORT" ] || SSHPORT=22

possible_options="metric help from to ip database table size width height scale padding legend fontsize strokewidth pointsize where as legendpos perpixel debug min fromfile"
necessary_options=""
source "$rpath/conf/mon.conf"
source "$rpath/conf/dash.conf"
source "$rpath/lib/functions.sh"

LOG="$rpath/logs/dashboard.log"

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && log "No ssh found" && exit 1

if [ -z "$freqdef" ]; then
  timeshift=`cat "$M_TEMP/timeshift" 2>/dev/null`
  [ -z "$timeshift" ] && timeshift=5
  freqdef=$(($FREQ + $timeshift))
fi
RSYNC=`which rsync 2>/dev/null`
SQL3=`which sqlite3 2>/dev/null` # assuming that remote path is the same

IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  [ "_$s_optarg" == "_no" ] && unset $s_optname
  
  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=false
for option in $necessary_options ; do
  [ -z "$(eval echo \$$option)" ] && missing_options="$missing_options --${option}," && found=true
done
if $found ; then
  echo "Necessary options: ${missing_options/%,/} not found"
  exit 1
fi

# "metric help from to ip new database table size width height scale padding legend fontsize strokewidth pointsize"
if [ "_$help" == "_yes" ] ; then
cat << "EOF"
Usage: ${0##*/} --metric=metric <other options>

Without --from a graph for the default period will be generated,
depending on the graph size and FREQ variable (see conf/dash.conf).
The --to option is ignored in this case.
With --from but without --to the latter defaults to the current time.

Options:

--ip=<IP>               IP address of the server to get data from.
                        Server must be present in nodes.list.
                        If empty, means localhost.
                    
--from=<date/time>      Time of the beginning of the graph in any format
                        acceptable by the 'date' utility.

--to=<date/time>        Graph end time in any format acceptable by the 'date'
                        utility.

--metric=<metric>       Metric = database field name.
                        Multiple metrics accepted, separated by comma, no spaces
                  
--database=<path/to/database>
                        path to database file, relative to M-Script root folder
                        The default is sysdata.
                    
--table=<table name>    The default is sysdata.

--fromfile={path/to/file}
                        Takes data from prepared file. Useful when complex
                        queries are required.
                        
--size=<small|thumbnail>
                        If not defined, it's the default big graph.

--min=<number|auto>     Minimal value for Y axis. 0 by default.
                        
--where=<field:value>   Additional WHERE clause for SQL query.
                        
--as=<name>             New name for metric. Especially useful if metric is an
                        ariphmetic expression like:
                        --metric="\"\(metric1+metric2\)\"" --as=MyMetric
                        With multiple metrics multiple --as can be used, just
                        list them in the same order, separated by comma.
                        
--perpixel              Renders one value per pixel along X-Axis, saves CPU
                        cycles.
                        
--legendpos=<left|below>

Graph format options:

  --width, --height, --padding, --legend,           These options can be used
  --fontsize, --strokewidth, --pointsize            to overwrites those from
                                                    conf/dash.conf.
  
  
EOF
  exit 0
fi
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  log "Necessary options: $missing_options not found"
  exit 1
fi

[ -z "$debug" ] && debug=false || debug=true
if [ -n "$fromfile" ]; then
  [ ! -e "$fromfile" ] && echo "File $fromfile not found!" && exit 1
  perpixel="yes"
  metric=`head -1 "$fromfile" | cut -sd'|' -f2- | tr '|' ','`
  metric="${metric%,}"
fi

localip=`"$rpath"/helpers/localips`
if [ -n "$ip" ] ; then
  if [ `echo "$localip" | grep -c "^$ip$"` -ne 0 ] ; then
    localip="yes"
  else
    unset localip
  fi
else
  localip="yes"
fi

M_TEMP="$M_TEMP"/dash
install -d "$M_TEMP"
install -d "$rpath/www/graphs"
declare -a colors
colors=( "#009900" "#000099" "#999900" "#660000" "#990099" "#009999" "#666600" "#44ff00" "#4400ff" "#00ff44" "#996644" "#994466" "#446699" "#449966" "#664499" "#669944" )

##################################
#### Definitions and defaults ####
##################################

[ -n "$padding" ] || padding=20
[ -n "$axis" ] || axis=40
[ -n "$legend" ] || legend=60
[ -n "$fontsize" ] || fontsize=10
[ -n "$strokewidth" ] || strokewidth=2
[ -n "$pointsize" ] || pointsize=12
[ -n "$width" ] && graphH=$width
[ -n "$height" ] && graphV=$height
[ -n "$graphH" ] && [ -n "$graphV" ] || (log "Define graph size in conf/dash.conf or as command-line options" && exit 1)
if [ "_$size" == "_small" ] ; then
  graphH=`expr $graphH / 2`
  graphV=`expr $graphV / 2`
  padding=`expr $padding / 2`
  axis=`expr $axis / 2`
  legend=`expr $legend / 2`
  fontsize=`expr $fontsize - 2`
  strokewidth=1
  pointsize=`expr $pointsize / 2`
fi
if [ "_$size" == "_thumbnail" ] ; then
  graphH=`expr $graphH / 4`
  graphV=`expr $graphV / 4`
  padding=`expr $padding / 4`
  axis=`expr $axis / 4`
  legend=`expr $legend / 4`
  fontsize=`expr $fontsize - 4`
  strokewidth=1
  pointsize=`expr $pointsize / 4`
fi
[ "_$min" == "_auto" ] && minauto=true || minauto=false
[ -z "$legendpos" ] && legendpos=left
[ "$legendpos" == "left" ] && legendH=$legend && legendV=0
[ "$legendpos" == "below" ] && legendH=0 && legendV=$legend
areaH=`expr $graphH - 2 \* $padding - $legendH - $axis`
areaV=`expr $graphV - 2 \* $padding - $legendV - $axis`

#####################
#### Time period ####
#####################

# perpixel option makes time period obsolete
if [ -z "$perpixel" ] ; then
  # the idea is to work entirely in UTC (timestamps in the db are UTC as well)
  # and only convert X axis marks to server local time
  if [ -n "$from" ] ; then
  # whatever you provide as --from, it is supposed to be UTC unless you provided
  # the time zone. In this latter case it will be converted to UTC.
    tfrom=`date -u -d "$from"`
    from=`date -u -d "$from" +"%s"`
    if [ -n "$to" ] ; then
      tto=`date -u -d "$to"`
      to=`date -u -d "$to" +"%s"`
    else
      to=`date +"%s"`
      tto=`date -u`
    fi
  else
    from=`date +"%s"` # this is always UTC
    from=`expr $from - $areaH \* $freqdef`
    tfrom=`date -u -d "1970/01/01 +$from sec"`
    to=`date +"%s"`
    tto=`date -u`
  fi
  title="Graph: $metric from $tfrom to $tto"
  #tlength=`expr length $title`
  log "Generating graph $metric from $tfrom to $tto"
else
  title="Graph: $metric"
  log "Generating graph ${metric}, last $areaH values"
  to=`date +"%s"`
  # from for perpixel mode will be calculated later
fi

##############################
#### Servers and clusters ####
##############################

if [ -z "$localip" ] ; then
  server=`grep "^${ip}|" "$rpath/nodes.list"|tail -1`
  if [ -z "$server" ] ; then
    # if it's name
    ipaddr=`cat "$rpath/nodes.list" | cut -d'|' -f1,4 | grep "|${ip}$" | cut -d'|' -f1`
    server=`grep "^${ipaddr}|" "$rpath/nodes.list"|tail -1`
    if [ -z "$server" ] ; then
      log "Server $ip not found in $rpath/nodes.list"
      exit 1
    fi
  fi
  sIP=`echo $server | cut -d'|' -f1`
  skey=`echo $server | cut -d'|' -f2`
  scluster=`echo $server | cut -d'|' -f5`
  mpath=`cat "$rpath/conf/clusters.conf"|grep "^${scluster}|"|tail -1|cut -d'|' -f8`
  [ -z "$mpath" ] && mpath=$M_ROOT
  [ -f "$rpath/keys/$skey" ] && thekey="-i $rpath/keys/$skey"
  [ -z "$thekey" -a -f "$rpath/keys/${skey}.pem" ] && thekey="-i $rpath/keys/${skey}.pem"
  [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER=`cat "$rpath/conf/clusters.conf"|grep "^${scluster}|"|tail -1|cut -s -d'|' -f13`
  [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root"
  $debug && log "fetching data from ${sIP}, cluster $scluster using key $skey"
else
  sIP="localhost"
  ip="localhost"
  $debug && log "reading data from localhost"
fi

###########################
#### Querying the data ####
###########################

[ -z "$database" ] && database="sysdata"
dbname=`echo "$database" | tr '/' '_'`
[ -z "$table" ] && table="sysdata" || dbname="${dbname}_${table}"
[ -n "$where" ] && dbname="${dbname}_`echo "$where" | tr -d \\ | tr -d \' | tr ':' '_' | tr ' ' '_' | tr '/' '_'`"
if [ -n "$as" ] ; then
  name=`echo "$as" | tr ',' '_' | tr ' ' '_'`
else 
  name=`echo $metric | tr ',' '_' | tr ' ' '_'`
fi

if [ -n "$perpixel" ]; then
  $debug && log "per pixel mode"
  perpixel=true
  pptail=" ORDER BY timeindex DESC LIMIT $areaH"
else
  perpixel=false
  pptail=" AND timeindex BETWEEN $from AND $to"
fi

###### Getting min and max values from database
if [ `expr $metric : .*,` -eq 0 ] ; then
  if [ -n "$as" ]; then
    $minauto && minQ="min($as)"
    maxQ="max($as)"
    select="SELECT $metric AS $as"
  else
    $minauto && minQ="min($metric)"
    maxQ="max($metric)"
    select="SELECT $metric"
  fi
  nonempty="${metric}<>''"
else
  if [ -n "$as" ]; then
    smetric=( `echo $metric | tr ',' ' '` )
    sas=( `echo $as | tr ',' ' '` )
    select="SELECT "
    for ((i=0; i<${#smetric[*]}; i++)); do
      [ -z "${sas[$i]}" ] && sas[$i]=${smetric[i]}
      $minauto && minQ="${minQ}min(${sas[$i]}),"
      maxQ="${maxQ}max(${sas[$i]}),"
      nonempty="${nonempty}${sas[$i]}<>'',"
      select="${select}${smetric[i]} AS ${sas[$i]},"
    done
    nonempty=`echo ${nonempty%,} | sed "s|,| and |g"`
    select="${select%,}"
  else
    for smetric in `echo $metric | tr ',' ' '`; do
      $minauto && minQ="${minQ}min($smetric),"
      maxQ="${maxQ}max($smetric),"
    done
    nonempty=`echo $metric | sed "s|,|\<\>'' and |g"`
    nonempty="${nonempty}<>''"
    select="SELECT $metric"
  fi
  $minauto && minQ="${minQ%,}"
  maxQ="${maxQ%,}"
fi

if [ -n "$where" ] ; then
  field=${where%%:*}
  value=${where#*:}
  $minauto && minQ="SELECT $minQ FROM ($select FROM $table WHERE $nonempty AND  $field='$value'$pptail)"
  maxQ="SELECT $maxQ FROM ($select FROM $table WHERE $nonempty AND $field='$value'$pptail)"
else
  $minauto && minQ="SELECT $minQ FROM ($select FROM $table WHERE ${nonempty}${pptail})"
  maxQ="SELECT $maxQ FROM ($select FROM $table WHERE ${nonempty}${pptail})"
fi
$debug && log "$maxQ"

if [ "$sIP" == "localhost" ]; then
  $minauto && minres=`$SQL3 "$rpath/$database" "$minQ"`
  maxres=`$SQL3 "$rpath/$database" "$maxQ"`
else
  minmax=`$SSH $thekey -p $SSHPORT "$SSH_REMOTE_USER"@"$sIP" "$SQL3 \"$mpath/$database\" \"$maxQ ; $minQ\""`
  maxres=`echo "$minmax" | head -1`
  $minauto && minres=`echo "$minmax" | tail -1`
fi
[ -z "$maxres" ] && log "Was unable to find the maximum, exiting" && exit 1

if $minauto ; then
  # required for the case of multiple metrics
  metricminfp=$(echo $minres | tr '|' '\n' | while read N ; do [ -z "$Nmin" ] && Nmin=$N ; [ `solve 2 "$N < $Nmin"` -eq 1 ] && Nmin=$N ; echo $Nmin; done | tail -1) ; metricmin=${metricminfp%.*}
  log "metricmin: $metricmin"
else
  metricminfp=0
  metricmin=0
fi
metricmaxfp=$(echo $maxres | tr '|' '\n' | while read N ; do [ -z "$Nmax" ] && Nmax=$N ; [ `solve 2 "$N > $Nmax"` -eq 1 ] && Nmax=$N ; echo $Nmax; done | tail -1) ; metricmax=${metricmaxfp%.*} ; metricmax=`expr $metricmax + 1`
$debug && log "metricmaxfp: $metricmaxfp  metricmax: $metricmax"
orderm=`expr ${#metricmax} / 3`
unset Nmin Nmax
if [ -z "$metricminfp" -o -z "$metricmaxfp" ] ; then
  log "Error getting minimum and maximum values for $metric"
  exit 1
fi
[ -z "$metricmin" ] && metricmin=0
[ -z "$metricmax" ] && metricmax=$areaV
mp=`solve 2 "$areaV / ($metricmax - $metricmin)"`

$debug && log "mp: $mp"

if [ `solve 2 "$mp > 0"` -eq 0 ] ; then
  for ((i=1; i<=$orderm; i++)); do
    [ `solve 2 "$mp > 0"` -eq 0 ] && mp=`echo "scale=($i * 3); $areaV / ($metricmax - $metricmin)" | bc`
    $debug && log "$i : mp=$mp"
  done
fi

mpl=${mp%%.*}
[ -z "$mpl" ] && mpl=0
if [[ $mpl -eq 0 ]]; then
  ll=${mp##*.}
  ll=`expr $ll : 0*`
  mpl="-$ll"
else
  mpl=${#mpl}
  ll=0
fi
mpl=`expr $mpl - 2`
d=`echo "scale=$ll+2; 10 ^ $mpl" | bc`
log "d=$d"
bs=`echo "$mp / $d" | bc`
if [ `expr $bs \< 20` -eq 1 ]; then
  mpr=10
elif [ `expr $bs \< 50` -eq 1 ]; then
  mpr=20
elif [ `expr $bs \< 100` -eq 1 ]; then
  mpr=50
else
  mpr=100
fi
mp=`echo "$mpr * $d" | bc`
$debug && log "mp: $mp"
metricmax=`solve 2 "$areaV / $mp"`
metricmax=${metricmax%%.*}
metricmax=`expr $metricmin + $metricmax`
$debug && log "min value: $metricmin  max value: $metricmax  vertical size: $areaV  coeff: $mp"

if ! $perpixel ; then
  metricQ="timeindex,"
fi

if [ `expr $metric : .*,` -eq 0 ] ; then
  if [ -n "$as" ]; then
    metricQ="${metricQ}(${metric}-($metricmin))*${mp} AS $as"
  else
    metricQ="${metricQ}(${metric}-($metricmin))*${mp}"
  fi
else
  if [ -n "$as" ]; then
    smetric=( `echo $metric | tr ',' ' '` )
    sas=( `echo $as | tr ',' ' '` )
    for ((i=0; i<${#smetric[*]}; i++)); do
      [ -z "${sas[$i]}" ] && sas[$i]=${smetric[i]}
      metricQ="${metricQ}(${smetric[i]}-($metricmin))*${mp} AS ${sas[$i]},"
    done
  else
    for smetric in `echo $metric | tr ',' ' '`; do
      metricQ="${metricQ}(${smetric}-($metricmin))*${mp},"
    done
  fi
  metricQ="${metricQ%,}"
fi
selectQ="SELECT $metricQ"

if [ -n "$where" ] ; then
  QUERY="$selectQ FROM $table WHERE $field='$value'${pptail}"
  $perpixel && QUERYFROM="SELECT timeindex FROM $table WHERE $field='$value'${pptail}"
else
  if ! $perpixel; then
    pptail=" WHERE timeindex BETWEEN $from AND $to"
  else
    QUERYFROM="SELECT timeindex FROM ${table}${pptail}"
  fi
  QUERY="$selectQ FROM ${table}${pptail}"
fi
$debug && log "$QUERY"
if [ "$sIP" == "localhost" ]; then
  $SQL3 "$rpath/$database" "$QUERY" > "$M_TEMP/graph.${sIP}.${dbname}.${name}"
  $perpixel && from=`$SQL3 "$rpath/$database" "$QUERYFROM" | tail -1`
else
  $debug && log "$SSH $thekey -p $SSHPORT "$SSH_REMOTE_USER"@"$sIP" $SQL3 \"${mpath}/$database\" \"${QUERY}\""
  $SSH $thekey -p $SSHPORT "$SSH_REMOTE_USER"@"$sIP" "$SQL3 \"$mpath/$database\" \"$QUERY\"" > $M_TEMP/graph.${sIP}.${dbname}.${name}
  $perpixel && from=`$SSH $thekey -p $SSHPORT "$SSH_REMOTE_USER"@"$sIP" "$SQL3 \"$mpath/$database\" \"$QUERYFROM\"" \| tail -1`
fi
log "from: $from  to: $to"
if [ `cat "$M_TEMP/graph.${sIP}.${dbname}.${name}" | wc -l` -le 5 ] ; then
  log "Too little data for graph or connection to $sIP problem. Graph is not generated."
  exit 1
fi
sn=`echo $metric | tr ',' ' ' | wc -w`

#####################################
#### Graph geometry calculations ####
#####################################

# comfortable distance between marks: 20 to 40 pixels
# these numbers are not final, just a base for further calculations
countminX=20
countminY=20

# needed for both perpixel and non-perpixel modes
perdotY=`expr 100 \* \( $metricmax - $metricmin \) / $areaV`
[ $perdotY -eq 0 ] && perdotY=1
perdotX=`expr \( $to - $from \) / $areaH`
[ $perdotX -eq 0 ] && perdotX=1

# How many pixels one hour takes
hourX=`expr 3600 / $perdotX`
[[ $hourX -lt 1 ]] && hourX=1
# Variable looping across all X marks
currpoint=$from
# Various coordinates
# 0:0 coordinate
startX=`expr $legendH + $padding + $axis`
startY=`expr $graphV - $legendV - $padding - $axis`
# Vertical grid lines
mX1=`expr $startY + 5`
mXT1=`expr $mX1 + 14`
mX2=$padding
mXL=`expr $startY + 18`
mXLT=`expr $startY + 32`
# Horisontal grid lines
mY1=`expr $startX - 5`
mYT1=`expr $mY1 - 5`
mY2=`expr $graphH - $padding`
# Axis names coordinates
axisXX=`expr $graphH - $padding - 60`
axisXY=`expr $graphV - $legendV - $axis + 20`
axisYX=$padding
axisYY=$padding

#titleX=`expr \( $graphH - $tlength \) / 2`
titleX=`expr $padding + $legendH + 20`
titleY=`expr $graphV - \( $padding / 2 \)`

########  Here begins the X-Axis marks definition part

if [[ $hourX -lt $countminX ]] ; then
  # 1-hour marks would be too close to each other
  # How many hours are within 40 pixels
  hourN=`expr 2 \* $countminX / $hourX`
  # If it's more than 24 hours, try days instead:
  if [[ $hourN -ge 24 ]] ; then
    #echo "Trying days"
    # How many pixels 1 day takes
    dayX=`expr 86400 / $perdotX`
    [[ $dayX -lt 1 ]] && dayX=1
    if [[ $dayX -lt $countminX ]] ; then
      # How many days are within 40 pixels
      dayN=`expr 2 \* $countminX / $dayX`
      # If it's more than 30 days, use months instead:
      if [[ $dayN -ge 30 ]] ; then
        # How many pixels are there in one month
        monthX=`expr 2592000 / $perdotX`
        [[ $monthX -lt 1 ]] && monthX=1
        if [[ $monthX -lt $countminX ]] ; then
        # Resolution should be this many months
          res=`expr 2 \* $countminX / $monthX`
        else
          res=1
        fi
        axisX="months"
        # Finding the next month beginning
        while [[ $currpoint -lt $to ]]
        do
          currpoint=`date -u -d "1970/01/01 +$currpoint sec +$res month" +"%s"`
          themonth=`date -u -d "1970/01/01 +$currpoint sec" +"%m"`
          theyear=`date -u -d "1970/01/01 +$currpoint sec" +"%Y"`
          themark=`date -u -d "$theyear/$themonth/1" +"%s"`
          themark=`expr \( $themark - $from \) / $perdotX + $startX`
          [[ $themark -gt $mY2 ]] && break
          textmark=`date -u -d "1970/01/01 +$currpoint sec"`
          textmark=`date -d "$textmark" +"%m"`
          addxmarks ${themark}.5 $textmark
        done
        unset nextmonth res monthX
      else
        #echo "Using days"
        axisX="days"
        [[ $dayN -eq 0 ]] && dayN=1  # just in case
        while [[ $currpoint -lt $to ]]
        do
          currpoint=`date -u -d "1970/01/01 +$currpoint sec +$dayN day" +"%s"`
          theday=`date -u -d "1970/01/01 +$currpoint sec" +"%d"`
          themonth=`date -u -d "1970/01/01 +$currpoint sec" +"%m"`
          theyear=`date -u -d "1970/01/01 +$currpoint sec" +"%Y"`
          themark=`date -u -d "${theyear}/${themonth}/${theday} 00:00" +"%s"`
          themark=`expr \( $themark - $from \) / $perdotX + $startX`
          [[ $themark -gt $mY2 ]] && break
          textmark=`date -u -d "1970/01/01 +$currpoint sec"`
          textmark=`date -d "$textmark" +"%d"`
          addxmarks ${themark}.5 $textmark
        done
        unset nextday
      fi
    else
      dayN=1
      axisX="days"
      while [[ $currpoint -lt $to ]]
      do
        currpoint=`date -u -d "1970/01/01 +$currpoint sec +$dayN day" +"%s"`
        theday=`date -u -d "1970/01/01 +$currpoint sec" +"%d"`
        themonth=`date -u -d "1970/01/01 +$currpoint sec" +"%m"`
        theyear=`date -u -d "1970/01/01 +$currpoint sec" +"%Y"`
        themark=`date -u -d "${theyear}/${themonth}/${theday} 00:00" +"%s"`
        themark=`expr \( $themark - $from \) / $perdotX + $startX`
        [[ $themark -gt $mY2 ]] && break
        textmark=`date -u -d "1970/01/01 +$currpoint sec"`
        textmark=`date -d "$textmark" +"%d"`
        addxmarks ${themark}.5 $textmark
      done
    fi
    unset dayN
  else
    axisX="hours"
    [[ $hourN -eq 0 ]] && hourN=1
    while [[ $currpoint -lt $to ]]
    do
      currpoint=`date -u -d "1970/01/01 +$currpoint sec +$hourN hour" +"%s"`
      currpointsec=`date -u -d "1970/01/01 +$currpoint sec"`
      thehour=`date -u -d "$currpointsec" +"%H"`
      theday=`date -u -d "$currpointsec" +"%d"`
      if [ "_$theday" != "_$thedayprev" ]; then
        if [ -n "$thedayprev" ]; then
          daymark=`date -u -d "$currpointsec -$thehour hour" +"%s"`
          daymark=`expr \( $daymark - $from \) / $perdotX + $startX`
        fi
        thedayprev=$theday
      fi
      themonth=`date -u -d "$currpointsec" +"%m"`
      longmonth=`date -u -d "$currpointsec" +"%b"`
      theyear=`date -u -d "$currpointsec" +"%Y"`
      themark=`date -u -d "$theyear/$themonth/$theday ${thehour}:00" +"%s"`
      themark=`expr \( $themark - $from \) / $perdotX + $startX`
      [[ $themark -gt $mY2 ]] && break
      textmark=`date -u -d "1970/01/01 +$currpoint sec"`
      textmark=`date -d "$textmark" +"%H"`
      addxmarks ${themark}.5 $textmark
      daytextmark="$longmonth $theday"
      [ -n "$daymark" ] && addxlongmark $daymark $daytextmark
    done
  fi
  unset hourN
else
# So 1-hour marks are far enough from each other, and it is the maximal
# resolution possible. It's the same as the previous loop actually, but
# I leave it here to possibly add more resolution like e.g. 10 minutes
  axisX="hours"
  while [[ $currpoint -lt $to ]]
  do
    currpoint=`date -u -d "1970/01/01 +$currpoint sec +$hourN hour" +"%s"`
    currpointsec=`date -u -d "1970/01/01 +$currpoint sec"`
    thehour=`date -u -d "$currpointsec" +"%H"`
    theday=`date -u -d "$currpointsec" +"%d"`
    if [ "_$theday" != "_$thedayprev" ]; then
      if [ -n "$thedayprev" ]; then
        daymark=`date -u -d "$currpointsec -$thehour hour" +"%s"`
        daymark=`expr \( $daymark - $from \) / $perdotX + $startX`
      fi
      thedayprev=$theday
    fi
    themonth=`date -u -d "$currpointsec" +"%m"`
    longmonth=`date -u -d "$currpointsec" +"%b"`
    theyear=`date -u -d "$currpointsec" +"%Y"`
    themark=`date -u -d "$theyear/$themonth/$theday ${thehour}:00" +"%s"`
    themark=`expr \( $themark - $from \) / $perdotX + $startX`
    [[ $themark -gt $mY2 ]] && break
    textmark=`date -u -d "1970/01/01 +$currpoint sec"`
    textmark=`date -d "$textmark" +"%H"`
    addxmarks ${themark}.5 $textmark
    daytextmark="$longmonth $theday"
    [ -n "$daymark" ] && addxlongmark $daymark $daytextmark
  done
fi

unset nexthour theday themonth theyear themark currpoint hourX

########  Here ends the X-Axis marks definition part

########  Now for Y
### Finding out what per mark resolution might be
# a and b represent the range (preliminary, just a comfortable suggestion)
a=`solve 2 "$perdotY * $countminY / 100"`
b=`solve 2 "2 * $a"`
# the order of magnitude of b
s=`expr length ${b%%.*}`
[ -z "$s" ] && s=1
pof=1
for ((i=0; i<$s; i++)); do pof="${pof}0"; done
log "a=$a b=$b s=$s pof=$pof"
# checking how it fits, for predefined orders (we want them nice, e.g. 2, 5, 10)
res=`expr $pof / 10`
log "/10 :: res=$res"
if [[ $res -lt ${a%%.*} ]] ; then
  res=`expr $pof / 5`
log "/5 :: res=$res"
  if [[ $res -lt ${a%%.*} ]] ; then
    res=`expr $pof / 4`
log "/4 :: res=$res"
    if [[ $res -lt ${a%%.*} ]] ; then
      res=`expr $pof / 2`
log "/2 :: res=$res"
    fi
  fi
fi
$debug && log "Y-Axis per-mark resolution is $res"

################
### Drawing ####
################

declare -i i
declare -i imark
# where the Y axis zero is
if $minauto ; then
  if [ $metricmin -lt 0 ]; then
    imark=`expr $metricmin / $res \* $res - $res`
  else
    imark=`expr $metricmin / $res \* $res`
  fi
  log "imark=$imark"
  # how much above the axis zero the minimum value is in SVG coordinates
  shiftY=`echo "($metricmin - ($imark)) * $mp" | bc 2>/dev/null`
  shiftY=${shiftY%.*}
  [ -z "$shiftY" ] && shiftY=0
  log "shiftY=$shiftY"
else
  imark=0
  shiftY=0
fi
ires=`echo "$mp * $res" | bc`
ires=${ires%.*}
log "ires: $mp * $res = $ires"
# if ires is not integer, it will cause a catastrophe below
expr $ires : ".*[^0-9]" >/dev/null && log "ERROR: ires value is not integer! Exiting.." && exit 1
i=`expr $legendV + $padding + $axis`
log "i: $legendV + $padding + $axis = $i"
imax=`expr $i + $areaV`
log "imax: $i + $areaV = $imax"

while true
do
  i+=$ires
  imark+=$res
  
  [[ $i -gt $imax ]] && break
  # Freeing some room for axis Y title
  [[ `expr $i + $ires` -gt $imax ]] && unset imark imarkfp
  irev=`expr $graphV - $i`
  marksY="$marksY`echo "<line x1=\\"$mY1\\" y1=\\"${irev}.5\\" x2=\\"$mY2\\" y2=\\"${irev}.5\\" />"`"
  if [ "_$scale" != "_yes" ] ; then
    textY="${textY}`echo "<text x=\\"$mYT1\\" y=\\"$irev\\" style=\\"text-anchor: end\\">$imark</text>"`"
  fi
done
log "marks generated"

cat "$rpath/wwwtemplates/graph.head.svg.tmpl" > "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"$graphH\" height=\"$graphV\">" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"

# Axis
echo -e "<g id=\"axis\">\n<path id=\"y\" style=\"fill:none;stroke:#000;stroke-width:$strokewidth\" d=\"M\n ${startX},$startY ${startX},$mX2\" /><path id=\"x\" style=\"fill:none;stroke:#000;stroke-width:$strokewidth\" d=\"M $startX,$startY $mY2,$startY\" /></g>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"

# Marks
echo -e "<g id=\"marks\" shape-rendering=\"geometricPrecision\" style=\"fill:none;stroke:#999;stroke-width:1;\">\n${marksX}\n${marksY}\n</g>\n<g id=\"marks_text\" text-rendering=\"optimizeSpeed\" font-family=\"Verdana\" font-size=\"$fontsize\" fill=\"#666\">$textX" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
[ "_$scale" == "_yes" ] || echo $textY >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "<text font-family=\"Verdana\" font-size=\"$fontsize\" fill=\"#666\" x=\"$axisXX\" y=\"$axisXY\">$axisX</text>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
[ "_$scale" == "_yes" ] || echo "<text x=\"$axisYX\" y=\"$axisYY\" font-family=\"Verdana\" font-size=\"$fontsize\" fill=\"#666\">$axisY</text>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "</g>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"

# Graphs
i=0
if [ "$legendpos" == "left" ]; then
  slegendX=`solve 2 "$startX - $legend"`
  slegendY=$startY
  sadd=`expr \( $graphV - $padding \) / $sn`
else
  slegendX=$padding
  slegendY=$axisXY
  sadd=`expr 2 \* $fontsize`
fi
log "slegendX=$slegendX  slegendY=$slegendY  sadd=$sadd"

echo "<g id=\"graph\" shape-rendering=\"geometricPrecision\">" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"

# first column is the X axis, data starts from the column 2
declare -i n
$perpixel && n=1 || n=2

declare -i smid ; smid=0
for smetric in `echo $metric | tr ',' ' '` ; do
  if [ -n "$as" ]; then
    slegendtext="$(IFS=',' ; asarr=( `echo "$as"` ) ; echo "${asarr[$smid]}")"
  else
    slegendtext="$smetric"
  fi
  smid+=1
  slegend="${slegend}`echo "<text font-family=\\"Verdana\\" font-size=\\"${fontsize}\\" fill=\\"${colors[$i]}\\" x=\\"$slegendX\\" y=\\"$slegendY\\" >$slegendtext</text>"`"
log "slegend=$slegend"
  
  if [ "$legendpos" == "left" ]; then
    slegendY=`expr $slegendY - $sadd`
  else
    slegendY=`expr $slegendY + $sadd`
  fi
log "slegendY=$slegendY"

  echo -n "<path id=\"graph_${smetric}\" style=\"fill:none;stroke:${colors[$i]};stroke-width:${strokewidth}\" d=\"M" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
  if ! $perpixel; then  
    cat "$M_TEMP/graph.${sIP}.${dbname}.${name}" | cut -d'|' -f1,${n} | while read LINE
    do
      X=`echo $LINE | cut -d'|' -f1`
      # shiftY is Y value of X axis
      # shiftYY is the shift of SVG coordinates due to shift of X axis
      shiftYY=`expr $areaV + $padding - $shiftY`
      Y=`echo $LINE | cut -d'|' -f2` ; Y=${Y%.*}
      if [ -z "$X" ] ; then continue ; fi
      X=`expr \( $X - $from \) / $perdotX + $padding + $legendH + $axis`
      [ -z "$Y" ] && Y=$Yp || Yp=$Y
      [ -z "$Y" ] && Y=0
      Y=`expr $shiftYY - $Y`
      echo -n " $X,$Y" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
    done
#### drawing perpixel graph
  else
    declare -i X
    X=`expr $padding + $legendH + $axis`
    shiftYY=`expr $areaV + $padding - $shiftY`
    tac "$M_TEMP/graph.${sIP}.${dbname}.${name}" | cut -d'|' -f${n} | while read LINE
    do
      Y=${LINE%.*}
      [ -z "$Y" ] && Y=$Yp || Yp=$Y
      [ -z "$Y" ] && Y=0
      X+=1
      Y=`expr $shiftYY - $Y`
      echo -n " $X,$Y" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
    done
  fi
  echo "\" />" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
  i+=1
  n+=1
done

echo "</g>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "<g id=\"legend\" text-rendering=\"optimizeSpeed\">" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "$slegend" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "</g>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"
echo "</svg>" >> "$rpath/www/graphs/${ip}.${dbname}.${name}.svg"

#convert -size ${graphH}x${graphV} xc:white -family $fontfamily -pointsize $fontsize \
#  -strokewidth $strokewidth \
#  -draw "stroke black line $startX,$startY $mY2,$startY" \
#  -draw "stroke black line $startX,$startY $startX,$mX2" \
#  -strokewidth 1 \
#  -draw "stroke gray $marksX " -draw "stroke gray $marksY " \
#  -draw "$textY " -draw "$textX " \
#  -draw "${datalines}" \
#  -draw "text $axisXX,$axisXY `printf "\'$axisX\'"`" \
#  -draw "text $axisYX,$axisYY `printf "\'$metric\'"`" \
#  -pointsize $pointsize \
#  -draw "text $titleX,$titleY `printf "\'$title\'"`" \
#  "${rpath}/www/graphs/${sIP}.${dbname}${name}.png"






