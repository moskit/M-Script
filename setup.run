#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/ (this is needed to fool vi syntax highlighting)

# Checking dependencies

BC=`which bc 2>/dev/null`
IPTABLES=`which iptables 2>/dev/null`
MAILX=`which mail 2>/dev/null`
SQLITE=`which sqlite3 2>/dev/null`
S3CMD=`which s3cmd 2>/dev/null`
MONGOOSE=`which mongoose 2>/dev/null`

if [ -f /etc/debian_version ]; then OS="debian"; fi
if [ -f /etc/gentoo-release ]; then OS="gentoo"; fi
if [ -f /etc/redhat-release ]; then OS="redhat"; fi

if [ "X${BC}" == "X" ]
then
  echo
  echo "BC not found. It IS necessary, please install it first."
  echo "It is kind of shell calculator, and it is impossible to provide any results"
  echo "without it."
  echo
  read -p "Do you want me to install it now?  [y/N] " installbc
  if [ `echo $installbc | grep -c -i "^y"` -ne 0 ]
  then
    case $OS in
    debian)
      `which apt-get` install bc
      ;;
    gentoo)
      `which emerge` bc
      ;;
    redhat)
      [ "X`which yum`" == "X" ] || `which yum` install bc
      ;;
    *)
      echo
      echo "Unable to determine operating system, sorry.. PLease install BC manually."
      exit 1
      ;;
    esac
    [[ $? -ne 0 ]] && exit 1
  else
    exit 1
  fi
fi

if [ "X${MAILX}" == "X" ]
then
  echo
  echo "Mailx not found. It IS necessary, please install it first."
  echo "You can also install any alternative, which has similar syntax and "
  echo "provides the 'mail' command."
  echo
  read -p "Do you want me to install it now?  [y/N] " installmailx
  if [ `echo $installmailx | grep -c -i "^y"` -ne 0 ]
  then
    case $OS in
    debian)
      `which apt-get` install mailx
      [[ $? -eq 100 ]] && `which apt-get` install bsd-mailx
      ;;
    gentoo)
      `which emerge` mailx
      ;;
    redhat)
      [ "X`which yum`" == "X" ] || `which yum` install mailx
      ;;
    *)
      echo
      echo "Unable to determine operating system, sorry.. PLease install Mailx manually."
      exit 1
      ;;
    esac
    [[ $? -ne 0 ]] && exit 1
  else
    exit 1
  fi
fi

if [ "X${MONGOOSE}" == "X" ]
then
  echo
  echo "Mongoose not found. You need it only in case if you want web interface"
  echo "here on this server "
  echo
  read -p "Do you want me to install it now?  [y/N] " installmongoose
  if [ `echo $installmongoose | grep -c -i "^y"` -ne 0 ]
  then
    (mkdir tmp && cd tmp && ${rpath}/helpers/fetch igorsimonov.com/mongoose.tgz && tar xzf mongoose.tgz && cd mongoose && make linux && cp mongoose ${rpath}/www/)
    if [[ $? -ne 0 ]] ; then
      echo
      echo "Some error.. disabling it for awhile. Compile it or install some other way and copy its binary to ${rpath}/www/ if you need it"
      sed -i -e "s|MONGOOSE=.*|MONGOOSE=0|g" ${rpath}/mon.conf
    else
      if [ `grep -c "^MONGOOSE=" ${rpath}/mon.conf` -ne 0 ]
      then
        sed -i -e "s|MONGOOSE=.*|MONGOOSE=1|g" ${rpath}/mon.conf
      else    
        echo "MONGOOSE=1" >> ${rpath}/mon.conf
      fi
    fi
  fi
else
  if [ `grep -c "^MONGOOSE=" ${rpath}/mon.conf` -ne 0 ]
  then
    sed -i -e "s|MONGOOSE=.*|MONGOOSE=1|g" ${rpath}/mon.conf
  else    
    echo "MONGOOSE=1" >> ${rpath}/mon.conf
  fi
fi

if [ `grep -c "^MONGOOSE=1" ${rpath}/mon.conf` -ne 0 ]
then
  if [ `grep -c "^p " ${rpath}/conf/mongoose.conf` -eq 0 ]
  then
    echo
    read -p "Enter a port number for the web interface: [8080] " mongooseport
    echo "p $mongooseport" >> ${rpath}/conf/mongoose.conf
  fi
  if [ `grep -c "^d " ${rpath}/conf/mongoose.conf` -eq 0 ]
  then
    echo "d no" >> ${rpath}/conf/mongoose.conf
  fi
  if [ `grep -c "^g " ${rpath}/conf/mongoose.conf` -eq 0 ]
  then
    echo "g ${rpath}/conf/htaccess" >> ${rpath}/conf/mongoose.conf
  fi
  if [ `grep -c "^r " ${rpath}/conf/mongoose.conf` -eq 0 ]
  then
    echo "r ${rpath}/www" >> ${rpath}/conf/mongoose.conf
  fi
  echo
  echo "You may want to adjust access settings for the web interface."
  echo "To do this, read http://code.google.com/p/mongoose/wiki/MongooseManual"
  echo "and edit ${rpath}/conf/mongoose.conf"
fi
      
if [ "X${IPTABLES}" == "X" ]
then
  echo
  echo "Iptables not found. It is not necessary, but useful to provide an average"
  echo "bandwidth usage report. If you need it, install iptables and run setup.run again"
  echo
  read -p "Do you want to proceed without iptables? [y/N] " noiptables
  if [ `echo $noiptables | grep -c -i "^y"` -ne 0 ]
  then
    if [ `grep -c "^IPTABLES=" ${rpath}/mon.conf` -ne 0 ]
    then
      sed -i -e "s|IPTABLES=.*|IPTABLES=0|g" ${rpath}/mon.conf
    else    
      echo "IPTABLES=0" >> ${rpath}/mon.conf
    fi
  else
    exit 1
  fi
else
  if [ `grep -c "^IPTABLES=" ${rpath}/mon.conf` -ne 0 ]
  then
    sed -i -e "s|IPTABLES=.*|IPTABLES=1|g" ${rpath}/mon.conf
  else    
    echo "IPTABLES=1" >> ${rpath}/mon.conf
  fi
fi

if [ "X${S3CMD}" == "X" ]
then
  echo
  echo "s3cmd not found. It is needed only if you are going to use Amazon S3 service"
  echo "for backups. If you need it, install and configure s3cmd and run setup.run again"
  echo
  read -p "Do you want to proceed without s3cmd? [y/N] " nos3
  if [ `echo $nos3 | grep -c -i "^y"` -eq 0 ]
  then
    exit 1
  fi
fi

if [ "X${SQLITE}" == "X" ]
then
  echo
  echo "SQLite3 is not found. It is not necessary, but without it many features like"
  echo "log analysis and performance analysis will be unavailable."
  read -p "Do you want to proceed without SQLite3? [y/N] " nosqlite
  if [ `echo $nosqlite | grep -c -i "^y"` -ne 0 ]
  then
    if [ `grep -c "^SQLITE3=" ${rpath}/mon.conf` -ne 0 ]
    then
      sed -i -e "s|SQLITE3=.*|SQLITE3=0|g" ${rpath}/mon.conf
    else    
      echo "SQLITE3=0" >> ${rpath}/mon.conf
    fi
  else
    echo
    read -p "Do you want me to install it now?  [y/N] " installsqlite
    if [ `echo $installsqlite | grep -c -i "^y"` -ne 0 ]
    then
      case $OS in
      debian)
        `which apt-get` install sqlite3
        ;;
      gentoo)
        `which emerge` sqlite
        ;;
      redhat)
        [ "X`which yum`" == "X" ] || `which yum` install sqlite
        ;;
      *)
        echo
        echo "Unable to determine operating system, sorry.. PLease install SQLite3 manually."
        exit 1
        ;;
      esac
      [[ $? -ne 0 ]] && exit 1
    else
      exit 1
    fi
  fi
  if [ `grep -c "^SQLITE3=" ${rpath}/mon.conf` -ne 0 ]
  then
    sed -i -e "s|SQLITE3=.*|SQLITE3=1|g" ${rpath}/mon.conf
  else    
    echo "SQLITE3=1" >> ${rpath}/mon.conf
  fi
  SQLITE=`which sqlite3 2>/dev/null`
  $SQLITE ${xpath}sysdata 'create table sysdata(timeindex integer primary key, day varchar(8), totalram real, freeram real, activeram real, totalswap real, freeswap real, uptime varchar(20), loadavg real, procnum smallint, diskusage real, diskiord real, diskiowr real, cpuusage real, cputemp real, cpufscale real, connections smallint, input real, output real, bwidthin real, bwidthout real)'
  $SQLITE ${xpath}sysdata 'create table rootfolders(timeindex integer, foldername varchar(64), foldersize real)'
else
  if [ `grep -c "^SQLITE3=" ${rpath}/mon.conf` -ne 0 ]
  then
    sed -i -e "s|SQLITE3=.*|SQLITE3=1|g" ${rpath}/mon.conf
  else    
    echo "SQLITE3=1" >> ${rpath}/mon.conf
  fi
  $SQLITE ${xpath}sysdata 'create table sysdata(timeindex integer primary key, day varchar(8), totalram real, freeram real, activeram real, totalswap real, freeswap real, uptime varchar(20), loadavg real, procnum smallint, diskusage real, diskiord real, diskiowr real, cpuusage real, cputemp real, cpufscale real, connections smallint, input real, output real, bwidthin real, bwidthout real)'
  $SQLITE ${xpath}sysdata 'create table rootfolders(timeindex integer, foldername varchar(64), foldersize real)'
fi

chmod 755 ${rpath}/*.run ${rpath}/*.sh
chmod 600 ${rpath}/backup.conf

${rpath}/fixports.run
[ -d /etc/init.d ] && rcdir=/etc/init.d
[ -d /etc/rc.d/init.d ] && rcdir=/etc/rc.d/init.d
[ "X$rcdir" == "X" ] || ln -s $(cd ${rpath} && pwd)/monitorload.run $rcdir/monitorload
echo
echo "Default email address for reports and alerts is root@localhost. You can change"
echo "it now or leave it for later. In the latter case just press Enter"
echo
read -p "What email address to send reports and alerts to? " email
echo $email > ${rpath}/mail.alert.list
echo $email > ${rpath}/mail.admin.list
echo $email > ${rpath}/mail.backup.list
echo
read -p "Do you want to setup the load monitoring daemon to start up at boot automatically? [y/N] " bootmon
if [ `echo $bootmon | grep -c -i "^y"` -ne 0 ]
then
  [ -d /etc/rc3.d ] && ln -s /etc/init.d/monitorload /etc/rc3.d/S99monitorload
  [ -d /etc/rc4.d ] && ln -s /etc/init.d/monitorload /etc/rc4.d/S99monitorload
  [ -d /etc/rc5.d ] && ln -s /etc/init.d/monitorload /etc/rc5.d/S99monitorload
  [ -d /etc/rc0.d ] && ln -s /etc/init.d/monitorload /etc/rc0.d/K01monitorload
  [ -d /etc/rc6.d ] && ln -s /etc/init.d/monitorload /etc/rc6.d/K01monitorload
  echo "If you want to start the load monitoring daemon now, run:"
  echo "$rcdir/monitorload start"
else
  echo "If you want to start the load monitoring daemon now, run:"
  echo "$rpath/monitorload.sh start"
fi



