#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${BASH_SOURCE##*/}
rpath=${rpath%/*}
#*/ (this is needed to fool vi syntax highlighting)

[ "X$1" == "Xdefault" ] && defopt=1
[ "X$1" == "Xuninstall" ] && defopt=2
[ "X$1" == "Xreinit" ] && defopt=3

# Checking dependencies

BC=`which bc 2>/dev/null`
IPTABLES=`which iptables 2>/dev/null`
MAILX=`which mail 2>/dev/null`
SQLITE=`which sqlite3 2>/dev/null`
S3CMD=`which s3cmd 2>/dev/null`
MONGOOSE=`which mongoose 2>/dev/null`
SED=`which sed 2>/dev/null`
NETSTAT=`which netstat 2>/dev/null`

createdb() {
  $SQLITE "$rpath/sysdata" 'create table sysdata(timeindex integer primary key, day varchar(8), totalram real, freeram real, activeram real, totalswap real, freeswap real, uptime integer, loadavg real, procnum smallint, diskusage real, diskiord real, diskiowr real, cpuusage real, cputemp real, cpufscale real, connections smallint, input real, output real, bwidthin real, bwidthout real); create table rootfolders(timeindex integer, foldername varchar(64), foldersize real); create table selfmon(timeindex integer, day varchar(8), monitor varchar(64), duration integer); create index tisys on sysdata (timeindex); create index tirf on rootfolders (timeindex); create index tiself on selfmon (timeindex)'
}

if [ -f /etc/debian_version ]; then OS="debian"; fi
if [ -f /etc/gentoo-release ]; then OS="gentoo"; fi
if [ -f /etc/redhat-release ]; then OS="redhat"; fi

if [ -z "$defopt" ] ; then
  echo -e "*** If during the setup process you choose to allow the script to install ***\n*** suggested packages and it fails to install them for whatever reason,  ***\n*** it doesn't cause any problems at all, just run the script again       ***\n*** (you may also want to install failed packages manually before this)   ***\n"
fi

if [ -z "$SED" ]; then
  echo -e "\nSed not found. It is necessary, please install it first.\n"
  exit 1
fi

if [ -z "$NETSTAT" ]; then
  echo -e "\nNetstat not found. It is necessary, please install it first.\n"
  exit 1
fi

if [ -z "$BC" ]; then
  if [ -z "$defopt" ] ; then
    echo -e "\nBC not found. It is necessary, please install it first.\n"
    read -p "Do you want me to install it now?  [y/N] " installbc
  else
    installbc="y"
  fi
  if `echo $installbc | grep -qi "^y"` ; then
    case $OS in
    debian)
      export DEBIAN_FRONTEND=noninteractive
      `which apt-get` install bc -y
      ;;
    gentoo)
      `which emerge` bc
      ;;
    redhat)
      [ "X`which yum`" == "X" ] || `which yum` install bc -y
      ;;
    *)
      echo
      echo "Unable to determine operating system, sorry.. PLease install BC manually."
      exit 1
      ;;
    esac
  else
    exit 1
  fi
fi

if [ -z "$MAILX" ]; then
  if [ -z "$defopt" ] ; then
    echo -e "\n  Mailx not found. It is necessary, if you want traditional email functionality\n  for reports and alerts (see conf/mon.conf).\n"
    read -p "Do you want me to install it now?  [y/N] " installmailx
  else
    installmailx="y"
  fi
  if `echo $installmailx | grep -qi "^y"` ; then
    case $OS in
    debian)
      export DEBIAN_FRONTEND=noninteractive
      `which apt-get` install mailx
      [ $? -eq 100 ] && `which apt-get` install bsd-mailx -y
      [ $? -ne 0 ] && exit 0
      ;;
    gentoo)
      `which emerge` mailx || exit 1
      ;;
    redhat)
      `which yum` install mailx -y || exit 1
      ;;
    *)
      echo
      echo "Unable to determine operating system, sorry.. PLease install Mailx manually."
      exit 1
      ;;
    esac
  else
    exit 1
  fi
fi

if [ -z "$MONGOOSE" ]; then
  [ -x "$rpath/mongoose" ] && MONGOOSE="$rpath/mongoose"
fi
if [ -z "$MONGOOSE" ]; then
  if [ -z "$defopt" ] ; then
    echo -e "\n  Mongoose not found or not in PATH. You need it only in case you want\n  web interface here on this server\n"
    read -p "Do you want me to install it now?  [y/N] " installmongoose
  else
    installmongoose="N"
  fi
  if `echo $installmongoose | grep -qi "^y"` ; then
    rm -rf "$rpath/mongoose-source" 2>/dev/null
    (mkdir "$rpath/mongoose-source" && cd "$rpath/mongoose-source" && ../helpers/fetch igorsimonov.com/mongoose.tgz && tar xzf mongoose.tgz && cd mongoose && make linux && cp mongoose "$rpath/")
    if [ $? -ne 0 ]; then
      echo -e "\nUnable to compile, disabling it for now. Compile it or install some other way and copy its binary to $rpath/ if you need it"
      sed -i "s|MONGOOSE=.*|MONGOOSE=0|g" "$rpath/conf/mon.conf"
    else
      if `grep -q "^MONGOOSE=" "$rpath/conf/mon.conf"` ; then
        sed -i "s|MONGOOSE=.*|MONGOOSE=1|g" "$rpath/conf/mon.conf"
      else    
        echo "MONGOOSE=1" >> "$rpath/conf/mon.conf"
      fi
    fi
  fi
else
  if `grep -q "^MONGOOSE=" "$rpath/conf/mon.conf"` ; then
    sed -i "s|MONGOOSE=.*|MONGOOSE=1|g" "$rpath/conf/mon.conf"
  else    
    echo "MONGOOSE=1" >> "$rpath/conf/mon.conf"
  fi
fi

if `grep -q "^MONGOOSE=1" "$rpath/conf/mon.conf"` ; then
  if [ `grep -c "^p " "$rpath/conf/mongoose.conf"` -eq 0 ]
  then
    echo
    read -p "Enter a port number for the web interface: [8989] " mongooseport
    [ -n "$mongooseport" ] || mongooseport=8989
    echo "p $mongooseport" >> "$rpath/conf/mongoose.conf"
  fi
  if [ `grep -c "^d " $rpath/conf/mongoose.conf` -eq 0 ]
  then
    echo "d no" >> "$rpath/conf/mongoose.conf"
  fi
  if [ `grep -c "^g " "$rpath/conf/mongoose.conf"` -eq 0 ]
  then
    echo "g $rpath/conf/htaccess" >> "$rpath/conf/mongoose.conf"
  fi
  if [ `grep -c "^r " "$rpath/conf/mongoose.conf"` -eq 0 ] ; then
    echo "r $rpath/www" >> "$rpath/conf/mongoose.conf"
  fi
  echo
  echo "You may want to adjust access settings for the web interface."
  echo "To do this, read http://code.google.com/p/mongoose/wiki/MongooseManual"
  echo "and edit $rpath/conf/mongoose.conf"
fi
      
if [ -z "$IPTABLES" ]; then
  if [ -z "$defopt" ] ; then
    echo -e "\nIptables not found. It is not necessary, but useful to provide an average\nbandwidth usage report. If you need it, install iptables and run setup.run again\n"
    read -p "Do you want to proceed without iptables? [y/N] " noiptables
  else
    noiptables="y"
  fi
  if `echo $noiptables | grep -qi "^y"` ; then
    if `grep -q "^IPTABLES=" "$rpath/conf/mon.conf"` ; then
      sed -i "s|IPTABLES=.*|IPTABLES=0|g" "$rpath/conf/mon.conf"
    else    
      echo "IPTABLES=0" >> "$rpath/conf/mon.conf"
    fi
  else
    exit 1
  fi
else
  if `grep -q "^IPTABLES=" $rpath/conf/mon.conf` ; then
    sed -i "s|IPTABLES=.*|IPTABLES=1|g" "$rpath/conf/mon.conf"
  else    
    echo "IPTABLES=1" >> "$rpath/conf/mon.conf"
  fi
fi

if [ -z "$S3CMD" ]; then
  if [ -z "$defopt" ]; then
    echo -e "\ns3cmd not found. It is needed only if you are going to use Amazon S3 service\nfor backups.\n"
    read -p "Do you want to proceed without s3cmd? [Y/n] " nos3
  else
    nos3="y"
  fi
  if `echo $nos3 | grep -qi "^n"` ; then
    case $OS in
    debian)
      export DEBIAN_FRONTEND=noninteractive
      `which apt-get` install s3cmd -y || exit 1
      ;;
    gentoo)
      `which emerge` s3cmd || exit 1
      ;;
    redhat)
      `which yum` install s3cmd -y || exit 1
      ;;
    *)
      echo -e "\nUnable to determine operating system, sorry.. PLease install SQLite3 manually."
      exit 1
      ;;
    esac
  fi
fi

if [ -z "$SQLITE" ]; then
  if [ -z "$defopt" ] ; then
    echo -e "\nSQLite3 is not found. It is not necessary, but without it many features like\nlog analysis and performance analysis will be unavailable.\n"
    read -p "Do you want to proceed without SQLite3? [y/N] " nosqlite
  else
    nosqlite=N
  fi
  if `echo $nosqlite | grep -qi "^y"` ; then
    if [ `grep -c "^SQLITE3=" "$rpath/conf/mon.conf"` ]
    then
      sed -i "s|SQLITE3=.*|SQLITE3=0|g" "$rpath/conf/mon.conf"
    else    
      echo "SQLITE3=0" >> "$rpath/conf/mon.conf"
    fi
  else
    if [ -z "$defopt" ] ; then
      echo
      read -p "Do you want me to install it now?  [Y/n] " installsqlite
    else
      installsqlite="y"
    fi
    if `echo $installsqlite | grep -qi "^y"` ; then
      case $OS in
      debian)
        export DEBIAN_FRONTEND=noninteractive
        `which apt-get` install sqlite3 -y || exit 1
        ;;
      gentoo)
        `which emerge` sqlite || exit 1
        ;;
      redhat)
        `which yum` install sqlite -y || exit 1
        ;;
      *)
        echo -e "\nUnable to determine operating system, sorry.. PLease install SQLite3 manually."
        exit 1
        ;;
      esac
    else
      exit 1
    fi

    if `grep -q "^SQLITE3=" "$rpath/conf/mon.conf"` ; then
      sed -i "s|SQLITE3=.*|SQLITE3=1|g" "$rpath/conf/mon.conf"
    else    
      echo "SQLITE3=1" >> "$rpath/conf/mon.conf"
    fi
  fi
  SQLITE=`which sqlite3 2>/dev/null`
  createdb
else
  if `grep -q "^SQLITE3=" "$rpath/conf/mon.conf"` ; then
    sed -i "s|SQLITE3=.*|SQLITE3=1|g" "$rpath/conf/mon.conf"
  else    
    echo "SQLITE3=1" >> "$rpath/conf/mon.conf"
  fi
  createdb
fi

chmod 755 "$rpath/"*.run "$rpath/"*.sh
chmod 600 "$rpath/conf/backup.conf"
chown -R root:root "$rpath"
install -d "$rpath/standalone/rc"
install -m 700 -d "$rpath/keys"
install -d "$rpath/logs" "$rpath/deployment/roles"
echo -e "$rpath/fixports.run\n/etc/init.d/monitorload start" >> "$rpath/conf/actions.allowed.list"
"$rpath"/helpers/init_rc
"$rpath"/fixports.run
[ -f "$rpath/.msh.env" ] || cat > "$rpath/.msh.env" << "EOF"
# makes MSH history written separately
HISTFILE=$HOME/.bash_history
# sets terminal title
PROMPT_COMMAND='echo -ne "\033]0;msh@${HOSTNAME}\007"'
EOF

echo -e "Adjusting some thresholds for your system...    "
cpun=`find /sys/class/cpuid -name cpu[0-9] 2>/dev/null | wc -l`
[[ $cpun -eq 0 ]] && cpun=`cat /proc/cpuinfo | grep '^processor[[:space:]]' | wc -l`
if [[ $cpun -ne 0 ]] ; then
  l1=`echo "scale=1;$cpun / 2" | bc`
  l2=$cpun
  l3=`echo "scale=1;$cpun * 2" | bc`
  lcrit=`echo "scale=1;$cpun * 10" | bc`
  sed -i "s|LOAD_WARN_1=.*|LOAD_WARN_1=$l1|" "$rpath/tests/mem.conf"
  sed -i "s|LOAD_WARN_2=.*|LOAD_WARN_2=$l2|" "$rpath/tests/mem.conf"
  sed -i "s|LOAD_WARN_3=.*|LOAD_WARN_3=$l3|" "$rpath/tests/mem.conf"
  sed -i "s|LOAD_CRIT=.*|LOAD_CRIT=$lcrit|" "$rpath/conf/mon.conf"
fi
procn=`ps axo pid | grep -vE "^USER|grep|ps" | wc -l`
p1=`expr $procn \* 2`
p2=`expr $procn \* 3`
p3=`expr $procn \* 4`
sed -i "s|NPROC_1=.*|NPROC_1=$p1|" "$rpath/tests/mem.conf"
sed -i "s|NPROC_2=.*|NPROC_2=$p2|" "$rpath/tests/mem.conf"
sed -i "s|NPROC_3=.*|NPROC_3=$p3|" "$rpath/tests/mem.conf"
memtotal=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
memvirt=`cat /proc/meminfo | grep CommitLimit | awk '{print $2}'`
mvperc1=`expr $memvirt \* 100 / $memtotal / 2 2>/dev/null`
[ $? -ne 0 ] && mvperc1=1000
mvperc2=`expr $mvperc1 \* 3 / 2 2>/dev/null`
[ $? -ne 0 ] && mvperc2=1500
mvperc2=`expr $mvperc1 \* 2 2>/dev/null`
[ $? -ne 0 ] && mvperc3=2000
if [ -f "$rpath/tests/memory_eaters.conf" ]; then
  sed -i "s|MEM_VIR_1=.*|MEM_VIR_1=$mvperc1|" "$rpath/tests/memory_eaters.conf"
  sed -i "s|MEM_VIR_2=.*|MEM_VIR_2=$mvperc2|" "$rpath/tests/memory_eaters.conf"
  sed -i "s|MEM_VIR_3=.*|MEM_VIR_3=$mvperc3|" "$rpath/tests/memory_eaters.conf"
fi
echo "done"
[ -d /etc/init.d ] && rcdir=/etc/init.d
[ -d /etc/rc.d/init.d ] && rcdir=/etc/rc.d/init.d
[ "X$rcdir" == "X" ] || ln -s "$rpath/monitorload.run" $rcdir/monitorload 2>/dev/null
if [ -z "$defopt" ] ; then
  echo -e "\nDefault email address for reports and alerts is root@localhost. You can change it now or leave it for later. In the latter case just press Enter\n\n"
  read -p "What email address to send reports and alerts to? " email
  echo $email > "$rpath/conf/mail.alert.list"
  echo $email > "$rpath/conf/mail.admin.list"
  echo $email > "$rpath/conf/mail.backup.list"
  echo
  read -p "Do you want load monitoring service to start up at boot automatically? [y/N] " bootmon
else
  bootmon="y"
fi
if `echo $bootmon | grep -qi "^y"` ; then
if [ -n "`which insserv 2>/dev/null`" ] ; then
  `which insserv` monitorload
else
  case $OS in
  debian)
    `which update-rc.d` monitorload enable
    ;;
  gentoo)
    `which rc-update` add monitorload default
    ;;
  redhat)
    `which chkconfig` monitorload on
    ;;
  *)
  [ -d /etc/rc3.d ] && ln -s $rcdir/monitorload /etc/rc3.d/S99monitorload
  [ -d /etc/rc4.d ] && ln -s $rcdir/monitorload /etc/rc4.d/S99monitorload
  [ -d /etc/rc5.d ] && ln -s $rcdir/monitorload /etc/rc5.d/S99monitorload
  [ -d /etc/rc0.d ] && ln -s $rcdir/monitorload /etc/rc0.d/K01monitorload
  [ -d /etc/rc6.d ] && ln -s $rcdir/monitorload /etc/rc6.d/K01monitorload
  if [ -z "$defopt" ] ; then
    echo "If you want to start the load monitoring daemon now, run:"
    echo "$rcdir/monitorload start"
  else
    $rcdir/monitorload start
  fi
  ;;
  esac
fi
else
  echo "If you want to start the load monitoring daemon now, run:"
  echo "$rpath/monitorload.run start"
fi

echo -e "\nYou may want to use M-Shell (just execute $rpath/msh).\nIt is just a convenience subshell that doesn't restrict you from using your shell as usual but adds paths and sets all necessary environment variables.\nCheck/edit $rpath/.msh.env to adjust its look and feel\n"


#rsync ifconfig

