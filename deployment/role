#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -m "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

possible_commands="help list clone create edit"
possible_subcommands="list:metas,scripts,files edit:meta,script,file"
possible_options="role cluster flavor"

printcol() {
  if [ -n "$1" ] ; then
    l=${#1}
    echo -n "$1"
    for ((i=0; i<$(($col-$l)); i++)) ; do
      echo -n " "
    done
  else
    for ((i=0; i<$col; i++)) ; do
      echo -n " "
    done
  fi
}

declare -i ppn
ppn=1

commfound=false
subcommfound=false

IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=false
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes'
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    case $ppn in
      1)
        for comm in ${possible_commands// /--}; do
          if [ "X$s_param" == "X$comm" ]; then
            if $commfound ; then
              echo "Only one command can be executed!"
              echo "Commands are: ${possible_commands}"
              exit 1
            else
              found=true
              commfound=true
            fi
          fi
        done
        if ! $found ; then 
          echo "Unknown command: $s_param"
          exit 1
        fi
        command1=$s_param
        ;;
      2)
        for subcomm in ${possible_subcommands// /--}; do
          [ "X${subcomm%%:*}" == "X$command1" ] && subcommands=${subcomm#*:}
          for sub in ${subcommands//,/--}; do
            if [ "X$s_param" == "X$sub" ]; then
              if $subcommfound ; then
                echo "Only one subcommand can be executed!"
                echo "Subcommands for $command1 are: ${subcommands}"
                exit 1
              else
                found=true
                subcommfound=true
              fi
            fi
          done
        done
        if ! $found ; then 
          param1=$s_param
        else
          command2=$s_param
        fi
        ;;
      3)
        if [ -z "$param1" ] ; then
          param1=$s_param
        else
          param2=$s_param
        fi
        ;;
      4)
        if [ -z "$param2" ] ; then
          param2=$s_param
        else
          echo "Wrong number of positional parameters!"
          exit 1
        fi
        ;;
      *)
        echo "Wrong number of positional parameters!"
        exit 1
        ;;
    esac
    shift
    ppn+=1
    ;;
  esac
done

IFS='
'
case $command1 in
  list)
    case $command2 in
      metas)
        [ -z "$param1" ] && param1="$role"
        col=29
        printcol "Meta"
        printcol "Scripts"
        echo "Includes"
        for m in `ls -1 "$ROLES_ROOT/$param1" | grep ^meta\. | sed 's|^meta.||'` ; do
          ml=`cat "$ROLES_ROOT/$param1/meta.$m" | grep -v ^$ | grep -v ^# | grep -v ^[[:space:]]#`
          sn=`echo "$ml" | wc -l`
          in=`echo "$ml" | awk '{print $2}' | cut -d'/' -f1 | sort | uniq | grep -v '^${role}$' | grep -v '^$role$' | grep -v "^$param1$"`
          if [ -z "$in" ] ; then
            printcol "$m"
            echo "$sn"
          else
            for ins in $in ; do
              printcol "$m"
              printcol "$sn"
              echo "$ins"
              unset m sn
            done
          fi
        done
      ;;
      scripts)
        [ -z "$param1" ] && param1="$role"
        col=50
        printcol "Script"
        echo "Meta"
        for sc in `find "$ROLES_ROOT/$param1"/*/ -maxdepth 1 -type f` ; do
          for m in `ls -1 "$ROLES_ROOT/$param1" | grep ^meta\.` ; do
            [ `grep -c "${sc##*/}$" "$ROLES_ROOT/$param1/$m"` -gt 0 ] && mi="$mi ${m#meta.}"
          done
          for mis in $mi ; do
            printcol "${sc##*/}"
            echo "$mis"
            unset sc
          done
          unset mi
        done
      ;;
      files)
        [ -z "$param1" ] && param1="$role"
        col=50
        printcol "File"
        echo "Script"
        for fl in `find "$ROLES_ROOT/$param1"/*/files/ -maxdepth 1 -type f` ; do
          for sc in `find "$ROLES_ROOT/$param1"/*/ -maxdepth 1 -type f` ; do
            [ -n "`grep -E "deploy_file|cloudsync|cp|scp" "${sc}" | grep "${fl##*/}"`" ] && sci="$sci ${sc##*/}"
          done
          for scis in $sci ; do
            printcol "${fl##*/}"
            echo "$scis"
            unset fl
          done
          unset sci
        done
      ;;
      *)
        col=20
        printcol "Role"
        printcol "Cluster"
        printcol "Flavor"
        echo "Image"
        for r in `find $ROLES_ROOT/ -maxdepth 1 -type d` ; do
          r=${r##*/}
          for cl in `cat $M_ROOT/conf/clusters.conf | cut -d'|' -f1,10 | grep \|${r}$ | cut -d'|' -f1` ; do
            printcol "${r}"
            printcol "${cl}"
            ln=`cat "$M_ROOT/conf/clusters.conf" | grep "^$cl"`
            fl=`echo "$ln" | cut -d'|' -f11`
            printcol "${fl}"
            im=`echo "$ln" | cut -d'|' -f6`
            echo "$im"
            unset r
          done
          [ -n "$r" ] && echo "$r"
        done
      ;;
    esac
    ;;
  clone)
    [ -z "$param1" -o -z "$param2" ] && echo "Usage: role clone SOURCE TARGET" && exit 1
    [ ! -d "$ROLES_ROOT/$param1" ] && echo "Role $param1 not found" && exit 1
    [ ! -d "$ROLES_ROOT/$param2" ] && echo "Role $param2 exists" && exit 1
    for dir in `find "$ROLES_ROOT/$param1/" -type d` ; do
      newdir=`echo "$dir" | sed "s|^$ROLES_ROOT/$param1/||"`
      install -d  "$ROLES_ROOT/$param2/$newdir"
    done
    for sl in `find "$ROLES_ROOT/$param1/" -type l` ; do
      f=`readlink -m $sl`
      [ -f "$f" ] && ln -s "$f" "$ROLES_ROOT/$param2/`echo "$sl" | sed "s|$ROLES_ROOT/$param1/||"`"
    done
    for f in `find "$ROLES_ROOT/$param1/" -type f` ; do
      ln -s "$f" "$ROLES_ROOT/$param2/`echo "$sl" | sed "s|$ROLES_ROOT/$param1/||"`"
    done
    for rcl in `cat "$ROLES_ROOT/$param1/"role.conf` ; do
      echo "$rcl" | sed 's|=|=  #|' >> "$ROLES_ROOT/$param2/"role.conf
    done
    ;;
  create)
    declare -a flarr
    [ -z "$param1" ] echo "Usage: role create NAME" && exit 1
    for fl in `find "$ROLES_ROOT/"*/ -maxdepth 1 -type d | sed "s|^$ROLES_ROOT/||" | cut -d '/' -f2 | sort | uniq | grep -v ^$` ; do
      flarr+=( "$fl" )
    done
    echo "Choose existing system flavors from the list and/or add new ones. Existing flavors can be added by their numbers."
    echo "Example: 2,4,5,centos6    - will add existing flavors with numbers 2, 4 and 5 and create a new one named centos6"
    echo "To have all listed flavors in the new role just press Enter"
    echo
    for ((i=0; i<${#flarr[*]}; i++)) ; do
      echo "$((i+1)). ${flarr[$i]}"
    done
    echo
    read -p "Input roles, separated by comma: " roleslist
    if [ -z "$roleslist" ] ; then
      for fl in ${flarr[*]} ; do
        install -d "$ROLES_ROOT/$param1/$fl"
      done
    else
      for r in `echo -e "$roleslist" | sed 's|,|\n|g'` ; do
        if [[ $r =~ [0-9]* ]]; then
          install -d "$ROLES_ROOT/$param1/${flarr[$r]}"
        else
          install -d "$ROLES_ROOT/$param1/$r"
        fi
      done
    fi
    ;;
  edit)
    [ -z "$param1" ] echo "Usage: role edit meta|script|file NAME" && exit 1
    [ -n "$VISUAL" ] && ED=$VISUAL
    [ -z "$ED" -a -n "$EDITOR" ] && ED=$EDITOR
    [ -z "$ED" ] && echo "Using vim as text editor. Set VISUAL or EDITOR environment variable to another editor if you like" && ED=`which vim 2>/dev/null`
    [ -z "$ED" ] && echo "Editor not found" && exit 1
    case $command2 in
      meta)
        $ED "$ROLES_ROOT/$role/meta.$param1"
        ;;
      script)
        $ED "$ROLES_ROOT/$role/$flavor/$param1"
        ;;
      file)
        $ED "$ROLES_ROOT/$role/$flavor/files/$param1"
        ;;
      *)
        echo "Usage: role edit meta|script|file NAME"
        ;;
    esac
    ;;
  help)
    
    ;;
  *)
  
    ;;
esac

IFS=$IFS1
