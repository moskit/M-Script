#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -m "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

possible_commands="help list clone"
possible_subcommands="list:metas,scripts,files"

[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
declare -i ppn
ppn=1

commfound=false
subcommfound=false

IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=false
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes'
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    case $ppn in
      1)
        for comm in ${possible_commands// /--}; do
          if [ "X$s_param" == "X$comm" ]; then
            if $commfound ; then
              echo "Only one command can be executed!"
              echo "Commands are: ${possible_commands}"
              exit 1
            else
              found=true
              commfound=true
            fi
          fi
        done
        if ! $found ; then 
          echo "Unknown command: $s_param"
          exit 1
        fi
        command1=$s_param
        ;;
      2)
        for subcomm in ${possible_subcommands// /--}; do
          [ "X${subcomm%%:*}" == "X$command1" ] && subcommands=${subcomm#*:}
          for sub in ${subcommands//,/--}; do
            if [ "X$s_param" == "X$sub" ]; then
              if $subcommfound ; then
                echo "Only one subcommand can be executed!"
                echo "Subcommands for $command1 are: ${subcommands}"
                exit 1
              else
                found=true
                subcommfound=true
              fi
            fi
          done
        done
        if ! $found ; then 
          param1=$s_param
        else
          command2=$s_param
        fi
        ;;
      3)
        if [ -z "$param1" ] ; then
          param1=$s_param
        else
          param2=$s_param
        fi
        ;;
      4)
        if [ -z "$param2" ] ; then
          param2=$s_param
        else
          echo "Wrong number of positional parameters!"
          exit 1
        fi
        ;;
      *)
        echo "Wrong number of positional parameters!"
        exit 1
        ;;
    esac
    shift
    ppn+=1
    ;;
  esac
done
IFS=$IFS1

case $command1 in
  list)
    case $command2 in
      metas)
      
      ;;
      scripts)
      
      ;;
      files)
      
      ;;
      *)
        echo -e "Role\t\tCluster\t\tFlavor\t\tImage"
        for r in $ROLES_ROOT/* ; do
          echo -n -e "$r\t\t"
          for cl in `cat $M_ROOT/conf/clusters.conf | cut -d'|' -f10,1,11,6 | grep ^$r\|` ; do
            echo -e "$cl" | cut -d'|' -f2,3,4 | tr '|' '\t\t'
          done
        done
      ;;
    esac
    ;;
  clone)
  
    ;;
  help)
    
    ;;
  *)
  
    ;;
esac


