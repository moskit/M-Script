#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

run_meta() {
  [ `grep -c "^${1}$" "${WORK_DIR}/${role}.${task}.${timestamp}/log"` -ne 0 ] && echo "Skipping: $1" >> "${rpath}/../deploy.log" && exit 0
  if [ -n "$test" -o -n "$dry" ] ; then
    [ -n "$use_color" ] && printf "\033[01;36mMETA: \033[00;36m$1\033[00;39m" || printf "META: $1"
    metatype=`echo $1 | awk '{print $1}'`
    metascript=`echo $1 | awk '{print $2}'`
    metascript=`eval "echo $metascript"`
    if [ -n "$verbose" ] ; then
      printf "\n  type: $metatype  script: $metascript\n"
      V='--verbose'
    fi
    if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
      deploy.run --type=$metatype --file=$metascript --ip=$ip --key="$KEY" --cluster="$cluster" --role="$role" --flavor="$flavor" --timestamp=$timestamp --task="$task" --dry $V
      res=$?
      if [ -n "$verbose" ] ; then
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "\033[01;32mSuccess\033[00;39m\n" || printf "\033[01;31mError\033[00;39m\n"
        else
          [ $res -eq 0 ] && echo "Success" || echo "ERROR"
        fi
      else
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "  ..  \033[01;32mSuccess\033[00;39m\n" || printf "  ..  \033[01;31mError\033[00;39m\n"
        else
          [ $res -eq 0 ] && echo "  ..  Success" || echo "  ..  ERROR"
        fi
      fi
      [ -n "$verbose" ] && echo
    else
      echo "Error parsing the meta: $meta"
    fi
  else
    [ -n "$use_color" ] && printf "\033[01;36mMETA: \033[00;36m$1\033[00;39m" || printf "META: $1"
    metatype=`echo $1 | awk '{print $1}'`
    metascript=`echo $1 | awk '{print $2}'`
    metascript=`eval "echo $metascript"`
    if [ -n "$verbose" ] ; then
      printf "\n  type: $metatype  script: $metascript\n"
      V='--verbose'
    fi
    if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
      deploy.run --type=$metatype --file=$metascript --ip=$ip --key="$KEY" --cluster="$cluster" --role="$role" --flavor="$flavor" --timestamp=$timestamp --task="$task" $V
      res=$?
      if [ -n "$verbose" ] ; then
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "\033[01;32mSuccess\033[00;39m\n" || printf "\033[01;31mError\033[00;39m\n"
        else
          [ $res -eq 0 ] && echo "Success" || echo "ERROR"
        fi
      else
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "  ..  \033[01;32mSuccess\033[00;39m\n" || printf "  ..  \033[01;31mError\033[00;39m\n"
        else
          [ $res -eq 0 ] && echo "  ..  Success" || echo "  ..  ERROR"
        fi
      fi
      [ -n "$verbose" ] && echo
    else
      echo "Error parsing the meta: $meta"
    fi
  fi
}

SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
possible_options="help verbose flavor ip cloud run cluster task role timestamp test dry command output"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /--/g'`; do 
    [ -n "$s_optname" ] && [ "X$s_optname" == "X$option" ] && eval "$option=\"${s_optarg}\"" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"
  echo "  --command  variables should be escaped"
  exit 0
fi
if [ -n "$task" -a -n "$command" ] ; then
  echo "Both command and task can't be executed"
  exit 1
fi
if [ -n "$ip" ] ; then
  if [[ $ip =~ [^[0-9.]]* ]] ; then
    echo "Something's wrong with IP: $ip"
    exit 1
  fi
  ipcluster=`grep "^$ip|" "${rpath}/../servers.list" | cut -d'|' -f5`
  if [ -n "$cluster" ] ; then
    [ "$cluster" != "$ipcluster" ] && echo "Cluster found for this IP is ${ipcluster}, but cluster provided as an option is $cluster" && exit 1
  else
    cluster=$ipcluster
  fi
fi
if [ -z "$ip" ] && [ -n "$cloud" ] ; then
  ip=`"${rpath}/cloud/${cloud}/start_server --cluster=${cluster} --return=ip"`
fi
if [ -z "$cloud" -a -z "$ip" -a -z "$cluster" ] ; then
  echo "One of ip, cloud or cluster must be defined"
  exit 1
fi
if [ -z "$role" ] ; then
  role=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f10`
  [ -z "$role" ] && echo "Unable to find the role for this cluster/server" && exit 1
fi
if [ -z "$flavor" ] ; then
  flavor=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f11`
  [ -z "$flavor" ] && echo "Unable to find the flavor for this cluster/server OS" && exit 1
fi
# Default output is console, colored if colors are supported
if [ -z "$output" ] ; then
# Thanks to Gentoo guys for this part, I couldn't do better
  safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
  match_lhs=""
  [[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
  [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
  [[ -z ${match_lhs}    ]] \
	  && type -P dircolors >/dev/null \
	  && match_lhs=$(dircolors --print-database)
  [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true
fi

source "${rpath}/../conf/deployment.conf"
M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud:${M_ROOT}/cloud/ec2:${M_ROOT}/helpers:${PATH}

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"

if [ `echo $ip | grep -c "$localip"` -eq 0 ] ; then
  KEY=`grep "^${cluster}|" "${rpath}/../conf/clusters.conf" | cut -d'|' -f2`
  [ -z "$KEY" ] && echo "Either cluster ${cluster} or its key not found in ${rpath}/../conf/clusters.conf" && exit 1
  [ -z "$SSH" ] && echo "SSH client not found!" && exit 1
  [ -f "${rpath}/../keys/${KEY}" ] || KEY=${KEY}.pem
  [ -f "${rpath}/../keys/${KEY}" ] || (echo "Key $KEY not found" ; exit 1)
  #SSH="$SSH -i \"${rpath}/../keys/${KEY}\" -o StrictHostKeyChecking=no"
  #$SSH -i "${rpath}/../keys/${KEY}" -o StrictHostKeyChecking=no $ip pwd >/dev/null || (echo "Unable to connect to $ip" ; exit 1)
  [ -z "$SCP" ] && echo "SCP not found!" && exit 1

  #${rpath}/test_meta --flavor=$flavor --task=$task --role=$role || exit 1
  
  [ "X$timestamp" == "Xrepeat" ] && timestamp=`ls -1tr "${WORK_DIR}/${role}.${task}.*" | tail -1` && timestamp=${timestamp##*.}
  [ -z "$timestamp" ] && timestamp=`date +"%y_%m_%d_%H_%M"`
  install -d "${WORK_DIR}/${role}.${task}.${timestamp}"
  touch "${WORK_DIR}/${role}.${task}.${timestamp}/log"
  echo
  if [ -n "$command" ] ; then
    meta="$command"
    run_meta "${meta}"
  else
    IFS1=$IFS
    IFS='
'
    for meta in `cat "${ROLES_ROOT}/${role}/meta.${task}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do
      run_meta "${meta}"
    done
    IFS=$IFS1
  fi
else
  echo "Setting up self is not supported"
fi

#echo "Preparing the keys"
#if [ -f /root/.ssh/id_rsa.pub ] ; then
#  echo "Using existing key"
#else
#  printf "Generating a new key..  "
#  ssh-keygen -q -f /root/.ssh/id_rsa -N '' && printf "done\n" || printf "error\n"
#fi
    
    
    
