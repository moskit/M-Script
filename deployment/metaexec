#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

run_meta() {
  [ `grep -c "^${1}$" "${WORK_DIR}/${role}.${task}.${timestampact}/log"` -ne 0 ] && echo "Skipping: $1" | tee -a "${rpath}/../deploy.log" && return 0
  [ -n "$use_color" ] && printf "\033[01;36mMETA: \033[00;36m$1\033[0m" || printf "META: $1"
  if [ -n "$test" -o -n "$dry" ] ; then
    metatype=`echo $1 | awk '{print $1}'`
    metascript=`echo $1 | awk '{print $2}'`
    [ -z "$metascript" ] && metascript="$metatype" && unset metatype
    metascript=`eval "echo $metascript"`
    if [ -z "$metatype" ] ; then
      # finding out from shebang
      ipr=`head -1 "$1" | grep ^#! | cut -b 3- | awk '{print $1}'`
      if [ -n "$ipr" ] ; then
        [ "$ipr" == "runlocal" ] && metatype="local"
        [ "$ipr" == "runremote" ] && metatype="remote"
      fi
    fi
    [ -z "$metatype" ] && echo "Meta type is not defined. Don't know how to run it." && exit 1
    if [ -n "$verbose" ] ; then
      printf "\n  type: $metatype  script: $metascript\n"
      V='--verbose'
    fi
    if [ -n "$debug" ] ; then
      D='--debug'
    fi
    if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
      if [ -e "${ROLES_ROOT}/$metascript" ] ; then
        [ -e "${WORK_DIR}/${role}.${task}.${timestampact}/$metascript" ] && rm -f "${WORK_DIR}/${role}.${task}.${timestampact}/$metascript"
        [ -e "${WORK_DIR}/${role}.${task}.${timestampact}/${metascript}.var" ] && rm -f "${WORK_DIR}/${role}.${task}.${timestampact}/${metascript}.var"
        deploy.run --type=$metatype --file=$metascript --ip=$ip --key="$KEY" --cluster="$cluster" --role="$role" --flavor="$flavor" --timestamp=$timestampact --task="$task" --dry $V $D
        res=$?
      else
        echo "${ROLES_ROOT}/$metascript not found"
        res=1
      fi
      if [ -n "$verbose" ] ; then
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "\033[01;32mSuccess\033[0m\n" || printf "\033[01;31mError\033[0m\n"
        else
          [ $res -eq 0 ] && echo "Success" || echo "ERROR"
        fi
      else
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "  ..  \033[01;32mSuccess\033[0m\n" || printf "  ..  \033[01;31mError\033[0m\n"
        else
          [ $res -eq 0 ] && echo "  ..  Success" || echo "  ..  ERROR"
        fi
      fi
      [ -n "$verbose" ] && echo
      return $res
    else
      [ -n "$use_color" ] && printf "\033[01;31m"
      echo "Error parsing the meta: $meta"
      [ -n "$use_color" ] && printf "\033[0m"
    fi
  else
    
    metatype=`echo $1 | awk '{print $1}'`
    metascript=`echo $1 | awk '{print $2}'`
    metascript=`eval "echo $metascript"`
    if [ -n "$verbose" ] ; then
      printf "\n  type: $metatype  script: $metascript\n"
      V='--verbose'
    fi
    if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
      if [ -e "${ROLES_ROOT}/$metascript" ] ; then
        deploy.run --type=$metatype --file=$metascript --ip=$ip --key="$KEY" --cluster="$cluster" --role="$role" --flavor="$flavor" --timestamp=$timestampact --task="$task" $V
        res=$?
      else
        echo "${ROLES_ROOT}/$metascript not found"
        res=1
      fi
      if [ -n "$verbose" ] ; then
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "\033[01;32mSuccess\033[0m\n" || printf "\033[01;31mError\033[0m\n"
        else
          [ $res -eq 0 ] && echo "Success" || echo "ERROR"
        fi
      else
        if [ -n "$use_color" ] ; then
          [ $res -eq 0 ] && printf "  ..  \033[01;32mSuccess\033[0m\n" || printf "  ..  \033[01;31mError\033[0m\n"
        else
          [ $res -eq 0 ] && echo "  ..  Success" || echo "  ..  ERROR"
        fi
      fi
      [ -n "$verbose" ] && echo
      [ $res -eq 0 ] && echo "$meta" >> "${WORK_DIR}/${role}.${task}.${timestampact}/log"
      return $res
    else
      echo "Error parsing the meta: $meta"
      exit 1
    fi
  fi
}

startserver() {
  ip=`"${rpath}"/../cloud/${cloud}/start_server --cluster=${cluster} --return=ip "$V" 2>>"${rpath}"/../logs/cloud.log | tail -1`
  res=$?
  echo "`date +"%m.%d %H:%M"` metaexec: start_server exited with status $res and returned this IP: $ip">>"${rpath}"/../logs/cloud.log
}

SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
possible_options="help verbose debug flavor ip cloud run cluster task role timestamp test dry command output repeat newserver list skip"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /--/g'`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$debug" ] && verbose="yes"
export verbose debug
[ -n "$repeat" ] && timestamp=repeat

if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"
  exit 0
fi

source "${rpath}/../conf/deployment.conf"
source "${rpath}/../conf/cloud.conf"
[ -n "$cloud" ] || cloud=$CLOUD
[ -n "$cloud" ] || cloud=common
M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud/${cloud}:${M_ROOT}/helpers:${PATH}
[ -n "$task" ] || task=notask

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"

if [ -n "$timestamp" ] ; then
  [ -n "$newserver" ] && echo "Repeating existing sequence is disabled for new server. If you want to repeat a meta that has brought brought up a server, it's safe to run $rcommand --repeat or $rcommand --timestamp=<timestamp> without other arguments. It will pick up IP address of that server and all relevant arguments." && exit 1
  if [ "X$timestamp" == "Xrepeat" ]; then
    timestampact=`ls -1tr "${WORK_DIR}" | tail -1` && timestampact=${timestampact##*.} && echo "Restoring the process with timestamp $timestampact"
    if [ -n "$timestampact" ]; then
      argfile=`find "${WORK_DIR}"/*.${timestampact}/ -maxdepth 1 -name ARGV`
      [ -f "$argfile" ] && sed -i "/^newserver/d;/^test/d;/^verbose/d;/^debug/d" "$argfile"
      source "$argfile"
    fi
  else
    timestampact="$timestamp"
  fi
else
  timestampact=`date +"%y_%m_%d_%H_%M_%S"`
fi
install -d "${WORK_DIR}/${role}.${task}.${timestampact}"
touch "${WORK_DIR}/${role}.${task}.${timestampact}/log"

if [ -n "$ip" ] ; then
  [ -n "$newserver" ] && echo "Both newserver and ip are defined. Not sure what to do." && exit 1
  if [[ $ip =~ [^[0-9.]]* ]] ; then
    echo "Something's wrong with IP: $ip"
    exit 1
  fi
  ipcluster=`grep "^$ip|" "${rpath}/../servers.list" | cut -d'|' -f5`
  [ -z "$ipcluster" ] && echo "IP $ip is not present in servers.list or has no cluster defined." && exit 1
  if [ -n "$cluster" ] ; then
    [ "$cluster" != "$ipcluster" ] && echo "Cluster found for this IP is ${ipcluster}, but cluster provided as an option is $cluster" && exit 1
  else
    cluster=$ipcluster
  fi
else
  # Cluster must be defined! If it is still not, we'll find it using the role
  if [ -z "$cluster" ] ; then
    if [ -z "$role" ] ; then
      if [ -n "$M_ROLE" ] ; then
        role=$M_ROLE
        cluster=$M_CLUSTER
      fi
    else
      cluster=$M_CLUSTER
      [ -z "$cluster" ] && cluster=`cat "${rpath}/../conf/clusters.conf" | grep -v ^# | grep -v ^$ | cut -d'|' -f1,10 | grep \|${role}$ | cut -d'|' -f1`
      [ -n "$cluster" ] && echo "Using cluster ${cluster}, default for role ${role}"
    fi
    # Still no cluster??
    if [ -z "$cluster" ] ; then
      echo "Unable to find what cluster to use."
      exit 1
    fi
  else
    # role by cluster
    if [ -z "$role" ] ; then
      role=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f10`
      echo "Using role ${role}, default for cluster ${cluster}"
      [ -z "$role" ] && echo "Unable to find the role of this cluster/server" && exit 1
    fi
  fi
fi
export role cluster

[ -n "$verbose" ] && V='--verbose'

if [ -n "$newserver" ]; then
  [ -z "$cloud" ] && echo "Cloud is not defined" && exit 1
  echo "*** Bringing up a new server in the cloud $cloud"
  "${rpath}"/../cloud/${cloud}/update_servers_list
  startserver
  for ((i=0; i<$NEW_SERVER_START_TRIES; i++)); do
    # update_servers_list isn't required here, successful start_server updates it
    [ $res -eq 5 ] && echo "Maximum servers number for cluster $cluster has been reached, unable to add another server" && sleep $WAIT_BETWEEN_TRIES && startserver
    [ $res -eq 6 ] && echo "Failed to generate a name for the new server" && sleep $WAIT_BETWEEN_TRIES && exit 1
    [ $res -eq 7 ] && echo "Failed to find out what image to use to create the new server, define it in clusters.conf, please" && sleep $WAIT_BETWEEN_TRIES && startserver
    [ $res -eq 8 ] && echo "Failed to find out what flavor (server size) to use, define it in clusters.conf, please" && sleep $WAIT_BETWEEN_TRIES && startserver
    [ $res -eq 1 ] && echo "Something went wrong, unable to add a server to the cluster $cluster" && sleep $WAIT_BETWEEN_TRIES && startserver
    [[ $ip =~ [^[0-9.]]* ]] && echo "Something's wrong with IP: $ip" && sleep $WAIT_BETWEEN_TRIES && startserver
    [ -z "$ip" ] && echo "Was unable either to start a cloud server in the cloud $cloud or to get its IP address." && sleep $WAIT_BETWEEN_TRIES && startserver
  done
fi

if [ -z "$flavor" ] ; then
  flavor=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f11`
  echo "Using flavor ${flavor}, default for cluster ${cluster}"
  [ -z "$flavor" ] && echo "Unable to find the flavor of this cluster/server OS" && exit 1
fi

# Default output is console, colored if colors are supported
if [ -z "$output" ] ; then
# Thanks to Gentoo guys for this part, I couldn't do better
  safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
  match_lhs=""
  [[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
  [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
  [[ -z ${match_lhs}    ]] \
	  && type -P dircolors >/dev/null \
	  && match_lhs=$(dircolors --print-database)
  [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true
fi

if [ `echo $ip | grep -c "$localip"` -eq 0 ] ; then
  KEY=`grep "^${cluster}|" "${rpath}/../conf/clusters.conf" | cut -d'|' -f2`
  [ -z "$KEY" ] && echo "Either cluster ${cluster} or its key not found in ${rpath}/../conf/clusters.conf" && exit 1
  [ -z "$SSH" ] && echo "SSH client not found!" && exit 1
  [ -f "${rpath}/../keys/${KEY}" ] || KEY=${KEY}.pem
  [ ! -f "${rpath}/../keys/${KEY}" ] && echo "Key $KEY not found" && exit 1
  #SSH="$SSH -i \"${rpath}/../keys/${KEY}\" -o StrictHostKeyChecking=no"
  if [ -z "$test" -a -z "$list" -a -n "$ip" ] ; then
    $SSH -i "${rpath}/../keys/${KEY}" -o StrictHostKeyChecking=no $ip pwd >/dev/null
    [ $? -ne 0 ] && echo "Unable to login to the server $ip" && exit 1
  fi
  #[ -z "$SCP" ] && echo "SCP not found!" && exit 1

  #${rpath}/testmeta --flavor=$flavor --task=$task --role=$role || exit 1
  
  if [ -z "$list" ] ; then
    
    if [ -z "$timestamp" ];then
    ## Saving arguments to make re-run simpler
      IFS2=$IFS ; IFS=$' \t\n'
      for option in `echo $possible_options | sed 's/,/ /g'`; do
        echo "${option}=`eval "echo \\$${option}"`" >> "${WORK_DIR}/${role}.${task}.${timestampact}/ARGV"
      done
      IFS=$IFS2
      echo -e "flavor=$flavor\ncluster=$cluster\nrole=$role\n" >> "${WORK_DIR}/${role}.${task}.${timestampact}/ARGV"
      if [ -n "$newserver" ]; then
        echo "ip=$ip" >> "${WORK_DIR}/${role}.${task}.${timestampact}/ARGV"
      fi
    fi
    ##
  fi
  echo
  if [ -n "$command" ] && [[ `echo $command | grep -c "^[0-9]*$"` -eq 0 ]]; then
    meta="$command"
    run_meta "${meta}"
  else
    IFS1=$IFS
    IFS='
'
    declare -i metan
    metan=1
    for meta in `cat "${ROLES_ROOT}/${role}/meta.${task}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do
      meta=`eval "echo ${meta}"`
      runthis=true
      skipthis=false
      if [ -n "$list" ] ; then
        echo "$metan ${meta}"
      else
        if [ -n "$skip" ] ; then
          for skipn in `echo -e $skip | tr ',' '\n'` ; do
            [[ $skipn -eq $metan ]] && skipthis=true
          done
        fi
        if [ -n "$command" ] ; then
          runthis=false
          for commandn in `echo -e $command | tr ',' '\n'` ; do
            [[ $commandn -eq $metan ]] && runthis=true
          done
        fi
        if $runthis && ! $skipthis ; then
          run_meta "${meta}"
          [ $? -ne 0 ] && echo -e "Timestamp: $timestampact\nWork directory: ${WORK_DIR}/${role}.${task}.${timestampact}\n" && exit 1
        fi
      fi
      metan+=1
    done
    IFS=$IFS1
  fi
else
  echo "Setting up self is not supported"
fi
if [ -z "$list" ] ; then
  echo -e "Timestamp: $timestampact\nWork directory: ${WORK_DIR}/${role}.${task}.${timestampact}\n"
fi
echo
#echo "Preparing the keys"
#if [ -f /root/.ssh/id_rsa.pub ] ; then
#  echo "Using existing key"
#else
#  printf "Generating a new key..  "
#  ssh-keygen -q -f /root/.ssh/id_rsa -N '' && printf "done\n" || printf "error\n"
#fi
    
    
    
