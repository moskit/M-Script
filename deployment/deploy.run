#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
#*/

store_vars() {
  [ -n "$verbose" ] && echo "Sourcing $1"
  for LINE in `cat "$1" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do
    # to respect environment variables and variables passed from command line
    pvar=`expr "$LINE" : '[[:space:]]*\([a-zA-Z0-9_]*\)=.*$'`
    if [ -n "$pvar" ]; then
      pval="`eval echo "\\$$pvar"`"
      if [ -n "$pval" ]; then
        [ `expr "$pval" : "[0-9]*$"` -eq 0 ] && echo "${pvar}=\"`eval echo "\\$$pvar"`\"" >> "$varfile" && continue || echo "${pvar}=`eval echo "\\$$pvar"`" >> "$varfile" && continue
      fi
    fi
    
    $debug && echo "  == $LINE"
    ELINE=`echo "$LINE" | sed 's|"|\\\"|g' | sed "s|'|\\\'|g" | sed 's_|_\\\|_g'`
    $debug && echo "  << $ELINE"
    # This conditional evaluation below is a workaround for hard nuts like pipes
    # inside sub-shells. More complex constructs involving both sub-shell and 
    # non-sub-shell expression in a single line both with pipes will probably 
    # not work. Just avoid such things.
    eval "$LINE" 2>/dev/null
    eval $(eval "echo \"$LINE\"") 2>/dev/null
    if [ $? -eq 0 ]; then
      $debug && echo "evaluating plain line"
      eval "echo \"$LINE\"" >> "$varfile"
    else
      eval "$ELINE" 2>/dev/null
      eval $(eval "echo \"$ELINE\"") 2>/dev/null
      if [ $? -eq 0 ]; then
        $debug && echo "evaluating converted line"
        eval "echo \"$ELINE\"" >> "$varfile"
      else
        echo -e "ERROR: both plain and converted lines evaluation failed for this line:\n\n$LINE\n\n"
        exit 1
      fi
    fi
    $debug && echo "  >> `tail -1 "$varfile"`" || true
  done
}

find_name() {
  NAME=`grep "^${1}|" "$M_ROOT/servers.list" 2>/dev/null | cut -d'|' -f4`
  [ -n "$NAME" ] && return 0 || NAME=`grep -E "^${1}[[:space:]]|[[:space:]]${1}[[:space:]]" /etc/hosts`
  [ -n "$NAME" ] && NAME=$(for N in $NAME ; do [[ "$N" =~ '\.' ]] || DNAME=$N ; done)
  [ -n "$DNAME" ] && NAME=$DNAME || NAME=`echo $NAME | awk '{print $2}' | cut -d'.' -f1`
}

SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
possible_options="help verbose debug ip cluster type file key role flavor timestamp task dry cloud ignoreemptycluster ignorenocluster ignoreipnotpresent user nosudo parentrole"
necessary_options="file type task role timestamp"
[ -z "$*" ] && echo "Can't run without options. Possible options are: $possible_options" && exit 1
# debug must be passed here as option only
unset debug

IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=$s_option
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /-/g'`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "_$s_option" == "_$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "_$help" == "_yes" ] ; then
  echo -e -n "Usage: ${0##*/}"" <options> <positional parameters>\n\n"
  if [ -n "$possible_options" ] ; then
    echo -e " <options> <positional parameters>\n\n  Possible options: $possible_options"
    [ -n "$necessary_options" ] && echo "  Necessary options: $necessary_options"
  else
    echo -e " <positional parameters>\n\n"
  fi
  exit 0
fi

echo -e "\n\n-------------------\n${0} $*\n" >> "$rpath/../logs/deploy.log"

[ -n "$cloud" ] || cloud=$CLOUD
source "$M_ROOT/conf/deployment.conf" || exit 99
source "$M_ROOT/conf/clouds/${cloud}.conf" || exit 99
[ -n "$SSHPORT" ] || SSHPORT=22
# in case it is started not by metaexec
if [ -z "$CURRTASKDIR" ]; then
  CURRTASKDIR="$M_DEPL_WORK_DIR/${role}.${task}.$timestamp"
  export CURRTASKDIR
fi
[ -n "$debug" ] && verbose="yes" && debug=true || debug=false
[ -n "$dry" -o -n "$test" ] && dry="yes"
export debug verbose dry
# These must exist
[ -z "$M_DEPL_WORK_DIR" ] && echo "M_DEPL_WORK_DIR is not set, check deployment.conf" && exit 1
[ -z "$ROLES_ROOT" ] && echo "ROLES_ROOT is not set, check deployment.conf" && exit 1

[ -z "$ip" -a -n "$ignorenocluster" ] && echo "Either IP or non-empty cluster is necessary" && exit 1
export PATH="$M_ROOT/deployment:$M_ROOT/cloud/common:$M_ROOT/helpers:$PATH"

[ -n "$user" ] && SSH_REMOTE_USER="$user"
[ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root" && nosudo="yes"

[ -z "$ip" -a -z "$cluster" ] && echo "Neither cluster nor ip is found" >> "$M_ROOT/logs/deploy.log" && exit 1
if [ -n "$cluster" ] && [ -z "$ignoreemptycluster" ] && [ -z "$dry" ]; then
  [ `IAMACHILD=1 "$M_ROOT"/cloud/common/find_server --cluster="$cluster" --cloud="$cloud" --quick | wc -l` -eq 0 ] && echo "No servers found in cluster $cluster" && exit 1
fi
[ -z "$task" ] && task="notask"
[ -z "$role" ] && role="norole"
[ "_$timestamp" == "_repeat" ] && timestamp=`ls -1tr "$M_DEPL_WORK_DIR/${role}.${task}.*" | tail -1` && timestamp=${timestamp##*.}
[ -z "$timestamp" ] && timestamp=`date +"%y_%m_%d_%H_%M"`
export role task timestamp   ## exports the working dir
install -d "$M_DEPL_WORK_DIR/${role}.${task}.${timestamp}/${file%/*}" >> "$M_ROOT/logs/deploy.log" 2>&1 || exit 1
declare -i RETVAL
RETVAL=0
IFS1=$IFS; IFS='
'
# save variables to a file
varfile="$CURRTASKDIR/${file}.var"
if [ -f "$varfile" ]; then
  rm "$varfile"
fi
touch "$varfile"
# should not be readable by others, sensitive things may be there
chmod 600 "$varfile"
# common role's conf is sourced here to allow global variables that can be
# used in other role.confs, but its vars are not saved yet
[ -e "$ROLES_ROOT/common/role.conf" ] && source "$ROLES_ROOT/common/role.conf" 2>>"$LOG"
# first goes the actual role. Variables assigned are not being overwritten
# by included roles, thus actual role has higher priority
if [ -e "$ROLES_ROOT/$role/role.conf" ]; then
  store_vars "$ROLES_ROOT/$role/role.conf"
  [ $? -ne 0 ] && echo "ERROR substituting variables for role $role" && exit 1
fi
# if some other role's script is included in meta script, source its variables
# too. Same for scripts symlinked from other roles.
[ -h "$ROLES_ROOT/$file" ] && realfile=`readlink -f "$ROLES_ROOT/$file"` || realfile="$ROLES_ROOT/$file"
realfile=`echo "$realfile" | sed "s|$ROLES_ROOT/||"`
roleincluded=${realfile%%/*} #*/
if [ "_$roleincluded" != "_$role" ]; then
  if [ -e "$ROLES_ROOT/$roleincluded/role.conf" ]; then
    store_vars "$ROLES_ROOT/$roleincluded/role.conf"
    [ $? -ne 0 ] && echo "ERROR substituting variables for role $roleincluded" && exit 1
  fi
  export ROLEINCL=$roleincluded
fi
# last and least, common role
if [ -e "$ROLES_ROOT/common/role.conf" ]; then
  store_vars "$ROLES_ROOT/common/role.conf"
  [ $? -ne 0 ] && echo "ERROR substituting variables for role common" && exit 1
fi
  
# command-line options (variables from this script) must be saved too
IFS2=$IFS ; IFS=$' \t\n'
for option in `echo $possible_options | sed 's/,/ /g'`; do
  echo "${option}=\"`eval "echo \\$${option}"`\"" >> "$CURRTASKDIR/${file}.var"
done
IFS=$IFS2
# and some other variables
M_ROOT_REMOTE=`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | cut -d'|' -f8`
[ -n "$M_ROOT_REMOTE" ] || M_ROOT_REMOTE=$M_ROOT
echo "M_ROOT_REMOTE=\"$M_ROOT_REMOTE\"" >> $CURRTASKDIR/${file}.var
# variables propagated from scripts via propvar
if [ -f "$CURRTASKDIR/prop.var" ]; then
  $debug && echo -e "propagated variables found:\n`cat "$CURRTASKDIR/prop.var"`"
  cat "$CURRTASKDIR/prop.var" >> "$varfile"
fi

# now prepare the script
source "$CURRTASKDIR/${file}.var"
for LINE in `cat "$ROLES_ROOT/$file"` ; do
  ELINE=$(echo "$LINE" | \
  sed 's|"|\\\"|g' | \
  sed 's|`|\\\`|g')
  a=`eval "echo \"$ELINE\"" 2>/dev/null`
  [ $? -eq 0 ] && [ -n "$a" ] && echo "$a" >> "$CURRTASKDIR/$file" || echo "$LINE" >> "$CURRTASKDIR/$file"
done
 
if [ "$type" == "remote" ]; then
  if [ -z "$cluster" ] && [ -n "$ip" ]; then
    cluster=`grep "^$ip|" "$M_ROOT/servers.list" | cut -d'|' -f5`
    if [ -z "$cluster" ]; then
      echo "Unable to find cluster name" >> "$M_ROOT/logs/deploy.log"
      [ -z "$ignorenocluster" ] && exit 1
    fi
  fi
  if [ -n "$ip" ]; then
    key=`"$M_ROOT"/helpers/find_key server "$ip"`
  else
    key=`"$M_ROOT"/helpers/find_key cluster "$cluster"`
  fi
  [ -z "$key" ] && echo "Key not found" >> "$M_ROOT/logs/deploy.log" && exit 1
  [ ! -f "$key" ] && echo "Key $key does not exist" >> "$M_ROOT/logs/deploy.log" && exit 1
  echo "using key $key" >> "$M_ROOT/logs/deploy.log"
  echo "`date +"%H:%M:%S"` REMOTE $file" >> "$M_ROOT/logs/deploy.log"
  if [ -z "$ip" ]; then
    if [ -n "$dry" ]; then
      ips=`get_ips --cluster="$cluster" --limit=1`
    else
      ips=`get_ips --cluster="$cluster"`
    fi
  else
    ips=$ip
  fi
  if [ -n "$ips" ]; then
    for IP in $ips ; do
      find_name $IP
      if [ "_$nosudo" == "_yes" ]; then
        # install remote workdir
        $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" install -d "$CURRTASKDIR/${file%/*}" >> "$M_ROOT/logs/deploy.log" 2>&1 || exit 1
        # copy the script to remote server
        $SCP -P $SSHPORT -i "$key" "$CURRTASKDIR/$file" "${SSH_REMOTE_USER}@${IP}:$CURRTASKDIR/$file" >> "$M_ROOT/logs/deploy.log" 2>&1 || exit 1
        # copy config to remote server
        $SCP -P $SSHPORT -i "$key" "$CURRTASKDIR/${file}.var" "${SSH_REMOTE_USER}@${IP}:$CURRTASKDIR/${file}.var" >> "$M_ROOT/logs/deploy.log" 2>&1
        $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" echo -e "ip=$IP\\nservername=$NAME" \>\> "$CURRTASKDIR/${file}.var"
        if [ -n "$dry" ]; then
        [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
          $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" "(source \"$CURRTASKDIR/${file}.var\" && cat \"$CURRTASKDIR/$file\")" | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
          res=$?
          [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
          [ $res -ne 0 ] && exit 1
        else
          [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
          $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" "(source \"$CURRTASKDIR/${file}.var\" && bash \"$CURRTASKDIR/$file\" 2>&1 || echo \"${timestamp}_ERROR\")" | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
          res=$?
          [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
          [ $res -ne 0 ] && exit 1
        fi
      else
      # install remote workdir
        $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" sudo install -o $SSH_REMOTE_USER -d "$CURRTASKDIR/${file%/*}" >> "$M_ROOT/logs/deploy.log" 2>&1 || exit 1
        # copy the script to remote server
        $SCP -P $SSHPORT -i "$key" "$CURRTASKDIR/$file" "${SSH_REMOTE_USER}@${IP}:$CURRTASKDIR/$file" >> "$M_ROOT/logs/deploy.log" 2>&1 || exit 1
        # copy config to remote server
        $SCP -P $SSHPORT -i "$key" "$CURRTASKDIR/${file}.var" "${SSH_REMOTE_USER}@${IP}:$CURRTASKDIR/${file}.var" >> "$M_ROOT/logs/deploy.log" 2>&1
        $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" echo -e \"ip=\\\"$IP\\\"\\\nservername=\\\"$NAME\\\"\" \>\> \"$CURRTASKDIR/${file}.var\"
        # profile, config and script need to be concatenated for sudo
        $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" cat .bash_profile \"$CURRTASKDIR/${file}.var\" \"$CURRTASKDIR/$file\" \>\> \"$CURRTASKDIR/${file}.sudo\"
        if [ -n "$dry" ]; then
          [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
          $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" cat \"$CURRTASKDIR/$file\" | while read output ; do [ -n "$verbose" ] && echo "$output" ; sudo echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
          res=$?
          [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
          [ $res -ne 0 ] && exit 1
        else
          [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
          $SSH -p $SSHPORT -i "$key" "$SSH_REMOTE_USER"@"$IP" "sudo bash \"$CURRTASKDIR/${file}.sudo\" 2>&1 || echo \"${timestamp}_ERROR\"" | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
          res=$?
          [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
          [ $res -ne 0 ] && exit 1
        fi
      fi
    done
  else
    if [ -n "$dry" ]; then
      echo "Remote servers not found, testing locally" | tee -a "$rpath/../logs/deploy.log"
      [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
      (source "$CURRTASKDIR/${file}.var" && cat "$CURRTASKDIR/$file" && cat "$CURRTASKDIR/$file" | grep -E "^[[:space:]]deploy_file|^deploy_file" | sed 's|deploy_file|deploy_file --test|' | bash 2>&1 || echo "${timestamp}_ERROR") | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
      res=$?
      [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
      [ $res -ne 0 ] && exit 1
    else
      echo "Remote servers not found, exiting" | tee -a "$M_ROOT/logs/deploy.log"
      RETVAL+=1
    fi
  fi
elif [ "$type" == "local" ]; then
  echo "`date +"%H:%M:%S"` LOCAL $file" >> "$M_ROOT/logs/deploy.log"
  if [ -n "$dry" ]; then
    [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
    (source "$CURRTASKDIR/${file}.var" && cat "$CURRTASKDIR/$file" && cat "$CURRTASKDIR/$file" | grep -E "^[[:space:]]deploy_file|^deploy_file" | sed 's|deploy_file|deploy_file --test|' | bash 2>&1 || echo "${timestamp}_ERROR") | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
    res=$?
    [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
    [ $res -ne 0 ] && exit 1
  else
    [ -n "$verbose" ] && echo -e "\n--------------------------------------------------------------------------------"
    # running the script
    (source "$CURRTASKDIR/${file}.var" && bash "$CURRTASKDIR/$file" 2>&1 || echo "${timestamp}_ERROR") | while read output ; do [ -n "$verbose" ] && echo "$output" ; echo "$output" >> "$M_ROOT/logs/deploy.log" ; if [ `echo "$output" | grep -c "${timestamp}_ERROR"` -gt 0 ]; then exit 1 ; fi ; done
    res=$?
    [ -n "$verbose" ] && echo "--------------------------------------------------------------------------------"
    [ $res -ne 0 ] && exit 1
  fi
else
  echo "type: \"$type\" not supported"
  exit 1
fi
IFS=$IFS1

unset ip cluster type file key role flavor result
exit $RETVAL



