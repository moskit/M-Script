#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
#*/

store_vars() {
  varfile="${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var"
  local role="${1}"
  if [ -f "$varfile" ]; then
    [ -n "$verbose" ] && echo "Reading existing variables"
    source "$varfile"
  fi
  [ -n "$verbose" ] && echo "Sourcing ${ROLES_ROOT}/${role}/role.conf"
  for LINE in `cat "${ROLES_ROOT}/common/role.conf" "${ROLES_ROOT}/${role}/role.conf" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do
    # to respect environment variables and variables passed from command line
    pvar=`expr "$LINE" : '[[:space:]]*\([a-zA-Z0-9_]*\)=.*$'`
    [ -n "`eval echo "\\$$pvar"`" ] && echo "${pvar}=`eval echo "\\$$pvar"`" >> "$varfile" && continue
    
    [ -n "$debug" ] && echo "  == $LINE"
    ELINE=`echo "$LINE" | sed 's|"|\\\"|g' | sed "s|'|\\\'|g" | sed 's_|_\\\|_g'`
    [ -n "$debug" ] && echo "  << $ELINE"
    # This conditional evaluation below is a workaround for hard nuts like pipes
    # inside sub-shells. More complex constructs involving both sub-shell and 
    # non-sub-shell expression in a single line both with pipes will probably 
    # not work. Just avoid such things.
    eval "$LINE" 2>/dev/null
    eval $(eval "echo \"$LINE\"") 2>/dev/null
    if [ $? -eq 0 ]; then
      [ -n "$debug" ] && echo "evaluating plain line"
      eval "echo \"$LINE\"" >> "$varfile"
    else
      eval "$ELINE" 2>/dev/null
      eval $(eval "echo \"$ELINE\"") 2>/dev/null
      if [ $? -eq 0 ]; then
        [ -n "$debug" ] && echo "evaluating converted line"
        eval "echo \"$ELINE\"" >> "$varfile"
      else
        echo -e "ERROR: both plain and converted lines evaluation failed for this line:\n\n$LINE\n\n"
        exit 1
      fi
    fi
    [ -n "$debug" ] && echo "  >> `tail -1 "$varfile"`" || true
  done
}

find_name() {
  NAME=`grep "^${1}|" "$M_ROOT/servers.list" 2>/dev/null | cut -d'|' -f4`
  [ -n "$NAME" ] && return 0 || NAME=`grep -E "^${1}[[:space:]]|[[:space:]]${1}[[:space:]]" /etc/hosts`
  [ -n "$NAME" ] && NAME=$(for N in $NAME ; do [[ "$N" =~ '\.' ]] || DNAME=$N ; done)
  [ -n "$DNAME" ] && NAME=$DNAME || NAME=`echo $NAME | awk '{print $2}' | cut -d'.' -f1`
}

print_result() {
  if [ -n "$verbose" ] ; then
    echo "--------------------------------------------------------------------------------"
    echo "${result}" | tee -a "${rpath}/../logs/deploy.log"
    echo "--------------------------------------------------------------------------------"
  else
    echo "${result}" >> "${rpath}/../logs/deploy.log"
  fi
  [ `echo "${result}" | grep -c ${timestamp}_ERROR` -gt 0 ] && RETVAL+=1 && return 1
}

SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
possible_options="help verbose debug ip cluster type file key role flavor timestamp task dry cloud"
necessary_options="file type task role"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=$s_option
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /--/g'`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "X$help" == "Xyes" ] ; then
  echo -e -n "Usage: ${0##*/}"" <options> <positional parameters>\n\n"
  if [ -n "$possible_options" ] ; then
    echo -e " <options> <positional parameters>\n\n  Possible options: $possible_options"
    [ -n "$necessary_options" ] && echo "  Necessary options: $necessary_options"
  else
    echo -e " <positional parameters>\n\n"
  fi
  exit 0
fi

echo -e "\n\n-------------------\n${0} $*\n" >> "${rpath}/../logs/deploy.log"

source "${rpath}/../conf/deployment.conf" || exit 99
source "${rpath}/../conf/cloud.conf" || exit 99

[ -n "$debug" ] && verbose="yes"
[ -n "$dry" -o -n "$test" ] && dry="yes"
export debug verbose dry
# These must exist
[ -z "$WORK_DIR" ] && echo "WORK_DIR is not set, check deployment.conf" && exit 1
[ -z "$ROLES_ROOT" ] && echo "ROLES_ROOT is not set, check deployment.conf" && exit 1
[ -n "$SSHPORT" ] || SSHPORT=22
[ -n "$cloud" ] || cloud=$CLOUD
[ -n "$cloud" ] || cloud=common
[ -z "$M_ROOT" ] && M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud/${cloud}:${M_ROOT}/helpers:${PATH}

[ -z "$ip" -a -z "$cluster" ] && echo "Neither cluster nor ip not found" >> "${rpath}/../logs/deploy.log" && exit 1
[ -n "$cluster" ] && [ `cat "${rpath}/../servers.list" | grep -v ^$ | grep -v  ^# | grep -v ^[[:space:]]*# | cut -d'|' -f5 | grep -c "$cluster"` -eq 0 ] && [ -z "$dry" ] && echo "No servers found in cluster $cluster" && exit 1
[ -z "$task" ] && task="notask"
[ -z "$role" ] && role="norole"
[ "X$timestamp" == "Xrepeat" ] && timestamp=`ls -1tr "${WORK_DIR}/${role}.${task}.*" | tail -1` && timestamp=${timestamp##*.}
[ -z "$timestamp" ] && timestamp=`date +"%y_%m_%d_%H_%M"`
export role task timestamp   ## exports the working dir
install -d "${WORK_DIR}/${role}.${task}.${timestamp}/${file%/*}" >> "${rpath}/../logs/deploy.log" 2>&1 || exit 1
declare -i RETVAL
RETVAL=0
IFS1=$IFS; IFS='
'
# save variables to a file
# common first
[[ "$role" == "common" ]] || store_vars common
[ $? -ne 0 ] && echo "ERROR substituting variables for role common" && exit 1
# if some other role's script is included in meta script, source its variables
# too.
roleincluded=${file%%/*} #*/
if [ "X$roleincluded" != "X$role" ] ; then
  if [ -e "${ROLES_ROOT}/${roleincluded}/role.conf" ] ; then
    store_vars $roleincluded
    [ $? -ne 0 ] && echo "ERROR substituting variables for role $roleincluded" && exit 1
    export ROLEINCL=$roleincluded
  fi
fi
# The actual role is the last one. This way it has the last word and overwrites
# variables of the same name from the roles included above
if [ -e "${ROLES_ROOT}/${role}/role.conf" ] ; then
  store_vars $role
  [ $? -ne 0 ] && echo "ERROR substituting variables for role $role" && exit 1
fi

# command-line options (variables from this script) should be saved too
IFS2=$IFS ; IFS=$' \t\n'
for option in `echo $possible_options | sed 's/,/ /g'`; do
  echo "${option}=`eval "echo \\$${option}"`" >> "${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var"
done
IFS=$IFS2
# now prepare the script
source "${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var"
for LINE in `cat "${ROLES_ROOT}/${file}"` ; do
  ELINE=$(echo "$LINE" | \
  sed 's|"|\\\"|g' | \
  sed 's|`|\\\`|g')
  a=`eval "echo \"$ELINE\"" 2>/dev/null`
  [ $? -eq 0 ] && [ -n "$a" ] && echo "$a" >> "${WORK_DIR}/${role}.${task}.${timestamp}/${file}" || echo "$LINE" >> "${WORK_DIR}/${role}.${task}.${timestamp}/${file}"
done

M_ROOT_REMOTE=`grep "^${cluster}|" "${rpath}/../conf/clusters.conf" | cut -d'|' -f8`
[ -n "$M_ROOT_REMOTE" ] || M_ROOT_REMOTE=$M_ROOT
echo "M_ROOT_REMOTE=$M_ROOT_REMOTE" >> ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var
  
if [ "$type" == "remote" ] ; then
  if [ -z "$cluster" ] && [ -n "$ip" ] ; then
    cluster=`grep "^${ip}|" "${rpath}/../servers.list" | cut -d'|' -f5`
    [ -z "$cluster" ] && echo "Unable to find cluster name" >> "${rpath}/../logs/deploy.log" && exit 1
  fi
  if [ -n "$ip" ] ; then
    key=`"$M_ROOT"/helpers/find_key server "$ip"`
  else
    key=`"$M_ROOT"/helpers/find_key cluster "$cluster"`
  fi
  [ -z "$key" ] && echo "Key not found" >> "${rpath}/../logs/deploy.log" && exit 1
  
  echo "`date +"%H:%M:%S"` REMOTE $file" >> "${rpath}/../logs/deploy.log"
  if [ -z "$ip" ] ; then
    if [ -n "$dry" ] ; then
      ips=`get_ips --cluster="${cluster}" --limit=1`
    else
      ips=`get_ips --cluster="${cluster}"`
    fi
  else
    ips=$ip
  fi
  if [ -n "$ips" ]; then
    for IP in $ips ; do
      find_name $IP
      # install remote workdir
      $SSH -p $SSHPORT -i "$key" $IP install -d "${WORK_DIR}/${role}.${task}.${timestamp}/${file%/*}" >> "${rpath}/../logs/deploy.log" 2>&1 || exit 1
      # copy the script to remote server
      $SCP -P $SSHPORT -i "$key" "${WORK_DIR}/${role}.${task}.${timestamp}/${file}" "${IP}:${WORK_DIR}/${role}.${task}.${timestamp}/${file}" >> "${rpath}/../logs/deploy.log" 2>&1 || exit 1
      # copy config to remote server
      $SCP -P $SSHPORT -i "$key" "${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var" "${IP}:${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var" >> "${rpath}/../logs/deploy.log" 2>&1
      $SSH -p $SSHPORT -i "$key" $IP echo -e "ip=$IP\nservername=$NAME" \>\> "${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var"
      if [ -n "$dry" ] ; then
        result=`$SSH -p $SSHPORT -i "$key" $IP "(source ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var && cat ${WORK_DIR}/${role}.${task}.${timestamp}/${file})"`
      else
        # run the script, catch the output, exit if non-zero status
        result=`$SSH -p $SSHPORT -i "$key" $IP "(source ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var && bash ${WORK_DIR}/${role}.${task}.${timestamp}/${file} 2>&1 || echo ${timestamp}_ERROR)"`
      fi
      print_result
    done
  else
    if [ -n "$dry" ] ; then
      echo "Remote servers not found, testing locally" | tee -a "${rpath}/../logs/deploy.log"
      result=`(source ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var && cat ${WORK_DIR}/${role}.${task}.${timestamp}/${file})`
      print_result
    else
      echo "Remote servers not found, exiting" | tee -a "${rpath}/../logs/deploy.log"
      RETVAL+=1
    fi
  fi
elif [ "$type" == "local" ] ; then
  echo "`date +"%H:%M:%S"` LOCAL $file" >> "${rpath}/../logs/deploy.log"
  if [ -n "$dry" ] ; then
    result=`(source ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var && cat ${WORK_DIR}/${role}.${task}.${timestamp}/${file} && cat ${WORK_DIR}/${role}.${task}.${timestamp}/${file} | grep -E "^[[:space:]]deploy_file|^deploy_file" | sed 's|deploy_file|deploy_file --test|' | bash)`
  else
    # running the script
    result=`(source ${WORK_DIR}/${role}.${task}.${timestamp}/${file}.var && bash ${WORK_DIR}/${role}.${task}.${timestamp}/${file} 2>&1 || echo ${timestamp}_ERROR)`
  fi
  print_result
else
  echo "type: \"$type\" not supported"
  exit 1
fi
IFS=$IFS1

unset ip cluster type file key role flavor result
exit $RETVAL



