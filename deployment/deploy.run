#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
SSH=`which ssh 2>/dev/null`
possible_options="help verbose ip cluster type file key"
necessary_options="file type"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"

  exit 0
fi
date >> "${rpath}/../deploy.log"
echo "-------------------" >> "${rpath}/../deploy.log"
echo "${0} $*" >> "${rpath}/../deploy.log"
echo >> "${rpath}/../deploy.log"
source "${rpath}/../conf/deployment.conf"
M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud:${M_ROOT}/cloud/ec2:${M_ROOT}/helpers:${PATH}
if [ "$type" == "$remote" ] ; then
  if [ -z "$cluster" ] && [ -n "$ip" ] ; then
    cluster=`grep "^${ip}|" "${rpath}/../servers.list" | cut -d'|' -f5`
    [ -z "$cluster" ] && echo "Unable to find cluster name" && exit 1
  fi
  M_ROOT_REMOTE=`grep "^${cluster}|" "${rpath}/../conf/clusters.conf" | cut -d'|' -f8`
  [ -n "$M_ROOT_REMOTE" ] || M_ROOT_REMOTE=$M_ROOT
  [ -n "$key" ] || key=`grep "^${cluster}|" "${rpath}/../conf/clusters.conf" | cut -d'|' -f2`
  if [ -n "$ip" ] && [ -z "$key" ] ; then
    key=`grep "^${ip}|" "${rpath}/../servers.list" | cut -d'|' -f2`
  fi
  [ -f "${rpath}/keys/${key}" ] || key=${key}.pem
  [ -f "${rpath}/keys/${key}" ] || (echo "Key $key not found" ; exit 1)
  while read LINE ; do
    echo "`date +"%H:%M:%S"` $LINE" >> "${rpath}/../deploy.log"
    $SSH -i ${rpath}/../keys/${key} ${ip} "$LINE" >> "${rpath}/../deploy.log" 2>&1 || exit 1
  done<$file
else # type == local
  while read LINE ; do
    echo "`date +"%H:%M:%S"` $LINE" >> "${rpath}/../deploy.log"
    eval "$LINE" >> "${rpath}/../deploy.log" 2>&1 || exit 1
  done<$file
fi





