#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
possible_options="help verbose flavor cluster task role"
necessary_options="role task"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"

  exit 0
fi
source "${rpath}/../conf/deployment.conf"
source "${ROLES_ROOT}/${role}/role.conf"
RETVAL=0
[ -n "$flavor" ] || flavor="common"
IFS1=$IFS
IFS='
'
declare -i n
n=0
for meta in `cat "${ROLES_ROOT}/${role}/meta.${task}"` ; do # | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#`
  n+=1
  ([[ $meta =~ ^# ]] || [[ $meta =~ ^$ ]] || [[ $meta =~ ^[[:space:]]*# ]]) && continue
  echo "*** META: $meta"
  metatype=`echo $meta | awk '{print $1}'`
  metascript=`echo $meta | awk '{print $2}'`
  metascript=`eval "echo $metascript"`
  printf "== type: $metatype  script: $metascript  ..  "
  if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
    if [ -e "$metascript" ] ; then
      echo "  ERROR :: line $n :: $metascript doesn't exist"
      RETVAL=1
    fi
    for var in $(IFS2=$IFS ; IFS=$' \t\n\/|' ; for l in `cat "${ROLES_ROOT}/${metascript}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do echo $l ; done | grep '^\$' | sort | uniq ; IFS=$IFS2) ; do a=`eval "echo \$var"` ; if [ -z "$a" ] ; then echo "ERROR :: line $n :: $metascript :: variable $var is null" ; RETVAL=1 ; fi ; done
  else
    echo "ERROR :: line $n :: wrong syntax"
    RETVAL=1
  fi
  echo
done
IFS=$IFS1
exit $RETVAL



