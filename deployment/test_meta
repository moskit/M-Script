#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
possible_options="help verbose flavor cluster task role ip"
necessary_options="task"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"

  exit 0
fi

# Default output is console, colored if colors are supported
if [ -z "$output" ] ; then
# Thanks to Gentoo guys for this part, I couldn't do better
  safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
  match_lhs=""
  [[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
  [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
  [[ -z ${match_lhs}    ]] \
	  && type -P dircolors >/dev/null \
	  && match_lhs=$(dircolors --print-database)
  [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true
fi

source "${rpath}/../conf/deployment.conf"
M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud:${M_ROOT}/cloud/ec2:${M_ROOT}/helpers:${PATH}

if [ -z "$role" -o -z "$flavor" ] ; then
  [ -z "$cluster" -a -z "$ip" ] && echo "Either role or flavor is not defined. In this case either ip or cluster is necessary." && exit 1
fi
[ -z "$cluster" -a -n "$ip" ] && cluster=`grep ^$ip\| "${rpath}/../servers.list" | cut -d'|' -f5`
[ -n "$cluster" -a -z "$ip" ] && ip="127.0.0.1"
declare -i RETVAL
RETVAL=0
good=true
if [ -z "$role" ] ; then
  role=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f10`
  [ -z "$role" ] && echo "Unable to find the role of this cluster/server. Define one of role, cluster, ip or check if you have a default role defined for this cluster in conf/clusters.conf" && exit 1
fi
if [ -z "$flavor" ] ; then
  flavor=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f11`
  [ -z "$flavor" ] && echo "Unable to find the flavor of this cluster/server OS. Define it or check if this cluster has a default flavor set in conf/cluster.conf" && exit 1
fi
source "${ROLES_ROOT}/${role}/role.conf"
IFS1=$IFS
IFS='
'
declare -i n
n=0
for meta in `cat "${ROLES_ROOT}/${role}/meta.${task}"` ; do # | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#`
  n+=1
  ([[ $meta =~ ^# ]] || [[ $meta =~ ^$ ]] || [[ $meta =~ ^[[:space:]]*# ]]) && continue
  [ -n "$use_color" ] && printf "\033[01;36mMETA: \033[00;36m$meta\033[00;39m" || printf "META: $meta"
  metatype=`echo $meta | awk '{print $1}'`
  metascript=`echo $meta | awk '{print $2}'`
  metascript=`eval "echo $metascript"`
  echo -e "\n type: $metatype  script: $metascript\n"
  if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
    if [ ! -e "${ROLES_ROOT}/$metascript" ] ; then
      [ -n "$use_color" ] && printf "\033[01;31m"
      echo "  ERROR :: line $n :: ${ROLES_ROOT}/$metascript doesn't exist"
      [ -n "$use_color" ] && printf "\033[00;39m"
      RETVAL+=1
      echo
      continue
    fi
    ### Variant with subshells extraction
    ### IFS1=$IFS ; IFS='
    ### ' ; for LINE in `cat tango/common/update_local_sources | sed 's|&&|\n|g;s_||_\n_g;s|\;|\n|g' | cat` ; do LINE=$(echo $LINE | sed 's|`.*`|subshell|g;s|$(.*)|subshell|g') ; echo $LINE ; done ; IFS=$IFS1
    [ -n "$use_color" ] && printf "\033[01;39mVariables found: \033[00;39m" || printf "Variables found: "
    for var in $(IFS2=$IFS ; IFS=$' \t\n\/|=(){}[]`"' ; for l in `cat "${ROLES_ROOT}/${metascript}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*# | sed 's|\\\| |g'` ; do echo $l ; done | grep '^\$' | sort | uniq ; IFS=$IFS2) ; do
      printf "$var :: "
      a=`eval "echo \$var"`
      if [ -z "$a" ] ; then
        if [ `grep -c "${var}=" "${ROLES_ROOT}/${metascript}"` -gt 0 ] || [ `grep -c "for[[:space:]]*${var}[[:space:]]*in" "${ROLES_ROOT}/${metascript}"` -gt 0 ] ; then
          [ -n "$use_color" ] && printf "\033[01;31m"
          echo -e "\nERROR :: line $n :: $metascript :: variable $var is null"
          RETVAL+=1
          good=false
          [ -n "$use_color" ] && printf "\033[00;39m"
        else
          [ -n "$use_color" ] && printf "\033[01;33m"
          printf "internal  "
          [ -n "$use_color" ] && printf "\033[00;39m"
        fi
      fi
    done
  else
    [ -n "$use_color" ] && printf "\033[01;31m"
    echo "ERROR :: line $n :: wrong syntax"
    good=false
    [ -n "$use_color" ] && printf "\033[00;39m"
    RETVAL+=1
  fi
  if [ -n "$use_color" ] ; then
    [ $good ] && printf "  ..  \033[01;32mSuccess\033[00;39m\n"
  else
    [ $good ] && printf "  ..  Success\n"
  fi
  echo
done

echo
IFS=$IFS1
if [ $RETVAL -gt 0 ] ; then
  [ $RETVAL -eq 1 ] && errors="error" || errors="errors"
  if [ -n "$use_color" ] ; then
    printf "\033[01;31mFound $RETVAL errors\033[00;39m\n"
  else
    echo "Found $RETVAL $errors"
  fi
  echo
else
  if [ -n "$use_color" ] ; then
    printf "\033[01;32mTest passed\033[00;39m\n"
  else
    echo "Test passed"
  fi
fi
exit $RETVAL



