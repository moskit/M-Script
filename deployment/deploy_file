#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

store_vars() {
  for LINE in `cat "${1}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do ELINE=`echo "$LINE" | sed 's|"|\\\"|g' | sed "s|'|\\\'|g" | sed 's_|_\\\|_g'` ; eval "$LINE" ; eval "echo \"$ELINE\"" >> "${tmpfile}.var" ; done
}

[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "SSH utility not found, exiting" && exit 1
RSYNC=`which rsync 2>/dev/null`

possible_options="cluster help region verbose flavor role ip test dry cloud timestamp"
commflag=0
for s_option in "${@}"
do
  case ${s_option} in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    command="$command ${s_option}"
    exit 1
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      commflag=1
      command="${s_option}"
    fi
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}"
  done
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options> <local path> <remote path>"
  echo 
  echo "Without options <local path> will be copied to all servers from servers.list's path"
  echo
  echo "Options:"
  echo
  echo "  --cluster=clustername    - the command will be run on all servers"
  echo "                             from this cluster."
  echo "  --region=region          - the command will be run on all servers"
  echo "                             from this region."
  echo "  --verbose                - shows each server details before running"
  echo "                             the command."
  exit 0
fi
source "${rpath}/../conf/mon.conf"
source "${rpath}/../conf/deployment.conf"
source "${rpath}/../conf/cloud.conf"
[ -n "$cloud" ] || cloud=$CLOUD
[ -n "$cloud" ] || cloud=common
[ -n "$M_ROOT" ] || M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud/${cloud}:${M_ROOT}/helpers:${PATH}

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
install -d ${TMPDIR}/deployment/
IFS1=$IFS
IFS='
'
if [ "X$command" != "X" ] ; then
  from=${command%% *}
  [ -z "$role" ] && [ -n "$cluster" ] && role=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f10`
  if [ -z "$cluster" ] ; then
    if [ -z "$role" ] ; then
      if [ -n "$M_ROLE" ] ; then
        role=$M_ROLE
        cluster=$M_CLUSTER
      fi
      # Still no cluster??
      if [ -z "$cluster" ] ; then
        echo "None of ip, role, cluster is defined."
        exit 1
      fi
    else
      cluster=`cat "${rpath}/../conf/clusters.conf" | grep -v ^# | grep -v ^$ | cut -d'|' -f1,10 | grep \|${role}$ | cut -d'|' -f1`
      [ -z "$cluster" ] && echo "Cluster not defined for role $role" && exit 1
    fi
  fi
  [ -z "$flavor" ] && flavor=`cat "${rpath}/../conf/clusters.conf" | grep -v ^# | grep -v ^$ | cut -d'|' -f10,11 | grep ^${role}\| | cut -d'|' -f2`
  [ -n "$verbose" ] && echo "### Reading configuration from ${ROLES_ROOT}/${role}/role.conf"
  [ -f "${ROLES_ROOT}/${role}/role.conf" ] && store_vars "${ROLES_ROOT}/${role}/role.conf" && source "${tmpfile}.var"
  if [ -f "$from" ] ; then
    fullfrom=$from
  else
    if [ -f "${ROLES_ROOT}/${role}/${flavor}/files/$from" ] ; then
      fullfrom="${ROLES_ROOT}/${role}/${flavor}/files/${from}"
    else
      echo "Neither $from nor ${ROLES_ROOT}/${role}/${flavor}/files/$from is not a file or file not found"
      exit 1
    fi
  fi
  tmpfile=${TMPDIR}/deployment/`echo $fullfrom | sed 's|/|_|g'`
  rm -f "$tmpfile" 2>/dev/null

  cat "$fullfrom" | sed "s|\\$|\\\\$|g;s|\%\(.*\)\%|$\{\1\}|g" | \
  sed 's|"|\\\"|g' | \
  sed 's|`|\\\`|g' >> "${tmpfile}.orig"

  for LINE in `cat "${tmpfile}.orig"` ; do a=`eval "echo \"$LINE\""` ; [ $? -eq 0 ] && [ -n "$a" ] && echo "$a" >> "${tmpfile}" || echo "$LINE" >> "${tmpfile}" ; done
  to=${command#* }
  if [ -d "$to" ] ; then
    to=${to%/}/${from##*/}
  fi
  [ -n "$verbose" ] && echo "### Deploying file $from to $to"
  if [ -n "$test" -o -n "$dry" ] ; then
    cat "${tmpfile}"
  else
    for cl in `echo $cluster | tr ',' ' '` ; do
      for server in `cat "${rpath}/../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*#` ; do
        IP=${server%%|*}
        if [ -n "$ip" ] ; then
          [ "X$ip" == "X$IP" ] || continue
        fi
        KEY=`echo $server | cut -d'|' -f2`
        if [ -n "$region" ] ; then
          REGION=`echo $server | cut -d'|' -f3`
          [ "X$REGION" == "X$region" ] || continue
        fi
        if [ -n "$cl" ] ; then
          CLUSTER=`echo $server | cut -d'|' -f5`
          [ "X$CLUSTER" == "X$cl" ] || continue
        fi
        if [ "X$verbose" == "Xyes" ] ; then
          echo
          echo "### Server: $server"
          echo
        fi
        if [ `echo $IP | grep -c "$localip"` -ne 0 ] ; then
          cp -up $tmpfile $to
        else
          [ -f "${rpath}/../keys/$KEY" ] || KEY="${KEY}.pem"
          [ -f "${rpath}/../keys/$KEY" ] || (echo "Key not found for IP $IP" && continue)
          cloudsync --ip=$IP "$tmpfile" "${to}"
        fi
      done
    done
  fi
  rm -f "$tmpfile"*
fi
IFS=$IFS1

