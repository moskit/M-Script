#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "SSH utility not found, exiting" && exit 1
RSYNC=`which rsync 2>/dev/null`
possible_options="cluster help region verbose flavor"
commflag=0
for s_option in "${@}"
do
  case ${s_option} in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    command="$command ${s_option}"
    exit 1
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      commflag=1
      command="${s_option}"
    fi
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}"
  done
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options> <local path> <remote path>"
  echo 
  echo "Without options <local path> will be copied to all servers from servers.list's path"
  echo
  echo "Options:"
  echo
  echo "  --cluster=clustername    - the command will be run on all servers"
  echo "                             from this cluster."
  echo "  --region=region          - the command will be run on all servers"
  echo "                             from this region."
  echo "  --verbose                - shows each server details before running"
  echo "                             the command."
  exit 0
fi
[ -n "$flavor" ] || flavor=common
source "${rpath}/../conf/deployment.conf"
M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud:${M_ROOT}/cloud/ec2:${M_ROOT}/helpers:${PATH}
source "${rpath}/../conf/deployment.conf"
source "${ROLES_ROOT}/${cluster}/role.conf"
[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
install -d /tmp/m_script/deployment/
IFS1=$IFS
IFS='
'
if [ "X$command" != "X" ] ; then
  from=${command%% *}
  [ -f "${ROLES_ROOT}/${cluster}/${flavor}/files/$from" ] || (echo "${ROLES_ROOT}/${cluster}/${flavor}/files/$from is not a file or file not found" && exit 1)
  fullfrom="${ROLES_ROOT}/${cluster}/${flavor}/files/${from}"
  tmpfile=/tmp/m_script/deployment/`echo $fullfrom | sed 's|/|_|g'`
  rm -f "$tmpfile"
  for LINE in `cat "$fullfrom"` ; do
    eval echo $LINE | sed "s|\%\(.*\)\%|\1|" >> "$tmpfile"
  done
  to=${command#* }
  if [ -d "$to" ] ; then
    to=${to%/}/${from##*/}
  fi
  [ -n "$verbose" ] && echo "### Deploying $from to $to"
  for server in `cat "${rpath}/../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*#` ; do
    IP=${server%%|*}
    KEY=`echo $server | cut -d'|' -f2`
    if [ -n "$region" ] ; then
      REGION=`echo $server | cut -d'|' -f3`
      [ "X$REGION" == "X$region" ] || continue
    fi
    if [ -n "$cluster" ] ; then
      CLUSTER=`echo $server | cut -d'|' -f5`
      [ "X$CLUSTER" == "X$cluster" ] || continue
    fi
    if [ "X$verbose" == "Xyes" ] ; then
      echo
      echo "### Server: $server"
      echo
    fi
    if [ `echo $IP | grep -c "$localip"` -ne 0 ] ; then
      cp -up $tmpfile $to
    else
      $RSYNC -e "$SSH -i ${rpath}/../keys/${KEY}.pem -o StrictHostKeyChecking=no" $tmpfile ${IP}:${to} || `which scp` -i ${rpath}/../keys/${KEY}.pem -o StrictHostKeyChecking=no $tmpfile ${IP}:${to}
    fi
  done
fi
IFS=$IFS1

