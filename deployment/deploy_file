#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

store_vars() {
  if [ -f "${tmpfile}.var" ]; then
    [ -n "$verbose" ] && echo "Reading existing variables"
    source "${tmpfile}.var"
  fi
  [ -n "$verbose" ] && echo "Sourcing $1"
  for LINE in `cat "${1}" | grep -v ^# | grep -v ^$ | grep -v ^[[:space:]]*#` ; do
    [ -n "$debug" ] && echo "  == $LINE"
    ELINE=`echo "$LINE" | sed 's|"|\\\"|g' | sed "s|'|\\\'|g" | sed 's_|_\\\|_g'`
    [ -n "$debug" ] && echo "  << $ELINE"
    # This conditional evaluation below is a workaround for hard nuts like pipes
    # inside sub-shells. More complex constructs involving both sub-shell and 
    # non-sub-shell expression in a single line both with pipes will probably 
    # not work. Just avoid such things.
    eval "$LINE" 2>/dev/null
    eval $(eval "echo \"$LINE\"") 2>/dev/null
    if [ $? -eq 0 ]; then
      [ -n "$debug" ] && echo "evaluating plain line"
      eval "echo \"$LINE\"" >> "${tmpfile}.var"
    else
      eval "$ELINE" 2>/dev/null
      eval $(eval "echo \"$ELINE\"") 2>/dev/null
      if [ $? -eq 0 ]; then
        [ -n "$debug" ] && echo "evaluating converted line"
        eval "echo \"$ELINE\"" >> "${tmpfile}.var"
      else
        echo -e "ERROR: both plain and converted lines evaluation failed for this line:\n\n$LINE\n\n"
        exit 1
      fi
    fi
    [ -n "$debug" ] && echo "  >> `tail -1 "${tmpfile}.var"`"
  done
}

find_source() {
  if [ -f "$from" ] ; then
    fullfrom=$from
  else
    if [ -f "${ROLES_ROOT}/${role}/${flavor}/files/$from" ] ; then
      fullfrom="${ROLES_ROOT}/${role}/${flavor}/files/${from}"
    else
      echo -n "${rcommand}: neither $from nor ${ROLES_ROOT}/${role}/${flavor}/files/$from is found, "
      if [[ "$flavor" != "common" ]] ; then echo -n "guessing flavor=common ... "
        if [ -f "${ROLES_ROOT}/${role}/common/files/$from" ] ; then
          echo "found"
          fullfrom="${ROLES_ROOT}/${role}/common/files/${from}"
        else
          echo -n "not found ... "
          notfound=1
        fi
      fi
      if [ -n "$notfound" ] ; then
        echo -n "checking if another role is included ... "
        [ -n "$ROLEINCL" ] && echo -n "included role $ROLEINCL found ... "
        if [[ "$role" != "$ROLEINCL" ]] ; then
          if [ -f "${ROLES_ROOT}/${ROLEINCL}/${flavor}/files/$from" ] ; then
            fullfrom="${ROLES_ROOT}/${ROLEINCL}/${flavor}/files/$from"
            echo "the file is found in included role ${ROLEINCL} ... good"
            realrole=$ROLEINCL
          elif [ -f "${ROLES_ROOT}/${ROLEINCL}/common/files/$from" ] ; then
            fullfrom="${ROLES_ROOT}/${ROLEINCL}/common/files/$from"
            echo "the file is found in included role ${ROLEINCL} ... good"
            realrole=$ROLEINCL
          else
            echo "file not found, giving up"
            exit 1
          fi
        fi
        unset notfound
      fi
    fi
  fi

}

prepare_file() {
  [ -z "$tmpfile" ] && echo -e "\n*** Full path to the source file not found!\n\n" && exit 1
  [ -f "${ROLES_ROOT}/${role}/role.conf" ] && store_vars "${ROLES_ROOT}/${role}/role.conf"
  source "${tmpfile}.var"
  rm -f "${tmpfile}" "${tmpfile}.orig"
  cat "$fullfrom" | sed 's|}\%|}\%\\\n|g' | \
    sed "s|\\$|\\\\$|g;s|\%{\(.*\)}\%|$\{\1\}|g" | \
    sed 's|\\"|\\\\"|g' | \
    sed 's|"|\\\"|g' | \
    sed 's|`|\\\`|g' >> "${tmpfile}.orig"

  [ -n "$debug" ] && echo -e "\n --- TMP FILE ---\n\n" && cat "${tmpfile}.orig" && echo -e " --- END OF TMP FILE ---\n\n --- TMP FILE w/vars substituted ---\n\n"

  for LINE in `cat -E "${tmpfile}.orig"` ; do
    if [[ `echo $LINE | grep -c '\\\\$$'` -gt 0 ]]; then
      KEEP="${KEEP}`echo "$LINE" | sed 's|\\\\$$||'`"
      continue
    else
      LINE="${KEEP}`echo $LINE | sed 's|\$$||'`"
      unset KEEP
      a=`eval "echo \"$LINE\"" 2>>"${rpath}/../deploy.log"`
      if [ $? -eq 0 ] && [ -n "$a" ]; then
        echo "$a" >> "${tmpfile}"
      else
        echo "$LINE" >> "${tmpfile}"
      fi
      [ -n "$debug" ] && tail -1 "${tmpfile}" || true
    fi
  done
}

[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "SSH utility not found, exiting" && exit 1
RSYNC=`which rsync 2>/dev/null`

possible_options="cluster help region verbose debug flavor role ip test dry cloud timestamp"
commflag=0
for s_option in "${@}"
do
  case ${s_option} in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    command="$command ${s_option}"
    exit 1
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      commflag=1
      command="${s_option}"
    fi
    ;;
  esac
  for option in `echo $possible_options`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
done
if [ "X$help" == "Xyes" ] ; then
  cat <<"EOF"
Usage: ${0##*/} <options> <local path> <remote path>"

Deploys files to remote servers. Substitutes variables marked down like this:
  
  %{VAR1}%

Without options <local path> will be deployed to all servers from servers.list's path

Options:"

  --cluster=clustername    - the command will be run on all servers
                             from this cluster.
  --region=region          - the command will be run on all servers
                             from this region.
  --verbose                - shows each server details before running
                             the command.
  --debug                  - debug. Implies --verbose.

EOF
  exit 0
fi

source "${rpath}/../conf/mon.conf"
source "${rpath}/../conf/deployment.conf"
source "${rpath}/../conf/cloud.conf"
[ -n "$debug" ] && verbose="yes"
[ -n "$cloud" ] || cloud=$CLOUD
[ -n "$cloud" ] || cloud=common
[ -n "$M_ROOT" ] || M_ROOT=$(cd "${rpath}/../" && pwd)
export PATH=${M_ROOT}/deployment:${M_ROOT}/cloud/${cloud}:${M_ROOT}/helpers:${PATH}

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
install -d ${TMPDIR}/deployment/
IFS1=$IFS
IFS='
'
if [ "X$command" != "X" ] ; then
  from=${command%% *}
  [ -z "$role" ] && [ -n "$cluster" ] && role=`grep ^$cluster\| "${rpath}/../conf/clusters.conf" | cut -d'|' -f10`
  if [ -z "$cluster" ] ; then
    if [ -z "$role" ] ; then
      if [ -n "$M_ROLE" ] ; then
        role=$M_ROLE
        cluster=$M_CLUSTER
      fi
      # Still no cluster??
      if [ -z "$cluster" ] ; then
        echo "None of ip, role, cluster is defined."
        exit 1
      fi
    else
      cluster=`cat "${rpath}/../conf/clusters.conf" | grep -v ^# | grep -v ^$ | cut -d'|' -f1,10 | grep \|${role}$ | cut -d'|' -f1`
      [ -z "$cluster" ] && echo "${rcommand}: cluster not defined for role $role" && exit 1
    fi
  fi
  [ `cat "${rpath}/../servers.list" | grep -v ^$ | grep -v  ^# | grep -v ^[[:space:]]*# | cut -d'|' -f5 | grep -c "$cluster"` -eq 0 ] && [ -z "$test" -a -z "$dry" ] && echo "${rcommand}: no servers found in cluster $cluster" && exit 1
  [ -z "$flavor" ] && flavor=`cat "${rpath}/../conf/clusters.conf" | grep -v ^# | grep -v ^$ | cut -d'|' -f10,11 | grep ^${role}\| | cut -d'|' -f2`
  [ -n "$verbose" ] && echo "### Reading configuration from ${ROLES_ROOT}/${role}/role.conf"

  find_source
  # fullfrom and realrole are now defined
  tmpfile=${TMPDIR}/deployment/`echo $fullfrom | tr '/' '_'`
  rm -f "$tmpfile" "${tmpfile}.orig" 2>/dev/null
    
  [ -f "${ROLES_ROOT}/common/role.conf" ] && store_vars "${ROLES_ROOT}/common/role.conf"
  [ -n "$realrole" ] && [ -f "${ROLES_ROOT}/${realrole}/role.conf" ] && store_vars "${ROLES_ROOT}/${realrole}/role.conf"
  [ -f "${ROLES_ROOT}/${role}/role.conf" ] && store_vars "${ROLES_ROOT}/${role}/role.conf"

  to=${command#* }
  [ -n "$verbose" ] && echo "### Deploying file $from to $to"

  if [ -n "$test" -o -n "$dry" ] ; then
    # some ip, just to fill the vars
    export ip="10.10.10.10"
    prepare_file
    cat "${tmpfile}"
  else
    if [ -n "$ip" ] ; then
    # Single destination: region, cluster, cloud are ignored
      if [ `echo $ip | grep -c "^$localip$"` -ne 0 ] ; then
        cp -up $tmpfile $to
      else
        KEY=`cat "${rpath}/../servers.list" | grep ^$ip\| | cut -d'|' -f2`
        REGION=`cat "${rpath}/../servers.list" | grep ^$ip\| | cut -d'|' -f3`
        CLUSTER=`cat "${rpath}/../servers.list" | grep ^$ip\| | cut -d'|' -f5`
        [ -f "${rpath}/../keys/$KEY" ] || KEY="${KEY}.pem"
        [ -f "${rpath}/../keys/$KEY" ] || (echo "${rcommand}: key not found for IP $ip" && exit 1)
        if [ `$SSH -i "${rpath}/../keys/$KEY" $ip test -d "$to"` ] ; then
          to=${to%/}/${from##*/}
        elif [ ! `$SSH -i "${rpath}/../keys/$KEY" $ip test -d "${to%/*}"` ] ; then
          $SSH -i "${rpath}/../keys/$KEY" $ip install -d "${to%/*}"
        fi
        prepare_file
        cloudsync --ip=$ip "$tmpfile" "${to}"
      fi
    else
    # Multiple destinations
      for cl in `echo $cluster | tr ',' ' '` ; do
        for server in `cat "${rpath}/../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*#` ; do
          IP=${server%%|*}
          KEY=`echo $server | cut -d'|' -f2`
          if [ -n "$region" ] ; then
            REGION=`echo $server | cut -d'|' -f3`
            [ "X$REGION" == "X$region" ] || continue
          fi
          if [ -n "$cl" ] ; then
            CLUSTER=`echo $server | cut -d'|' -f5`
            [ "X$CLUSTER" == "X$cl" ] || continue
          fi
          if [ "X$verbose" == "Xyes" ] ; then
            echo
            echo "### Server: $server"
            echo
          fi
          if [ `echo $IP | grep -c "^$localip$"` -ne 0 ] ; then
            cp -up $tmpfile $to
          else
            [ -f "${rpath}/../keys/$KEY" ] || KEY="${KEY}.pem"
            [ -f "${rpath}/../keys/$KEY" ] || (echo "${rcommand}: key not found for IP $IP" && continue)
            if [ `$SSH -i "${rpath}/../keys/$KEY" $IP test -d "$to"` ] ; then
              to=${to%/}/${from##*/}
            fi
            ip=$IP
            prepare_file
            cloudsync --ip=$IP "$tmpfile" "${to}"
          fi
        done
      done
    fi
  fi
  rm -f "$tmpfile"*
fi
IFS=$IFS1

