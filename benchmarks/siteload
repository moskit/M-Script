#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand="${rpath##*/}"
rpath="${rpath%/*}"
[ -n "$M_ROOT" ] || M_ROOT="${rpath%/*}"
#*/

CURL=`which curl 2>/dev/null`
[ "X$CURL" == "X" ] && echo "Curl not found" && exit 1

function randword() {
  i=`echo $RANDOM | sed 's|.|& |g'` ; j=`expr $RANDOM / 11000 + 1`; for n in $i ; do l=`expr $n \* $j` ; printf "${aa[$l]}" ; done ; printf "\n"
}

possible_options="total concurrency scenario randomurl randomword verbose scenariodelay url"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$help" ] && echo -e "\nUsage: $rcommand <options>\n\n    Possible options: $possible options\n"

$randomword && aa=( a a b c d e e f g h i j k l m n n o o p q r s t u v w x y z )

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP/benchmark"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"
declare -i a
rm -f "$M_TEMP"/*log 2>/dev/null
cycles=`expr $total / $concurrency`
[ $cycles -eq 0 ] && echo "Total must be greater than or equal to concurrency" && exit 1
goon=true
curlog=/dev/null

if [ -n "$randomurl" ]; then
  [ ! -f "$randomurl" ] && echo "No URLs file found" && exit 1
  urln=`cat "$randomurl" | wc -l`
  urlr=$((RANDOM%$urln))
fi
if [ -n "$scenario" ]; then
  [ ! -f "$scenario" ] && echo "No scenario file found" && exit 1
  scqn=`cat "$scenario" | grep -v ^$ | grep -v ^# | grep -v [[:space:]]*# | wc -l`
  [ -n "$scenariodelay" ] && ccdelay=`expr 5 \* $scqn \* $scenariodelay` || ccdelay=`expr 5 \* $scqn`
fi
activecycles=1
while true ; do
#  [ -n "$allcycles" ] && unset goon
  for ((n=1; n<=$cycles; n++)) ; do
    [ $activecycles -eq 0 ] && echo "Preparing..."
    while [ $activecycles -eq 0 ]; do
      activecycles=`ls "$M_TEMP"/c*.log 2>/dev/null|wc -l`
      sleep 1
    done
    activecycles=`ls "$M_TEMP"/c*.log 2>/dev/null|wc -l`
    finished=`cat "$M_TEMP"/c*.log 2>/dev/null|wc -l` || finished=0
    running=`expr $activecycles \* $concurrency - $finished`
    if [[ $running -ge $concurrency ]] ; then
      echo "   concurrency reached"
      sleep $ccdelay
    else
      if [ -n "$allcycles" ] ; then
        goon=false
      else
        if [ -n "$scenario" ]; then
          echo -n "Starting scenarios...   "
          for ((k=1; k<=$concurrency; k++)) ; do
            echo "   $n/$k start"
            ts=0
            while read line ; do
              t=`(time -p (eval "$line" >>$curlog 2>&1 && printf "." >> "$M_TEMP"/s.log || printf "." >> "$M_TEMP"/e.log)) 2>&1 | grep 'real' | cut -d' ' -f2`
              [ -n "$scenariodelay" ] && sleep $scenariodelay
              ts=`echo "scale=2; $ts + $t" | bc`
            done<"$scenario"
            echo $ts >> "$M_TEMP"/c${n}.log
            echo "   $n/$k finish"
          done &
        else
          for ((k=1; k<=$concurrency; k++)) ; do
            if $randomword ; then
              word=`randword`
            fi
            if [ -n "$randomurl" ]; then
              url=`head -n $urlr "$randomurl" "$randomurl" | tail -1`
            fi
            t=`(time -p (curl -s "$url" && printf "." >> "$M_TEMP"/s.log || printf "." >> "$M_TEMP"/e.log)) 2>&1 | grep 'real' | cut -d' ' -f2`
            echo $t >> "$M_TEMP"/c${n}.log
            printf "."
          done &
        fi
      fi
    fi
    # needed to avoid burst-like requests number growth
    sleep 1
    goon=false
    if [ -e "$M_TEMP/c1.log" ] && [ `ls "$M_TEMP"/c*.log|wc -l` -eq $cycles ] ; then
      allcycles=1
      for log in "$M_TEMP"/c*.log ; do
        if [ `cat $log|wc -l` -lt $concurrency ] ; then
          [ -n "$scenario" ] && echo -n "*"
          goon=true
        fi
      done
      if $goon ; then
        #printf "=>"
        continue
      else
        cat "$M_TEMP"/c*.log >> "$M_TEMP"/t.log
        rm -f "$M_TEMP"/c*.log
        break
      fi
    fi
  done
  if ! $goon ; then echo "Waiting for running tests to finish..." && break ; fi
done
activecycles=0
while true ; do
  while [ $activecycles -eq 0 ]; do
    activecycles=`ls "$M_TEMP"/c*.log 2>/dev/null|wc -l`
    sleep 1
  done
  finished=`cat "$M_TEMP"/c*.log 2>/dev/null|wc -l` || finished=0
  running=`expr $activecycles \* $concurrency - $finished`
  if [[ $running -gt 0 ]] ; then
    echo "still running:  $running"
    sleep 5
  else
    break
  fi
done
totaltime=0
average=0
mintime=0
[ -e "$M_TEMP"/t.log ] && mintime=`head -1 "$M_TEMP"/t.log`
maxtime=$mintime
success=0
[ -e "$M_TEMP"/s.log ] && success=`cat "$M_TEMP"/s.log | wc -m`
error=0
[ -e "$M_TEMP"/e.log ] && error=`cat "$M_TEMP"/e.log | wc -m`
number=`cat "$M_TEMP"/t.log|wc -l`
while read tt ; do
  totaltime=`scale=2; echo "$totaltime + $tt" | bc`
  [[ `echo "$mintime >= $tt" | bc` -eq 1 ]] && mintime=$tt
  [[ `echo "$maxtime <= $tt" | bc` -eq 1 ]] && maxtime=$tt
done < "$M_TEMP"/t.log
averagetime=`scale=2; echo "$totaltime / $number" | bc`
persecond=`scale=2; echo "$success / ($totaltime + 0.1)" | bc`

if [ -n "$scenario" ]; then
  
  [ -n "$scenariodelay" ] && scpersecond=`scale=2; echo "$success / ($totaltime + ($scenariodelay * $scqn - 1))" | bc`
  echo "Total scenarios: $number"
else
  echo "Total queries: $number"
fi
echo "Successful queries: $success"
echo "Failed queries: $error"
echo "Total time: $totaltime"
echo "Average query time: $averagetime"
echo "Shortest query: $mintime"
echo "Longest query: $maxtime"

if [ -n "$scenario" ]; then
  echo "QPS based on total request time: $persecond"
  [ -n "$scenariodelay" ] && echo "QPS based on overall time: $scpersecond"
else
  echo "QPS: $persecond"
fi

