#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand="${rpath##*/}"
rpath="${rpath%/*}"
[ -n "$M_ROOT" ] || M_ROOT="${rpath%/*}"
#*/

# no need to use this script outside msh
[ -z "$ROLES_ROOT" ] && echo "ROLES_ROOT not defined" && exit 1

possible_commands="help list clone create edit show set"
possible_subcommands="list:meta,metas,tasks,scripts,commands,files,roles edit:meta,task,script,command,file show:meta,task,script,command,file set:cluster"
possible_options="role cloud cluster flavor method all strip"

printcol() {
  if [ -n "$1" ] ; then
    l=`expr $col - 1`
    str=`echo "$1" | cut -b 1-$l`
    printf "%-${l}s" $str
  else
    printf "%${col}s"
  fi
}

role_required() {
  if [ -n "$role" ]; then
    if [ -e "$ROLES_ROOT/roles/$role/role.rc" ]; then
      source "$ROLES_ROOT/roles/$role/role.rc"
    fi
    if [ -z "$cluster" ] && [ "_$1" != "_noclusterok" ]; then
      if [ `cat "$M_ROOT/conf/clusters.conf" | cut -d'|' -f10 | grep "^$role$" | wc -l` -eq 0 ]; then
        echo "Warning: unable to associate a cluster with this role ($role). Define OS flavor either using option --flavor or as an environment variable."
      fi
    fi
  else
    echo "role must be defined for this command (use cr <role> or option --role=<role>)" && exit 1
  fi
}

declare -i ppn
ppn=1

commfound=false
subcommfound=false

IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  case $s_option in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes'
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=$s_option
    s_optname=''
    s_optarg=''
    case $ppn in
      1)
        for comm in ${possible_commands// /-}; do
          if [ "_$s_param" == "_$comm" ]; then
            if $commfound ; then
              echo "Only one command can be executed!"
              echo "Commands are: $possible_commands"
              exit 1
            else
              found=true
              commfound=true
            fi
          fi
        done
        if ! $found ; then 
          echo "Unknown command: $s_param"
          exit 1
        fi
        command1=$s_param
        ;;
      2)
        for subcomm in ${possible_subcommands// /-}; do
          [ "_${subcomm%%:*}" == "_$command1" ] && subcommands=${subcomm#*:}
          for sub in ${subcommands//,/-}; do
            if [ "_$s_param" == "_$sub" ]; then
              if $subcommfound ; then
                echo "Only one subcommand can be executed!"
                echo "Subcommands for $command1 are: ${subcommands}"
                exit 1
              else
                found=true
                subcommfound=true
              fi
            fi
          done
          unset subcommands
        done
        if ! $found ; then 
          param1=$s_param
        else
          command2=$s_param
        fi
        ;;
      3)
        if [ -z "$param1" ] ; then
          param1=$s_param
        else
          param2=$s_param
        fi
        ;;
      4)
        if [ -z "$param2" ] ; then
          param2=$s_param
        else
          echo "Wrong number of positional parameters!"
          exit 1
        fi
        ;;
      *)
        echo "Wrong number of positional parameters!"
        exit 1
        ;;
    esac
    shift
    ppn+=1
    ;;
  esac
  for option in `echo $possible_options | sed 's| |-|g'`; do
    if [ "_$s_optname" == "_$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
done

[ -z "$cloud" ] && cloud=$CLOUD
source "$M_ROOT/conf/clouds/${cloud}.conf" || exit 99
[ -z "$ENV_NAME" ] && ENV_NAME="local"

if [ "_$command1" == "_clone" ]; then 
  [ -z "$method" ] && echo -e "Using default method: copy\n    (other available methods are: symlink, copywithlinks - see 'role --help' for details)" && method="copy"
  case $method in
    copy|cp)
      methodcommand=`which cp 2>/dev/null` ; methodcommand="`echo -e "$methodcommand\n-u\n-L"`"
      ;;
    link|symlink)
      methodcommand=`which ln 2>/dev/null` ; methodcommand="`echo -e "$methodcommand\n-s"`"
      ;;
    copywithlinks|cpwithlinks)
      methodcommand=`which cp 2>/dev/null` ; methodcommand="`echo -e "$methodcommand\n-u\n-d"`"
      ;;
  esac
  [ -z "$methodcommand" ] && echo "Command not found for method ${method}, aborting" && exit 1
fi

IFS='
'
case $command1 in
  list)
    case $command2 in
      meta|metas|tasks)
        role_required noclusterok
        [ -z "$param1" ] && param1="$role"
        [ -z "$param1" ] && echo "Role is empty" && exit 1
        COL=`tput cols 2>/dev/null`
        [ -n "$COL" ] && col=$((COL/3)) || col=26
        printcol "Meta"
        printcol "Scripts"
        echo "Includes"
        printf "%${COL}s\n" | tr ' ' '-'
        for m in `find "$ROLES_ROOT/roles/$param1" -mindepth 1 -maxdepth 1 -name "*\.meta" | sed 's|.meta$||'` ; do
          ml=`cat "${m}.meta" | grep -vE "^$|^#|^[[:space:]]#"`
          m=${m##*/}
          sn=`echo "$ml" | wc -l`
          for sc in $ml ; do
            scf="${sc#* }" ; scf="${scf% *}" ; scf=`eval "echo \"$scf\""`
            [ -e "$ROLES_ROOT/roles/$scf" ] || scf=$role/$scf
            [ -e "$ROLES_ROOT/roles/$scf" ] || scerr+=(" *** Script \"$ROLES_ROOT/roles/$scf\" not found")
          done
          in=`echo "$ml" | awk '{print $2}' | awk -F'/' '{ if ($3 != "") print $1 }' | grep -vE "^\\\\\\$role$|^$param1$" | sort | uniq`
          if [ -z "$in" ] ; then
            printcol "$m"
            echo "$sn"
          else
            for ins in $in ; do
              printcol "$m"
              printcol "$sn"
              echo "$ins"
              unset m sn
            done
          fi
          for ((i=0; i<${#scerr[*]}; i++)) ; do
            [ -n "$M_COLOR" ] && echo -n -e "$CONTR_SEQ$FG_RED"
            echo "${scerr[$i]}"
            [ -n "$M_COLOR" ] && echo -n -e "$UNSET_COLOR"
          done
          unset scerr
        done
      ;;
      scripts|commands)
        role_required noclusterok
        [ -z "$param1" ] && param1="$role"
        [ -z "$param1" ] && echo "Role is empty" && exit 1
        COL=`tput cols 2>/dev/null`
        [ -n "$COL" ] && col=$((COL/2)) || col=40
        col1=$col
        printcol "Script"
        [ -n "$COL" ] && col=$((COL/4)) || col=20
        col2=$col
        printcol "Meta"
        echo "Role"
        printf "%${COL}s\n" | tr ' ' '-'
        if [ -n "$flavor" ]; then
          allscripts=( `find "$ROLES_ROOT/roles/$param1/$flavor/" -maxdepth 1 -type f -o -type l ! -name "\.*"` )
          allscripts+=( `find "$ROLES_ROOT/roles/$param1/common/" -maxdepth 1 -type f -o -type l ! -name "\.*"` )
        else
          allscripts=( `find "$ROLES_ROOT/roles/$param1/"*/ -maxdepth 1 -type f -o -type l ! -name "\.*"` )
        fi
        for sc in ${allscripts[*]} ; do
          scr="${sc/$ROLES_ROOT\/roles\//}" && scr="${scr/$param1\//}"
          for m in `find "$ROLES_ROOT/roles/$param1" -mindepth 1 -maxdepth 1 -name "*\.meta"` ; do
            [ `grep -c "${sc##*/}$" "$m"` -gt 0 ] && mn=${m##*/} && mi+=( "${mn%.meta}" )
          done
          [ -z "$mi" ] && mi="unused"
          for mis in ${mi[*]} ; do
            if [ "$mis" == "unused" ] ; then
              if [ -n "$all" ]; then
                [ -n "$M_COLOR" ] && echo -n -e "$CONTR_SEQ$FG_MAGENTA"
                col=$col1
                printcol "$scr"
                echo "not used"
                [ -n "$M_COLOR" ] && echo -n -e "$UNSET_COLOR"
                unset scr
              fi
            else
              for r in `grep "${sc##*/}" "$ROLES_ROOT/roles/$param1/${mis}.meta" | awk '{print $2}' | awk -F'/' '{ if ($3 != "") {print $1} else {print "$role"} }' | sort | uniq` ; do
                r=`eval "echo \"$r\""`
                col=$col1
                printcol "$scr"
                col=$col2
                printcol "$mis"
                echo "$r"
                unset scr mis
              done
            fi
          done
          unset mi
        done
      ;;
      files)
        role_required
        [ -z "$param1" ] && param1="$role"
        [ -z "$param1" ] && echo "Role is empty" && exit 1
        COL=`tput cols 2>/dev/null`
        [ -n "$COL" ] && col=$((COL/2)) || col=36
        printcol "File"
        echo "Script"
        printf "%${COL}s\n" | tr ' ' '-'
        [ -n "$flavor" ] && allfiles=( `find "$ROLES_ROOT/roles/$param1/$flavor/files/" -maxdepth 1 -type f -o -type l ! -name "\.*"` )
        allfiles+=( `find "$ROLES_ROOT/roles/$param1/common/files/" -maxdepth 1 -type f -o -type l ! -name "\.*"` )
        for fl in ${allfiles[*]} ; do
          if [ -n "$flavor" ]; then
            for sc in `find "$ROLES_ROOT/roles/$param1/$flavor/" -maxdepth 1 -type f -o -type l ! -name "\.*"` ; do
              [ -n "`grep -E "deploy_file|cloudsync|cp|scp|rsync" "$sc" | grep "${fl##*/}"`" ] && sci+=("$flavor/${sc##*/}")
            done
          fi
          for sc in `find "$ROLES_ROOT/roles/$param1/common/" -maxdepth 1 -type f -o -type l ! -name "\.*"` ; do
            [ -n "`grep -E "deploy_file|cloudsync|cp|scp|rsync" "$sc" | grep "${fl##*/}"`" ] && sci+=("common/${sc##*/}")
          done
          if [ -n "$sci" ]; then
            for scis in ${sci[*]} ; do
              printcol "${fl##*/}"
              echo "$scis"
              unset fl
            done
          elif [ -n "$all" ]; then
            [ -n "$M_COLOR" ] && echo -n -e "$CONTR_SEQ$FG_MAGENTA"
            printcol "${fl##*/}"
            echo "not used"
            unset fl
            [ -n "$M_COLOR" ] && echo -n -e "$UNSET_COLOR"
          fi
          unset sci
        done
      ;;
      roles|'')
        COL=`tput cols 2>/dev/null`
        [ -n "$COL" ] && col=$((COL/4)) || col=20
        printcol "Role"
        printcol "Cluster"
        printcol "Flavor"
        echo "Image"
        printf "%${COL}s\n" | tr ' ' '-'
        for r in `find $ROLES_ROOT/roles/ -maxdepth 1 -mindepth 1 -type d ! -name ".*"` ; do
          r=${r##*/}
          for cl in `cat $M_ROOT/conf/clusters.conf | grep -vE "^#|^[[:space:]]#|^$" | cut -d'|' -f1,10 | grep \|${r}$ | cut -d'|' -f1` ; do
            printcol "$r"
            printcol "$cl"
            ln=`cat "$M_ROOT/conf/clusters.conf" | grep "^${cl}|"`
            fl=`echo "$ln" | cut -d'|' -f11 | cut -b 1-$col`
            printcol "$fl"
            im=`echo "$ln" | cut -d'|' -f6 | cut -b 1-$col`
            echo "$im"
            unset r
          done
          [ -n "$r" ] && [ -n "$all" ] && echo "$r"
        done
      ;;
      *)
      echo -e "Usage: $rcommand list <metas|scripts|files|roles> <--all>\n"
      ;;
    esac
    ;;
  clone)
    [ -z "$param1" -o -z "$param2" ] && echo "Usage: role clone SOURCE TARGET" && exit 1
    if [ ! -d "$ROLES_ROOT/roles/$param1" ]; then
      if [ ! -d "$param1" ]; then
        echo "Role $param1 not found" && exit 1
      else
        sourcerole="$param1"
      fi
    else
      sourcerole="$ROLES_ROOT/roles/$param1"
    fi
    if [ -d "$ROLES_ROOT/roles/$param2" ]; then
      if [ $(cd -P "$ROLES_ROOT/roles/$param2/../" && pwd) == "$ROLES_ROOT/roles" ]; then
        echo "Role $param2 exists, adding files missing in the target role. Use --all to overwrite existing files."
      else
        echo "Role folder must be a subfolder of ${ROLES_ROOT}/roles. You can change ROLES_ROOT setting in conf/deploy.conf"
        exit 1
      fi
    fi
    for dir in `find "$sourcerole/" -type d` ; do
      newdir=`echo "$dir" | sed "s|^$sourcerole/||"`
      install -d "$ROLES_ROOT/roles/$param2/$newdir"
    done
    for sl in `find "$sourcerole/" -type l` ; do
      nsl=`echo "$sl" | sed "s|$sourcerole/||"`
      f=`readlink $sl`
      if [ "_${f:0:1}" == "_/" ]; then
        if [ "$method" == "link" ]; then
          if [ ! -e "$ROLES_ROOT/roles/$param2/$nsl" -o -n "$all" ]; then
            echo "${sl##*/} is a symlink resolving to an absolute path. Copying the file instead."
            cp -u "$f" "$ROLES_ROOT/roles/$param2/$nsl"
          fi
        fi
      else
        if [ -e "$ROLES_ROOT/roles/$param2/$nsl" -a ! -h "$ROLES_ROOT/roles/$param2/$nsl" ]; then
          echo "Source file $nsl is a symlink, but target exists and is not a symlink. Skipping."
        else
          if [ ! -e "$ROLES_ROOT/roles/$param2/$nsl" -o -n "$all" ]; then
            $methodcommand "$sl" "$ROLES_ROOT/roles/$param2/$nsl"
          fi
        fi
      fi
    done
    for f in `find "$sourcerole/" -type f` ; do
      nf=`echo "$f" | sed "s|$sourcerole/||"`
      if [ ! -e "$ROLES_ROOT/roles/$param2/$nf" -o -n "$all" ]; then
        $methodcommand "$f" "$ROLES_ROOT/roles/$param2/$nf"
      fi
    done
    if [ -e "$ROLES_ROOT/conf/${sourcerole##*/}.${ENV_NAME}.conf" ]; then
      cp "$ROLES_ROOT/conf/${sourcerole##*/}.${ENV_NAME}.conf" "$ROLES_ROOT/conf/${param2}.${ENV_NAME}.conf"
    fi
    ;;
  create)
    declare -a flarr
    [ -n "$param2" ] && echo "Usage: role create NAME" && exit 1
    [ -z "$param1" ] && echo "Usage: role create NAME" && exit 1
    for fl in `find "$ROLES_ROOT/roles/"*/ -maxdepth 1 -type d 2>/dev/null | sed "s|^$ROLES_ROOT/roles/||" | cut -d '/' -f2 | sort | uniq | grep -v ^$` ; do
      flarr+=( "$fl" )
    done
    echo -e "\nChoose existing system flavors from the list and/or add new ones. Existing flavors can be added by their numbers.\n\nExample: 2,4,5,centos7    - will add existing flavors with numbers 2, 4 and 5 and create a new one named centos7\n\nTo have all listed flavors in the new role press Enter\n\n"
    for ((i=0; i<${#flarr[*]}; i++)) ; do
      echo "$((i+1)). ${flarr[$i]}"
    done
    echo
    read -p "Otherwise input flavor numbers, separated by comma: " rolelist
    if [ -z "$rolelist" ] ; then
      for fl in ${flarr[*]} ; do
        install -d "$ROLES_ROOT/roles/$param1/$fl"
      done
    else
      for r in `echo -e "$rolelist" | sed 's|,|\n|g'` ; do
        if [[ $r =~ ^[[0-9]]* ]]; then
          install -d "$ROLES_ROOT/roles/$param1/${flarr[$r-1]}/files"
        else
          install -d "$ROLES_ROOT/roles/$param1/$r/files"
        fi
        install -d "$ROLES_ROOT/roles/$param1/common/files"
      done
    fi
    [ -d "$ROLES_ROOT/conf" ] || mkdir "$ROLES_ROOT/conf"
    echo -e '# Here come the variables, shell format, e.g.:\n# VAR=value\n' > "$ROLES_ROOT/conf/${param1}.${ENV_NAME}.conf"
    ;;
  edit)
    role_required
    [ -z "$param1" ] && [ "_$command2" != "_conf" ] && echo -e "Usage: role edit meta|script|file|conf NAME\n       NAME can be omitted in case of conf" && exit 1
    [ -n "$VISUAL" ] && ED=$VISUAL
    [ -z "$ED" -a -n "$EDITOR" ] && ED=$EDITOR
    [ -z "$ED" ] && echo "Using vim as text editor. Set VISUAL or EDITOR environment variable to another editor if you want" && ED=`which vim 2>/dev/null`
    [ -z "$ED" ] && echo "Editor not found" && exit 1
    case $command2 in
      meta|task)
        [ ! -e "$ROLES_ROOT/roles/$role/${param1}.meta" ] && "Meta $param1 doesn't exist in this role (${role})." && exit 1
        $ED "$ROLES_ROOT/roles/$role/${param1}.meta"
        ;;
      script|command)
        prmarr=( `echo "$param1" | tr '/' '\n'` )
        [ ${#prmarr[*]} -gt 3 ] && echo "Path can't have more than 3 parts (role/flavor/script)" && exit 1
        case ${#prmarr[*]} in
          3) $ED "$ROLES_ROOT/roles/${prmarr[0]}/${prmarr[1]}/${prmarr[2]}" ;;
          2) $ED "$ROLES_ROOT/roles/$role/${prmarr[0]}/${prmarr[1]}" ;;
          1)
          if [ ! -e "$ROLES_ROOT/roles/$role/$flavor/$param1" ]; then
            if [ ! -e "$ROLES_ROOT/roles/$role/common/$param1" ]; then
              echo "$param1 doesn't exist in this role. `[[ "$flavor" == "common" ]] && echo "Flavor 'common' has been" || echo "Flavors '$flavor' and 'common' have been"` searched. Use options --role= and --flavor= to search in other roles and flavors. If it is a new script, use full notation (role/flavor/scriptname) or create it directly: $ED \"$ROLES_ROOT/roles/$role/$flavor/$param1\" or $ED \"$ROLES_ROOT/roles/$role/common/$param1\"." && exit 1
            else
              $ED "$ROLES_ROOT/roles/$role/common/$param1"
            fi
          else
            $ED "$ROLES_ROOT/roles/$role/$flavor/$param1"
          fi
          ;;
        esac
        ;;
      file)
        if [ -h "$ROLES_ROOT/roles/$role/$flavor/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/$flavor/files/$param1"`
        elif [ -h "$ROLES_ROOT/roles/$role/common/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/common/files/$param1"`
        else
          rf="$ROLES_ROOT/roles/$role/$flavor/files/$param1"
        fi
        [ ! -e "$rf" ] && rf="$ROLES_ROOT/roles/$role/common/files/$param1"
        [ ! -e "$rf" ] && echo "File $param1 doesn't exist in this role. Flavors $flavor and common have been searched. Use options --role= and --flavor= to search in other roles and flavors. If you intended to create a new file, just create it directly: $ED \"$ROLES_ROOT/roles/$role/$flavor/files/$param1\" or $ED \"$ROLES_ROOT/roles/$role/common/files/$param1\"." && exit 1
        if [ `file "$rf" | cut -d':' -f2 | grep -c text` -eq 1 ]; then
          $ED "$rf"
        else
          echo "The file seems binary"
        fi
        ;;
      conf)
        [ -d "$ROLES_ROOT/conf" ] || mkdir "$ROLES_ROOT/conf"
        conf="$ROLES_ROOT/conf/${param1##*/}.${ENV_NAME}.conf"
        echo -e "\nEditing file $conf\n"
        [ -e "$conf" ] || echo "No such file, creating"
        $ED "$conf"
        ;;
      *)
        if [ -z "$command2" ] && [ "_$param1" == "_conf" ]; then
          [ -d "$ROLES_ROOT/conf" ] || mkdir "$ROLES_ROOT/conf"
          conf="$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf"
          echo -e "\nEditing file $conf\n"
          [ -e "$conf" ] || echo "No such file, creating"
          $ED "$conf"
        else
          echo -e "Usage: role edit meta|script|file|conf NAME\n       NAME can be omitted in case of conf"
        fi
        ;;
    esac
    ;;
  show)
    role_required
    [ -z "$param1" ] && echo -e "Usage: role show meta|script|file|conf NAME\n       NAME can be omitted in case of conf" && exit 1
    case $command2 in
      meta|task)
        [ ! -e "$ROLES_ROOT/roles/$role/${param1}.meta" ] && "Meta $param1 doesn't exist in this role (${role})." && exit 1
        [ -n "$strip" ] && cat "$ROLES_ROOT/roles/$role/${param1}.meta" | grep -vE '^$|^#|^[[:space:]]#' || cat "$ROLES_ROOT/roles/$role/${param1}.meta"
        ;;
      script|command)
        prmarr=( `echo "$param1" | tr '/' '\n'` )
        [ ${#prmarr[*]} -gt 3 ] && echo "Path can't have more than 3 parts (role/flavor/script)" && exit 1
        case ${#prmarr[*]} in
          3) [ -n "$strip" ] && cat "$ROLES_ROOT/roles/${prmarr[0]}/${prmarr[1]}/${prmarr[2]}" | grep -vE '^$|^#|^[[:space:]]#' || cat "$ROLES_ROOT/roles/${prmarr[0]}/${prmarr[1]}/${prmarr[2]}" ;;
          2) [ -n "$strip" ] && cat "$ROLES_ROOT/roles/$role/${prmarr[0]}/${prmarr[1]}" | grep -vE '^$|^#|^[[:space:]]#' || cat "$ROLES_ROOT/roles/$role/${prmarr[0]}/${prmarr[1]}" ;;
          1)
          if [ ! -e "$ROLES_ROOT/roles/$role/$flavor/$param1" ]; then
            if [ ! -e "$ROLES_ROOT/roles/$role/common/$param1" ]; then
              echo "$param1 doesn't exist in this role. `[[ "$flavor" == "common" ]] && echo "Flavor 'common' has been" || echo "Flavors '$flavor' and 'common' have been"` searched. Use options --role= and --flavor= to search in other roles and flavors." && exit 1
            else
              [ -n "$strip" ] && cat "$ROLES_ROOT/roles/$role/common/$param1" | grep -vE '^$|^#|^[[:space:]]#' || cat "$ROLES_ROOT/roles/$role/common/$param1"
            fi
          else
            [ -n "$strip" ] && cat "$ROLES_ROOT/roles/$role/$flavor/$param1" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" || cat "$ROLES_ROOT/roles/$role/$flavor/$param1"
          fi
          ;;
        esac
        ;;
      file)
        if [ -h "$ROLES_ROOT/roles/$role/$flavor/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/$flavor/files/$param1"`
        elif [ -h "$ROLES_ROOT/roles/$role/common/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/common/files/$param1"`
        else
          rf="$ROLES_ROOT/roles/$role/$flavor/files/$param1"
        fi
        [ ! -e "$rf" ] && rf="$ROLES_ROOT/roles/$role/common/files/$param1"
        [ ! -e "$rf" ] && echo "File $param1 doesn't exist in this role. Flavors $flavor and common have been searched. Use options --role= and --flavor= to search in other roles and flavors." && exit 1
        if [ `file "$rf" | cut -d':' -f2 | grep -c text` -eq 1 ]; then
          [ -n "$strip" ] && cat "$rf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" || cat "$rf"
        else
          file "$rf"
        fi
        ;;
      conf)
        conf="$ROLES_ROOT/conf/${param1##*/}.${ENV_NAME}.conf"
        cat "$conf"
        ;;
      *)
        if [ -z "$command2" ] && [ "_$param1" == "_conf" ]; then
          conf="$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf"
          cat "$conf"
        else
          echo -e "Usage: role edit meta|script|file|conf NAME\n       NAME can be omitted in case of conf"
        fi
        ;;
    esac
    ;;
  encrypt)
    role_required
    [ -z "$param1" ] && [ "_$command2" != "_conf" ] && echo -e "Usage: role encrypt file|conf NAME\n       NAME can be omitted in case of conf" && exit 1
    [ -z "$ENCRYPT_METHOD" ] && ENCRYPT_METHOD="aes-128-cbc"
    case $command2 in
      conf)
        ENCRYPT_PASSWORD=`$ENCRYPT_PASSWORD "$M_ROOT"/helpers/encrypt "$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf"`
        ;;
      file)
        if [ -h "$ROLES_ROOT/roles/$role/$flavor/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/$flavor/files/$param1"`
        elif [ -h "$ROLES_ROOT/roles/$role/common/files/$param1" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/common/files/$param1"`
        else
          rf="$ROLES_ROOT/roles/$role/$flavor/files/$param1"
        fi
        [ ! -e "$rf" ] && rf="$ROLES_ROOT/roles/$role/common/files/$param1"
        [ ! -e "$rf" ] && echo "File $param1 doesn't exist in this role. Flavors $flavor and common have been searched. Use options --role= and --flavor= to search in other roles and flavors." && exit 1
        ENCRYPT_PASSWORD=`$ENCRYPT_PASSWORD "$M_ROOT"/helpers/encrypt "$rf"`
        ;;
      *)
        echo -e "Usage: role encrypt file|conf NAME\n       NAME can be omitted in case of conf" && exit 0
        ;;
    esac
    ;;
  decrypt)
    role_required
    [ -z "$param1" ] && [ "_$command2" != "_conf" ] && echo -e "Usage: role decrypt file|conf NAME\n       NAME can be omitted in case of conf" && exit 1
    [ -z "$ENCRYPT_METHOD" ] && ENCRYPT_METHOD="aes-128-cbc"
    case $command2 in
      conf)
        ENCRYPT_PASSWORD=`$ENCRYPT_PASSWORD "$M_ROOT"/helpers/decrypt "$ROLES_ROOT/conf/${role}.${ENV_NAME}.conf"`
        ;;
      file)
        if [ -h "$ROLES_ROOT/roles/$role/$flavor/files/${param1}.enc" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/$flavor/files/${param1}.enc"`
        elif [ -h "$ROLES_ROOT/roles/$role/common/files/${param1}.enc" ]; then
          rf=`readlink -f "$ROLES_ROOT/roles/$role/common/files/${param1}.enc"`
        else
          rf="$ROLES_ROOT/roles/$role/$flavor/files/${param1}.enc"
        fi
        [ ! -e "$rf" ] && rf="$ROLES_ROOT/roles/$role/common/files/${param1}.enc"
        [ ! -e "$rf" ] && echo "File ${param1}.enc doesn't exist in this role. Flavors $flavor and common have been searched. Use options --role= and --flavor= to search in other roles and flavors." && exit 1
        ENCRYPT_PASSWORD=`$ENCRYPT_PASSWORD "$M_ROOT"/helpers/decrypt "$rf"`
        ;;
      *)
        echo -e "Usage: role decrypt file|conf NAME\n       NAME can be omitted in case of conf" && exit 0
        ;;
    esac
    ;;
  set)
    role_required
    [ -z "$param1" ] && echo -e "Usage: role set {variable} {value}" && exit 1
    case $command2 in
      cluster)
        # TODO: is there a way to execute it in parent shell automatically?
        export M_CLUSTER=$param1
        echo -e "Execute the command below:\nexport M_CLUSTER=$param1"
        ;;
      *)
        echo "Unknown variable to set: $command2"
        ;;
    esac
    ;;
  help)
    cat <<"EOF"

Syntax: role command <sub-command> <args> <--option=value>

  list            - lists all existing roles and some info about them:
                      Cluster: the default cluster for this role
                      Flavor: Linux flavor, default for this role
                      Image: node image ID (if cloud environment is set)
  
    list tasks    - lists all metascripts for the current role or the role set
                    with the --role option and additional info:
                      Scripts: the number of scripts included in this meta
                      Includes: lists other roles which this meta includes
                                  scripts from
    list commands - lists all scripts (not only included in metas) for the role
                    along with the meta they are included into
    list files    - lists all files for the role along with the scripts they are
                    mentioned in
                    
  create          - creates a new role
EOF
    ;;
  *)
    echo "Command $command1 is not implemented yet ;)"
    ;;
esac

exit 0
