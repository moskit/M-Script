#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(cd "$rpath/../" && pwd)
LOG="$M_ROOT/logs/deploy.log"

find_metascript() {
if [ ! -e "$ROLES_ROOT/roles/$metascript" ] ; then
  thescript=${1##*/}
  therest=${1%/*}
  [ "_$thescript" == "_$therest" ] && unset therest
  if [ -z "$therest" ]; then
    # if both role and flavor are defined
    if [ -e "$ROLES_ROOT/roles/$role/$flavor/$thescript" ]; then
      metascript="$role/$flavor/$thescript"
    else
      # if role is known, flavor may be bound to it via cluster configuration
      if [ -n "$role" ]; then
        roleflavor=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -sd'|' -f10,11 | grep "^$role|" | cut -sd'|' -f2`
        if [ -e "$ROLES_ROOT/roles/$role/$roleflavor/$thescript" ]; then
          metascript="$role/$roleflavor/$thescript"
        fi
        # if not in the configured flavor, then it is in 'common'
        if [ -e "$ROLES_ROOT/roles/$role/common/$thescript" ]; then
          metascript="$role/common/$thescript"
        fi
      fi
      if [ -z "$metascript" ]; then
        # last resort
        metascript=$(cd "$ROLES_ROOT/roles"; find -name "$thescript")
      fi
      if [ -z "$metascript" ]; then
        echo "metascript \"$metascript\" not found"
        return 1
      else
        if [ `echo "$metascript" | wc -l` -gt 1 ]; then
          echo "Found more than one scripts with the name ${thescript}:"
          echo "$metascript"
          echo "Please narrow the search conditions"
          return 1
        fi
      fi
    fi
  else
    therole=`eval "echo \"$therest\"" | cut -sd'/' -f1`
    theflavor=`eval "echo \"$therest\"" | cut -sd'/' -f2`
    if [ -z "$therole" ] && [ -z "$theflavor" ]; then
      therest=`eval "echo \"$therest\""`
      [ -d "$ROLES_ROOT/roles/$therest" ] && therole="$therest" || theflavor="$therest"
    fi
    if [ -n "$therole" ]; then
      metascript=$(cd "$ROLES_ROOT/roles"; find "$therole" -name "$thescript")
      if [ -z "$metascript" ]; then
        msfoundinflavor=$(cd "$ROLES_ROOT/roles"; find */"$theflavor" -name "$thescript")
        echo -e -n "Script $metascript not found "
        [ -n "$msfoundinflavor" ] && echo -e "\n  Found: $msfoundinflavor"
        return 1
      fi
    else
      if [ -e "$ROLES_ROOT/roles/$role/$theflavor/$thescript" ]; then
        metascript="$role/$theflavor/$thescript"
      else
        msfoundinflavor=$(cd "$ROLES_ROOT/roles"; find */"$theflavor" -name "$thescript")
        echo -e -n "Script $metascript not found"
        [ -n "$msfoundinflavor" ] && echo -e "\n  Found: $msfoundinflavor"
        return 1
      fi
    fi
  fi
fi
}

genline() {
  if [ -n "$2" ]; then
    metatype=${1%/*}
    metacond=${1#*/}
    shift
  fi
  metascript=$@
  find_metascript "$metascript" || return 1
  case $metatype in
  local)
    echo "local \"$metascript\""
    ;;
  remote)
    echo "remote \"$metascript\""
    ;;
  include)
    IFS='
'
    metascript=`eval "echo $metascript"`
    if [ -n "$metascript" ]; then
      irole=`echo $metascript | cut -sd'/' -f1`
      if [ -e "$ROLES_ROOT/roles/$metascript" ]; then
        metascript="$ROLES_ROOT/roles/$metascript"
      elif [ -e "$ROLES_ROOT/roles/${metascript}.meta" ]; then
        metascript="$ROLES_ROOT/roles/${metascript}.meta"
      # current role is the default
      elif [ -e "$ROLES_ROOT/roles/$role/$metascript" ]; then
        metascript="$ROLES_ROOT/roles/$role/$metascript"
      elif [ -e "$ROLES_ROOT/roles/$role/${metascript}.meta" ]; then
        metascript="$ROLES_ROOT/roles/$role/${metascript}.meta"
      else
        log "metascript $metascript not found"
        unset metascript
      fi
    fi
    if [ -n "$irole" ]; then
      cat "$metascript" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | sed "s|\$role|$irole|;s|\${role}|$irole|" | while read metaline ; do (IFS=$IFSORIG ; ml=`genline $metaline` ; [ -n "$ml" ] && echo "$ml|$irole" >> "$CURRTASKDIR"/meta) ; done
    else
      cat "$metascript" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | while read metaline ; do (IFS=$IFSORIG ; ml=`genline $metaline` ; [ -n "$ml" ] && echo "$ml" >> "$CURRTASKDIR"/meta) ; done
    fi
    ;;
  *)
    # finding out from shebang
    ipr=`head -1 "$ROLES_ROOT/roles/$metascript" 2>/dev/null | grep ^#! | cut -b 3- | awk '{print $1}'`
    if [ -n "$ipr" ] ; then
      case $ipr in
        runlocal|local) ipr="local" ;;
        runremote|remote) ipr="remote" ;;
        *) unset ipr ;;
      esac
    fi
    if [ -n "$ipr" ]; then
      echo "$ipr \"$1 $metascript\""
    else
      echo -e "# ERROR generating full line:\n# $metatype $metascript\n# either meta type is unknown or it is empty and no shebang in the script"
      log "ERROR generating full line from $@ (metatype not defined)"
      log "result is: ipr=$ipr metatype=$metatype metascript=$metascript"
    fi
    ;;
  esac
}

run_meta() {
  declare -i res
  res=0
  [ `grep -c ^"$*"$ "$CURRTASKDIR/log"` -ne 0 ] && echo "Skipping: $*" | tee -a "$LOG" && return 0
  [ -n "$test" -o -n "$dry" ] && dry="--dry"
  if [ -n "$2" ]; then
    metatype=$1
    shift
  fi
  metascript="$*"
  metascript="${metascript%%|*}"
  metarole=`echo "$*" | cut -sd'|' -f2`
  export metarole
  [ -n "$use_color" ] && printf "\033[01;36mMETA: \033[00;36m${metatype} $metascript\033[0m" || printf "META: $metatype $metascript"
  [ -z "$verbose" ] && echo -n " .. "
  
  if [ -n "$verbose" ] ; then
    printf "\n  type: $metatype  script: $metascript \n"
    V='--verbose'
  fi
  if $debug ; then
    D='--debug'
  fi
  if [ -n "$ignoreemptycluster" ] ; then
    I="--ignoreemptycluster"
  fi
  if [ -n "$ignorenocluster" ] ; then
    F="--ignorenocluster"
  fi
  if [ -n "$ignoreipnotpresent" ] ; then
    P="--ignoreipnotpresent"
  fi
  if [ -n "$metatype" ] && [ -n "$metascript" ] ; then
    find_metascript "$metascript" || return 1
    [ -e "$CURRTASKDIR/$metascript" ] && rm "$CURRTASKDIR/$metascript"
    [ -e "$CURRTASKDIR/$metascript.var" ] && rm "$CURRTASKDIR/${metascript}.var"
    deploy.run --type=$metatype --file=$metascript --ip=$ip --key="$KEY" --cluster="$cluster" --role="$role" --flavor="$flavor" --timestamp=$timestampact --task="$task" $dry $V $D $I $F $P $SU
    res=$?
    if [ -n "$verbose" ] ; then
      if [ -n "$use_color" ] ; then
        [ $res -eq 0 ] && printf "\033[01;32mSuccess\033[0m\n\n" || printf "\033[01;31mError\033[0m\n\n"
      else
        [ $res -eq 0 ] && echo -e "Success\n" || echo "ERROR\n"
      fi
    else
      if [ -n "$use_color" ] ; then
        [ $res -eq 0 ] && printf " \033[01;32mSuccess\033[0m\n" || printf " \033[01;31mError\033[0m\n"
      else
        [ $res -eq 0 ] && echo " Success" || echo " ERROR"
      fi
    fi
    [ $res -eq 0 ] && echo "$meta" >> "$CURRTASKDIR/log"
    return $res
  else
    [ -n "$use_color" ] && printf "\033[01;31m"
    echo "Error parsing command: $meta"
    if [ "_$metatype" == "_local" ] || [ "_$metatype" == "_remote" ] || [ "_$metatype" == "_include" ]; then
      echo "Looks like script is not defined"
    else
      echo "Looks like type is not defined"
    fi
    [ -n "$use_color" ] && printf "\033[0m"
    [ -z "$dry" ] && meta_exit 1 171
  fi
}

meta_exit() {
  if [ -z "$list" ]; then
    echo -e "Timestamp: $timestampact\nWork directory: $CURRTASKDIR\n"
  if [ -e "$CURRTASKDIR/messages" ]; then
    cat "$CURRTASKDIR/messages"
  fi
  [ -z "$KEEP_DEPLOYTMP" ] && KEEP_DEPLOYTMP=30
  find "$M_DEPL_WORK_DIR" -maxdepth 1 -mindepth 1 -type d -mtime +$KEEP_DEPLOYTMP -exec rm -rf {} \;
  fi
  proper_exit $1 $2
}

createnode() {
  ip=0 
  ip="$(IAMACHILD=1 "$rpath"/../cloud/$CLOUD_PROVIDER/create_node --cluster=$cluster --return=ip "$V" "$T" "$LR" 2>>"$rpath"/../logs/cloud.log | tail -1)"
  [ $? -ne 0 ] && ip=$? 
  log "($CLOUD) create_node returned this: $ip"
}

trap meta_exit 3 6 15

SSH=`which ssh 2>/dev/null`
SCP=`which scp 2>/dev/null`

possible_options="help verbose debug flavor ip cloud cluster task role timestamp test dry command output repeat newnode list skip force ignoreipnotpresent ignoreemptycluster ignorenocluster usage user nosudo nolock newtimestamp name log_request"
[ -z "$*" ] && usage="yes"

IFSORIG=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  [ "_$s_optarg" == "_no" ] && unset $s_optname

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFSORIG

found=false
for option in $necessary_options ; do
  [ -z "$(eval echo \$$option)" ] && missing_options="$missing_options --${option}," && found=true
done
if $found ; then
  echo "Necessary options: ${missing_options/%,/} not found"
  exit 1
fi

[ -n "$debug" ] && verbose="yes" && debug=true || debug=false
[ -n "$help" ] && debug=true
export verbose debug
[ -n "$repeat" ] && timestamp=repeat
[ -n "$newtimestamp" ] && unset timestamp timestampact
[ -n "$usage" ] && help="yes" && debug=false
[ -n "$log_request" ] && LR="--log_request"

if [ -n "$help" ]; then
  if $debug ; then
    cat << "EOF"
Usage: ${0##*/} <options>

Common options:

  --help    this help
  --usage   short help
  --verbose   shows the output of each command; also exports
      "verbose=yes" to descendant processes, so it can be 
      used in scripts
  --debug   adds verbosity; also exports "debug=yes" to descendant
      processes, so it can be used in scripts
  --test|--dry    makes all preparations but doesn't really execute
      any scripts; in combination with --verbose or --debug
      outputs the resulting scripts and files with all
      variables substituted

Target selection options:

  --ip=[IP]   target is this IP only
  --ignoreemptycluster  useful only in combination with --ip in some cases;
      prevents from complaining about cluster not defined
  --cluster=[name]  allows to define cluster; overwrites M_CLUSTER 
      environment variable if it is defined
  --role=[name]   (re)defines cluster based on role
  --flavor=[name] (re)defines cluster(s) based on flavor, i.e. selects
      all hosts of this flavor as a target
  --cloud=[name]  (re)defines cluster(s) based on cloud, i.e. selects
      all hosts in this cloud as a target

Commands selection options:

  --task=[name]   task is defined by metascript "extension"; metascript
      must be located in the root folder of the role, so e.g.
      file meta.deploy corresponds to the task named "deploy"
                        and contains the list of all correspondent commands
      inside
  --command=[command string]  executes a single command defined by command
      string; syntax is "command-type role/flavor/command"
      where command-type is either "remote" or "local";
      see documentation for more details
  --command=[number,...]  executes command(s) defined by their numbers in
      existing metascript defined by the --task option; see
      also option --list
  --list    outputs all commands listed in metascript defined by 
      the --task option with their numbers
  --skip=[number,...] allows to skip certain commands while executing 
                        metascript defined by the --task option

Repeat options:

  These options don't require other options to be defined, all the options
  are inherited from the session being repeated

  --repeat    repeats the last meta execution starting from the
      command that failed during the previous run; if there
      were no failed commands, does nothing
  --timestamp=[string]    repeats execution of the session defined by its
      timestamp; session timestamp is shown when metascript
      execution has finished, either successfully or not
  --newtimestamp    forces new timestamp generation; necessary if metaexec
      command is included in the script that is run by another metaexec command

Other options:

  --newnode   this is a shortcut combining create_node command and
      metascript execution on this new node when it is
      ready; includes all necessary automation: getting
      new node status, repeating the call if it has failed,
      inserting the IP into the list, ensuring it is up
      and accessible etc. See documentation for more details
      
  --nolock   the default is to lock cloud operations if --newnode option
      is present; this helps to avoid background API calls caused
      by absence of the target node in nodes.list which may happen
      due to the lag with which just created node appears in the list
      returned by cloud API. But if the task is long enough, you may want
      to avoid locking. This should not cause any problems, but may require
      some extra time and extra API calls to ensure the target node presence.
      

EOF
  else
    echo -e "Usage: ${0##*/} <options>\n    Possible options: $possible_options\n    For detailed help use ${0##*/} --help\n"
  fi
  exit 0
fi

source "$M_ROOT/conf/deploy.conf"
source "$M_ROOT/lib/functions.sh"
source "$M_ROOT/lib/cloud_functions.sh"

[ -n "$cloud" ] && CLOUD=$cloud
export CLOUD
[ -n "$CLOUD" ] && source "$M_ROOT/conf/clouds/${CLOUD}.conf"
[ -z "$CLOUD" ] && echo "Cloud is not defined" && exit 1

[ -z "$ROLES_ROOT" ] && ROLES_ROOT=/opt/m/deploy
[ -z "$M_DEPL_WORK_DIR" ] && M_DEPL_WORK_DIR=/root/deploy.tmp
[ -z "$SSH" ] && echo "SSH client not found!" && meta_exit 1 511
[ -n "$SSHPORT" ] || SSHPORT=22

export PATH="$M_ROOT/deploy:$M_ROOT/cloud/common:$M_ROOT/helpers:$PATH"
[ -n "$task" ] || task=notask
[ -n "$ignoreipnotpresent" -o -n "$force" -o -n "$ignorenocluster" ] && ignorenocluster="yes" && force="yes"
[ -n "$user" ] && SSH_REMOTE_USER="$user"
if [ -z "$SSH_REMOTE_USER" ]; then
  SSH_REMOTE_USER="root"
  SU="--nosudo"
else
  [ -n "$nosudo" ] && SU="--nosudo --user=$SSH_REMOTE_USER" || SU="--user=$SSH_REMOTE_USER"
fi
if [ -n "$name" ] && [ -z "$ip" ]; then
  ip=`name_to_ip $name`
  [ $? -ne 0 ] && echo "Unable to resolve name $name" >&2 && exit 1
  if [ `expr "$ip" : "[^[0-9.]]*" 2>/dev/null` -ne 0 ] ; then
    echo "name $name resolved to IP that does not look correct: $ip"
    exit 1
  fi
fi

log "Starting metaexec with arguments $@"

localip=`"$M_ROOT"/helpers/localips | grep -v '127.0.0.1'`

if [ -n "$timestamp" ]; then
  [ -n "$newnode" ] && echo "Repeating existing sequence is not available for new node. If you want to repeat a meta that has brought up a previous node, it's safe to run $rcommand --repeat or $rcommand --timestamp=<timestamp> without other arguments. It will pick up IP address of that node and all relevant arguments." && exit 1
  if [ "_$timestamp" == "_repeat" ]; then
    timestampact=`ls -1tr "$M_DEPL_WORK_DIR" | tail -1` && timestampact=${timestampact##*.} && echo "Restoring process with timestamp $timestampact"
    rm "$M_DEPL_WORK_DIR"/*.$timestampact/messages 2>/dev/null
  else
    timestampact="$timestamp"
  fi
  if [ -n "$timestampact" ]; then
    argfile=`find "$M_DEPL_WORK_DIR"/*.$timestampact/ -maxdepth 1 -name ARGV`
    if [ -f "$argfile" ]; then
      sed -i "/^newnode=/d;/^test=/d;/^verbose=/d;/^debug=/d;/^timestamp=/d" "$argfile"
      source "$argfile"
    else
      echo "Process with timestamp $timestampact cannot be repeated, no arguments file found"
      exit 1
    fi
  fi
else
  timestampact=`date +"%y_%m_%d_%H_%M_%S"`
fi

if [ -n "$ip" ]; then
  [ -n "$newnode" ] && echo "Both newnode and ip are given. Not sure what to do." && exit 1
  if [ `expr "$ip" : "[^[0-9.]]*" 2>/dev/null` -ne 0 ] ; then
    echo "Something's wrong with IP: $ip"
    exit 1
  fi
  ipcluster=`grep "^$ip|" "$M_ROOT/nodes.list" | cut -d'|' -f5`
  [ -z "$ipcluster" ] && [ -n "$CLOUD" ] && "$M_ROOT"/cloud/common/find_node --cloud=$CLOUD --ip=$ip --updatelist
  ipcluster=`grep "^$ip|" "$M_ROOT/nodes.list" | cut -d'|' -f5`
  [ -z "$ipcluster" ] && [ -z "$ignoreemptycluster" ] && [ -z "$ignoreipnotpresent" ] && echo "IP $ip is not present in nodes.list or has no cluster defined." && exit 1
  if [ -n "$cluster" ]; then
    [ "$cluster" != "$ipcluster" ] && [ -z "$force" ] && echo "Cluster found for this IP is ${ipcluster}, but cluster provided as an option is $cluster" && exit 1
  else
    cluster=$ipcluster
  fi
else
  # Cluster must be defined! If it is still not, we'll find it using the role
  if [ -z "$cluster" ]; then
    if [ -z "$role" ]; then
      if [ -n "$M_ROLE" ]; then
        role=$M_ROLE
        # cluster could be defined in role.rc, this has a higher priority
        [ -e "$ROLES_ROOT/roles/$role/role.rc" ] && source "$ROLES_ROOT/roles/$role/role.rc"
        [ -z "$cluster" ] && cluster=$M_CLUSTER
      fi
    else
      [ -e "$ROLES_ROOT/roles/$role/role.rc" ] && source "$ROLES_ROOT/roles/$role/role.rc"
      [ -z "$cluster" ] && cluster=$M_CLUSTER
      [ -z "$cluster" ] && cluster=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -d'|' -f1,10 | grep \|${role}$ | cut -d'|' -f1`
      [ -n "$cluster" ] && echo -e "\nUsing cluster ${cluster}, default for role $role"
    fi
    # Still no cluster??
    if [ -z "$cluster" -a -z "$ignorenocluster" ] ; then
      echo "Unable to find what cluster to use."
      [ -z "$list" ] && exit 1
    fi
  else
    # role by cluster
    if [ -z "$role" ]; then
      role=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f10`
      echo "Using role ${role}, default for cluster $cluster"
      [ -z "$role" ] && echo "Unable to find the role of this cluster/node" && exit 1
    fi
  fi
fi
export role cluster
USER_FROM_CLUSTER=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f13`
if [ -n "$USER_FROM_CLUSTER" ]; then
  SSH_REMOTE_USER="$USER_FROM_CLUSTER"
  if [ "$USER_FROM_CLUSTER" == "root" ]; then
    SU="--nosudo"
  else
    [ -n "$nosudo" ] && SU="--nosudo --user=$USER_FROM_CLUSTER" || SU="--user=$USER_FROM_CLUSTER"
  fi
fi

[ -n "$verbose" ] && V='--verbose'
[ -n "$test" ] && T='--test'
CURRTASKDIR="$M_DEPL_WORK_DIR/${role}.${task}.$timestampact"
export CURRTASKDIR
if [ -d "$CURRTASKDIR" ] && [ -z "$timestamp" ]; then
  declare -i m ; m=1
  while [ -d "${CURRTASKDIR}_$m" ]; do
    m+=1
  done
  CURRTASKDIR="${CURRTASKDIR}_$m"
fi
install $V -d "$CURRTASKDIR"
export CURRTASKDIR
touch "$CURRTASKDIR/log"

# the condition below does not work when multiple clusters are specified
# this situation is dealt with later
if [ -z "$flavor" ]; then
  flavor=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f11`
  [ -n "$flavor" ] && echo "Using flavor $flavor, default for cluster $cluster"
fi

[ -z "$NODE_CHECKS_NUMBER" ] && NODE_CHECKS_NUMBER=20
[ -z "$NODE_CHECKS_PERIOD" ] && NODE_CHECKS_PERIOD=30

if [ -n "$newnode" ]; then
  
  [ -z "$NEW_NODE_CREATE_ATTEMPTS" ] && NEW_NODE_CREATE_ATTEMPTS=3
  [ -z "$WAIT_BETWEEN_ATTEMPTS" ] && WAIT_BETWEEN_ATTEMPTS=30
  echo "*** Creating new node in cloud $CLOUD"
  log "creating new node in cloud $CLOUD"
  if [ -z "$test" ]; then

    if [ -z "$nolock" ]; then
      log "getting cloud operations lock"
      lock_cloudops || exit 10
    fi
    log "initiating create_node sequence"
    
    for ((i=0; i<$NEW_NODE_CREATE_ATTEMPTS; i++)); do
      [ $i -eq 0 ] || sleep $WAIT_BETWEEN_ATTEMPTS
      createnode $T
      if [[ `expr "$ip" : "[0-9]*\.[0-9.]*$"` -ne 0 ]]; then
        break
      else
        # assuming it's the exit status (see the function)
        res=$ip
      fi
      [[ $res -eq 2 ]] && log "Timeout waiting for the node ready" && break
      [[ $res -eq 5 ]] && log "Maximum nodes number for cluster $cluster has been reached, unable to add another node" && meta_exit 5 471
      # various weird errors below, exit 1 
      [[ $res -eq 6 ]] && log "Failed to generate a name for the new node" && meta_exit 1 473
      [[ $res -eq 7 ]] && log "Failed to find out what image to use to create the new node, define it in clusters.conf, please" && meta_exit 1 474
      [[ $res -eq 8 ]] && log "Failed to find out what flavor (node size) to use, define it in clusters.conf, please" && meta_exit 1 475
      [[ $res -eq 9 ]] && log "Failed to find out what region (datacenter) to use, define it in clusters.conf, please" && meta_exit 1 476
      [[ $res -eq 1 ]] && log "Something went wrong, unable to add a node to the cluster $cluster"
      if [ -z "$ip" ]; then
        log "Was unable either to create a cloud node in the cloud $CLOUD or to get its IP address." && sleep $WAIT_BETWEEN_ATTEMPTS && continue
      fi
      [[ `expr $ip : [0-9.]*$` -eq 0 ]] && log "Something's wrong with IP: $ip"
      echo "Something went wrong, check $LOG and fix the problem, next try is in $WAIT_BETWEEN_TRIES seconds"
    done
    [ $i -eq $NEW_NODE_CREATE_ATTEMPTS ] && log "Maximal number of tries reached, exiting" && meta_exit 1 483
  else
    echo "*** This is a test"
  fi
  
  $debug && log "ensuring the target node $ip is accessible"
  if [ -z "$test" -a -n "$ip" ]; then
    for ((k=0; k<$NODE_CHECKS_NUMBER; k++)); do
      $SSH -i "$KEY" -p $SSHPORT -o "StrictHostKeyChecking=no" -o "ConnectTimeout=10" -o "PasswordAuthentication=no" "$SSH_REMOTE_USER"@"$ip" echo >>$LOG 2>&1
      if [ $? -ne 0 ]; then
        echo "Unable to login to the node $ip using key ${KEY}, trying again...">>"$LOG"
        loggedin=false
        sleep $NODE_CHECKS_PERIOD
      else
        loggedin=true
        break
      fi
    done
    if ! $loggedin && [ -n "$newnode" ]; then
      # stop useless node and tell the parent process that something's wrong
      IAMACHILD=1 "$M_ROOT"/cloud/$CLOUD_PROVIDER/destroy_node --ip=$ip
      meta_exit 13 573
    fi
  fi
  
fi

# Default output is console, colored if colors are supported
[ -z "$output" ] && output=console
use_color=false
if [ "$output" == "console" ]; then
  if [ -z "$M_COLOR" ]; then
    # Thanks to Gentoo guys for this part, I couldn't have done better
    safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
    match_lhs=""
    [ -f ~/.dir_colors   ] && match_lhs="${match_lhs}$(<~/.dir_colors)"
    [ -f /etc/DIR_COLORS ] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
    [ -z "$match_lhs" ] \
      && type -P dircolors >/dev/null \
      && match_lhs=$(dircolors --print-database)
    [[ $'\n'$match_lhs == *$'\n'"TERM "${safe_term}* ]] && use_color=true
  else
    use_color=true
  fi
fi

if [ -n "$ip" ]; then
  if [ `"$M_ROOT"/helpers/localips | grep -c "^$ip$"` -ne 0 ]; then
    log "IP $ip is local. Setting up self is not supported."
    meta_exit 1 512
  fi
fi

# the start of the cluster object cluster|key|flavor required to support
# multiple clusters in metaexec
for cl in `echo $cluster | tr ',' ' '`; do
  KEY=`"$M_ROOT"/helpers/find_key cluster "$cl"`
  if [ -z "$KEY" ]; then
    KEY=`"$M_ROOT"/helpers/find_key node "$ip"`
  fi
  [ -z "$KEY" ] && echo "Access key for cluster $cl not found!" && meta_exit 1 510
  CL+=( "$cl|$KEY" )
done

[ -z "$SSH" ] && echo "SSH client not found!" && meta_exit 1 511
[ -n "$SSHPORT" ] || SSHPORT=22  # createnode function re-reads cloud config


if [ -z "$list" ]; then
  if [ -z "$timestamp" ]; then
  ## Saving arguments to make re-run simpler
    $debug && log "saving command-line arguments for possible repeat of the sequence"
    IFS2=$IFS ; IFS=$' \t\n'
    for option in `echo $possible_options | sed 's/,/ /g'`; do
      echo "${option}=\"`eval "echo \\$${option}"`\"" >> "$CURRTASKDIR/ARGV"
    done
    IFS=$IFS2
    echo -e "flavor=$flavor\ncluster=$cluster\nrole=$role\n" >> "$CURRTASKDIR/ARGV"
    if [ -n "$newnode" ]; then
      echo "ip=\"$ip\"" >> "$CURRTASKDIR/ARGV"
    fi
  fi
fi
echo
rm "$CURRTASKDIR"/meta "$CURRTASKDIR"/meta.pre 2>/dev/null
for pre in "$ROLES_ROOT/roles/$role"/*.meta.pre ; do
  [ -e "$pre" ] || continue
  prename=`echo "${pre##*/}" | cut -sd'.' -f1`
  pretask=`echo "$prename" | cut -sd'_' -f1`
  preflavor=`echo "$prename" | cut -sd'_' -f2`
  if [ -z "$pretask" ] || [ "_$pretask" == "_$task" ]; then
    if [ -z "$preflavor" ] || [ "_$preflavor" == "_$flavor" ]; then
      cat "$pre" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | while read metaline ; do (genline $metaline >> "$CURRTASKDIR"/meta.pre) ; done
    fi
  fi
done

IFS='
'
if [ -e "$CURRTASKDIR/meta.pre" ]; then
  declare -i metan
  metan=1
  for meta in `cat "$CURRTASKDIR/meta.pre"` ; do
    meta=`eval "echo \"$meta\""`

    if [ -n "$list" ]; then
      echo "$metan $meta"
      if [ "$list" == "unfold" ]; then
        echo '--------------------------------------------------------------------------------'
        role show script "${meta#* }" | sed 's|\\\$|$|g'
        echo '--------------------------------------------------------------------------------'
      fi
    else
      (IFS=$IFSORIG ; run_meta $meta)
      [ $? -ne 0 ] && meta_exit 1 579
    fi
    metan+=1
  done
fi

if [ -n "$command" ] && [[ `echo $command | grep -c "^[0-9,]*$"` -eq 0 ]]; then
  (IFS=$IFSORIG ; genline $command >> "$CURRTASKDIR"/meta)
else
  
  cat "$ROLES_ROOT/roles/$role/${task}.meta" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | while read metaline ; do (IFS=$IFSORIG ; genline $metaline >> "$CURRTASKDIR"/meta) ; done
  
  declare -i metan
  metan=1
  if [ -n "$command" ]; then
    for commandn in `echo -e $command | tr ',' '\n'` ; do
      for meta in `cat "$CURRTASKDIR"/meta` ; do
        meta=`eval "echo \"$meta\""`
        if [[ $commandn -eq $metan ]]; then
          if [ $metan -eq 1 ]; then
            newmeta="$meta"
          else
            newmeta="${newmeta}\n${meta}"
          fi
        fi
        metan+=1
      done
      metan=1
    done
    echo -e "$newmeta" > "$CURRTASKDIR/meta"
  fi
fi

for meta in `cat "$CURRTASKDIR"/meta` ; do
  meta=`eval "echo \"$meta\""`
  skipthis=false
  if [ -n "$list" ]; then
    echo "$metan $meta"
    if [ "$list" == "unfold" ]; then
      echo '--------------------------------------------------------------------------------'
      role show script "${meta#* }" | sed 's|\\\$|$|g'
      echo '--------------------------------------------------------------------------------'
    fi
  else
    if [ -n "$skip" ]; then
      for skipn in `echo -e $skip | tr ',' '\n'` ; do
        [[ $skipn -eq $metan ]] && skipthis=true
      done
    fi

    if ! $skipthis ; then
      (IFS=$IFSORIG ; run_meta $meta)
      [ $? -ne 0 ] && meta_exit 1 579
    fi
  fi
  metan+=1
done


IFS=$IFSORIG

echo
meta_exit 0 597

#echo "Preparing the keys"
#if [ -f /root/.ssh/id_rsa.pub ] ; then
#  echo "Using existing key"
#else
#  printf "Generating a new key..  "
#  ssh-keygen -q -f /root/.ssh/id_rsa -N '' && printf "done\n" || printf "error\n"
#fi
    
    
    
