# runactions function from mon.run runs action if pattern is found in the
# report file. Action is executed via eval function.
#
# Syntax is:
# pattern|level|action|consequent alerts|blocked for|blocked for if status 13|blocked for if status 5
#
# where consequent alerts is a number of consequent alerts needed to trigger
#       the action;
#       blocked for is a number of cycles this action will be blocked for
#       after it has been triggered;
#       blocked for if status 13 is a number of cycles next such actions will be
#       blocked for in case if action executed exited with status 13
#       blocked for if status 5 is a number of cycles next such actions will be
#       blocked for in case if action executed exited with status 5
# (status 5 is used in the cloud scripts to indicate that min or max servers
# number limit has been reached; status 13 - that cloud API call was successful
# but the result doesn't seem good, e.g. new server inaccessible)
#
# Levels 1-3 mean alert levels, level 0 means the informational message (the one
# starting from <OK>).
#
# Example
# To restart Apache when it begins to take too much virtual memory:
#
# /usr/sbin/apache2.*virtual memory|2|/etc/init.d/apache2 restart
#
# The alert that would trigger this action:
# <**> Process "/usr/sbin/apache2 apache" is using 1222.93MB of virtual memory
#
# Alert level (except 0 obviously) means "equal or higher" so alert level 3
# (with <***>) would trigger the action above as well.
# Optional 4th field contains a number of consequent alerts needed to trigger
# an event. Empty means 1.

pidfile.*monitorload.*stopped|3|/etc/init.d/monitorload start
