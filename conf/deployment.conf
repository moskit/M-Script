# ROLES_ROOT is a folder containing the structure of subfolders correspondent
# to server roles and operating systems (flavors). Its schema is as follows:
#
# - <role> --       server role: application, database or whatever you want
#            |
#            |-- meta.<task> - file(s) containing meta scripts for various tasks
#            |-- role.conf   - file containing environment variables for this
#            |                 role
#            |      
#             -- <flavor> --      OS flavor: Debian, Centos or whatever, you
#                           |     define it to distinguish possible OS choices
#                           |
#                          Underlying subfolders structure is up to you
#                          You can use some for convenience, e.g. to separate
#                          files to be just copied over to remote servers from
#                          scripts to be executed or local scripts from remote
#                          ones. No subfolders is OK, too. Whatever it is, it
#                          should be reflected in your scripts, of course
###############################################################################

ROLES_ROOT=/opt/m/deployment/roles

# Work directory where prepared scripts are copied to. Prepared means all
# variables substituted. This allows not just using variables in scripts but
# also using subshell commands and functions.
# This folder is created in both local and remote systems. Scripts and configs
# are copied to subfolders correspondent to each deployment (with timestamp in
# a folder name) so you can track how it went locally and remotely.

WORK_DIR=/root/deploy.tmp

# Retention period for files in WORK_DIR (days, 30 if not set)
# KEEP_DEPLOYTMP=

### Server deployment ###

# How many times to try to create a new server if it fails 
NEW_SERVER_START_TRIES=3

# Wait period between tries, in seconds
WAIT_BETWEEN_TRIES=300

# How many times to try to ssh to the new server. Note that tries start right
# after the API has returned the success status, so it must be long enough
# to let the server boot up.
SERVER_CHECKS_NUMBER=40

# Wait period between tries, in seconds
SERVER_CHECKS_PERIOD=15


