# ROLES_ROOT is a folder containing the structure of subfolders correspondent
# to server roles and operating systems (flavors). Its schema is as follows
# (square brackets mean this is a folder):
#
# - [$role] --   folder named after server role
#            |
#            |-- $task.meta  - file(s) containing meta scripts for various tasks
#             -- [$flavor] --  folder(s) named after OS flavors
#                           |- [files]   folder for files and templates
#                           |- your scripts for this combination of
#                              role/flavor
# - [conf]  --   folder for all roles' configuration files
#            |
#            |-- $role.conf
#
# Both $role and $flavor may be whatever you want except one reserved name
# 'common' that is treated specially, see documentation for the details
###############################################################################

ROLES_ROOT=/opt/m/deployment

# Work directory where prepared scripts are copied to. Prepared means all
# variables substituted. This allows not just using variables in scripts but
# also using subshell commands and functions.
# This folder is created in both local and remote systems. Scripts and configs
# are copied to subfolders correspondent to each deployment (with timestamp in
# a folder name) so you can track how it went locally and remotely.

M_DEPL_WORK_DIR=/root/deploy.tmp

# Retention period for files in WORK_DIR (days, 30 if not set)
# KEEP_DEPLOYTMP=

### Server deployment ###

# How many times to try to create a new server if it fails 
NEW_SERVER_START_TRIES=3

# Wait period between tries, in seconds
WAIT_BETWEEN_TRIES=300

# How many times to try to ssh to a new server. Note that tries start right
# after the API has returned the success status, so it must be long enough
# to let the server boot up.
SERVER_CHECKS_NUMBER=40

# Wait period between tries, in seconds
SERVER_CHECKS_PERIOD=15

# Conf file for role 'common' is sourced before the actual role during task
# execution. This is useful for assigning sort of global variables that can be
# used in role.conf files of other roles. If such behavior is not wanted,
# uncomment below:
# NO_COMMON_CONF=1

# Password for files encrypted with 'role encrypt'
# If it is not secure enough for you, leave it blank or commented, it will be
# asked every time you encrypt or decrypt files
# ENCRYPT_PASSWORD=
# aes-128-cbc is the default (see openssl utility)
# ENCRYPT_METHOD=

