#!/bin/bash

# If M_CLOUD environment variable is not set, this defines the cloud. So it is a
# "default cloud" setting.
# Supported: ec2, rackspace, ganeti, libcloud
CLOUD=ec2

# Possible values: external, internal. Meaning: what IPs are used for communications with cloud servers. Default: internal
NETWORK=

# In case you are using non-standard SSH port
SSHPORT=

# Length of the index part in server names (e.g. app001)
# It is just the default for initial numbering, not a limitation.
NAME_INDEX_LENGTH=3

###################### Cloud-specific settings ######################

# The line below allows addressing different clouds by passing the option
# --cloud to scripts.
[ -n "$M_CLOUD" ] && CLOUD="$M_CLOUD"

##################################
##  Amazon cloud configuration  ##
##################################

if [ "X$CLOUD" == "Xec2" ] ; then
# The two environment variables below are needed for cron jobs
JAVA_HOME=
EC2_HOME=
EC2_PRIVATE_KEY=
EC2_CERT=
EC2_USERID=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

EC2_AK=
EC2_REGION=
EC2_TOOLS_BIN_PATH=
# If different from ec2-api-tools:
EC2_AMI_TOOLS_BIN_PATH=

### Settings for saving server images ###

# S3 bucket to save AMI to:
BUCKETNAME=
# Multiple paths should be separated by comma
EXCLUDE_PATHS=
SAVED_FILES_PATH=/mnt
ARCH=i386

PATH=$EC2_TOOLS_BIN_PATH:$EC2_AMI_TOOLS_BIN_PATH:$PATH

export JAVA_HOME EC2_HOME EC2_CERT EC2_PRIVATE_KEY AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_AK PATH

fi

#####################################
##  Rackspace cloud configuration  ##
#####################################

if [ "X$CLOUD" == "Xrackspace" ] ; then

RS_AUTH_USER=
RS_AUTH_KEY=
# For US
RS_APIURL="auth.api.rackspacecloud.com"
# For UK
# RS_APIURL="lon.auth.api.rackspacecloud.com"

fi

################################
##  Ganeti cluster management ##
################################
# Local cloud, managed by Ganeti. Xen, KVM, LXC based local/clustered instances

# Class C (/24) network for Ganeti cluster. IPs are static (no DHCP), M-Script
# assigns them automatically to each new instance.
GANETI_NETWORK=10.1.1.0

# Default gateway for Ganeti instances. Defaults to the first IP of the network.
GANETI_GATEWAY=


##############################
##  Balancer configuration  ##
##############################

# Supported: nginx, not defined (disabled)
BALANCER=

if [ -n "$BALANCER" ] ; then
### Application servers clusters
### Syntax:
### cluster|port|application|balance method
### Multiple clusters and ports should be put in quotes and separated by spaces:
### APP_SERVERS="cluster1|3000|app1|sticky cluster2|3000|app2| cluster2|3001|app3|sticky"
### or just use a file, like this:
### APP_SERVERS=`cat /path/to/my.apps.list`
### A file may contain one app record per line or one line of records separated
### by spaces, or both.
### This is the reason why the syntax is dumb (no port ranges etc): it makes
### it easier to generate this file dynamically via e.g. deployment system.
### For example, you change the number of workers (thin, uwsgi) in role.conf
### and easily get the according number of lines in the apps list file with
### different ports assigned to these workers.

APP_SERVERS=

# If balance method is empty in the apps list and BALANCE_METHOD below is empty
# too, it is effectively a round-robin method. The one defined below becomes the
# default for all balancers, but can be overwritten in the table. If any single
# record within some app in the list has balance method other than the default
# defined below, it overwrites it and applies it to this app balancer.

BALANCE_METHOD=

###
### Nginx proxy/balancer
###

if [ "$BALANCER" == "nginx" ] ; then

NGINX_PROXY_CLUSTER_CONF_DIR=/etc/nginx/balancers/
NGINX_RC_SCRIPT=/etc/init.d/nginx
NGINX_RELOAD_COMMAND=reload

fi

fi

