#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
IFS1=$IFS
IFS='
'
echo -e "Servers availability\n--------------------------\n"

PING=`which ping 2>/dev/null`
SSH=`which ssh 2>/dev/null`
CURL=`which curl 2>/dev/null`
if [ -z "$CURL" ]; then
  LYNX=`which lynx 2>/dev/null`
  LINKS=`which links 2>/dev/null`
  WGET=`which wget 2>/dev/null`
fi
[ -z "$TIMEOUT" ] && TIMEOUT=5

for mserver in `cat "$rpath/../conf/servers.conf" | grep -vE "^$|^#|^[[:space:]]*#"`
do
  serverip=`echo $mserver|cut -sd'|' -f1`
  servername=`echo $mserver|cut -sd'|' -f2`
  serverport=`echo $mserver|cut -sd'|' -f3`

  [ -z "$servername" ] && servername=$serverip
  if [ -z "$serverport" ] ; then
    for ((i=0; i<3; i++)) ; do
      $PING -c1 $serverip >/dev/null
      [ $? -ne 0 ] && testres=false
    done
    if $testres ; then
      echo "<OK> $servername is online (ping test)"
    else
      echo "<***> Ping probe to $servername failed!"
    fi
    unset testres
  elif [ "_$serverport" == "_22" ] ; then
    [ -z "$SSH" ] && echo "SSH client not found!" && continue
    $SSH "-o ConnectTimeout=$TIMEOUT" $serverip echo -n >/dev/null 2>&1
    [ $? -ne 0 ] && testres=false
    if $testres ; then
      echo "<OK> $servername is online (SSH test)"
    else
      echo "<***> SSH test connect to $servername failed!"
    fi
    unset testres
  else
    if [ -n "$CURL" ]; then
      $CURL -m $TIMEOUT -s "${serverip}:$serverport" > /dev/null 2>&1
      testres=$?
      case $testres in
        7)
        echo "<***> Curl test connect to $servername failed!"
        ;;
        28)
        echo "<***> Curl test connect to $servername timeout!"
        ;;
        3)
        echo "<**> Curl test: bad URL ${serverip}:$serverport"
        ;;
        6)
        echo "<**> Curl test: unable to resolve ${serverip}:$serverport"
        ;;
        1)
        echo "<**> Curl test: unsupported protocol"
        ;;
        0)
        echo "<OK> $servername is online (Curl test, port $serverport)"
        ;;
        *)
        echo "<OK> Curl test returned code $res for $servername port $serverport"
        ;;
      esac
      continue
    fi
    if [ -n "$LYNX" ]; then
      $LYNX -dump http://${serverip}:$serverport > /dev/null 2>&1
      if $testres ; then
        echo "<OK> $servername is online (Lynx test, port ${serverport})"
      else
        echo "<***> Lynx test connect to $servername:${serverport} failed!"
      fi
      unset testres
      continue
    fi
    if [ -n "$LINKS" ]; then
      $LINKS -dump http://${serverip}:$serverport > /dev/null 2>&1
      if $testres ; then
        echo "<OK> $servername is online (Links test, port ${serverport})"
      else
        echo "<***> Links test connect to $servername:${serverport} failed!"
      fi
      unset testres
      continue
    fi
    if [ -n "$WGET" ]; then
      $WGET -O - http://${serverip}:$serverport > /dev/null 2>&1
      if $testres ; then
        echo "<OK> $servername is online (Wget test, port ${serverport})"
      else
        echo "<***> Wget test connect to $servername:${serverport} failed!"
      fi
      unset testres
      continue
    fi
  fi
done
IFS=$IFS1

