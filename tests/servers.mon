#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
IFS1=$IFS
IFS='
'
echo -e "\nServers availability\n--------------------------\n"

PING=`which ping 2>/dev/null`
SSH=`which ssh 2>/dev/null`
CURL=`which curl 2>/dev/null`
if [ -z "$CURL" ]; then
  LYNX=`which lynx 2>/dev/null`
  LINKS=`which links 2>/dev/null`
  WGET=`which wget 2>/dev/null`
fi

# TODO find a place for this
TIMEOUT=300

getwarn() {
  [ -z "$probetime3" ] && return
  [ `echo "scale=2; $t >= $probetime3" | bc` -eq 1 ] && warn='<***>'
  [ -z "$warn" ] && [ `echo "scale=2; $t >= $probetime2" | bc` -eq 1 ] && warn='<**>'
  [ -z "$warn" ] && [ `echo "scale=2; $t >= $probetime1" | bc` -eq 1 ] && warn='<*>'  
}

for mserver in `cat "$rpath/../conf/servers.conf" | grep -vE "^$|^#|^[[:space:]]*#"`
do
  unset warn
  serverip=`echo $mserver|cut -sd'|' -f1`
  servername=`echo $mserver|cut -sd'|' -f2`
  serverport=`echo $mserver|cut -sd'|' -f3`
  probetime1=`echo $mserver|cut -sd'|' -f4`
  probetime2=`echo $mserver|cut -sd'|' -f5`
  probetime3=`echo $mserver|cut -sd'|' -f6`
  if [ -z "$TIMEOUT" ]; then
    [ -n "$probetime3" ] && TIMEOUT=`expr $probetime3 + 1 2>/dev/null || echo 5` || TIMEOUT=5
  fi
  testres=true
  [ -z "$servername" ] && servername=$serverip
  if [ -z "$serverport" ] ; then
    for ((i=0; i<3; i++)) ; do
      t=`(time -p $PING -c1 $serverip >/dev/null) 2>&1 | grep real | cut -d' ' -f2`
      [ $? -ne 0 ] && testres=false
      getwarn
    done
    [ -z "$warn" ] && warn='<OK>'
    if $testres ; then
      echo "$warn $servername is online (ping test, connect time $t sec)"
    else
      echo "<***> Ping probe to $servername failed!"
    fi
    unset testres
  elif [ "_$serverport" == "_22" ] ; then
    t=`(time -p mssh $serverip echo -n >/dev/null 2>&1) 2>&1 | grep real | cut -d' ' -f2`
    [ $? -ne 0 ] && testres=false
    getwarn
    [ -z "$warn" ] && warn='<OK>'
    if $testres ; then
      echo "$warn $servername is online (SSH test, connect time $t sec)"
    else
      echo "<***> SSH test connect to $servername failed!"
    fi
    unset testres
  else
    if [ -n "$CURL" ]; then
      t=`(time -p $CURL -m $TIMEOUT -s "${serverip}:$serverport" > /dev/null 2>&1) 2>&1 | grep real | cut -d' ' -f2`
      testres=$?
      getwarn
      [ -z "$warn" ] && warn='<OK>'
      case $testres in
        7)
        echo "<***> Curl test connect to $servername failed!"
        ;;
        28)
        echo "<***> Curl test connect to $servername timeout! (timeout set to $TIMEOUT seconds)"
        ;;
        3)
        echo "<**> Curl test: bad URL ${serverip}:$serverport"
        ;;
        6)
        echo "<**> Curl test: unable to resolve ${serverip}:$serverport"
        ;;
        1)
        echo "<**> Curl test: unsupported protocol"
        ;;
        0)
        echo "$warn $servername is online (Curl test, port $serverport, connect time $t sec)"
        ;;
        *)
        echo "<OK> Curl test returned code $res for $servername port $serverport, connect time was $t sec"
        ;;
      esac
      continue
    fi
    if [ -n "$LYNX" ]; then
      t=`(time -p $LYNX -dump http://${serverip}:$serverport > /dev/null 2>&1) 2>&1 | grep real | cut -d' ' -f2`
      [ $? -ne 0 ] && testres=false
      getwarn
      [ -z "$warn" ] && warn='<OK>'
      if $testres ; then
        echo "<OK> $servername is online (Lynx test, port ${serverport}, connect time $t sec)"
      else
        echo "<***> Lynx test connect to $servername:${serverport} failed!"
      fi
      continue
    fi
    if [ -n "$LINKS" ]; then
      t=`(time -p $LINKS -dump http://${serverip}:$serverport > /dev/null 2>&1) 2>&1 | grep real | cut -d' ' -f2`
      [ $? -ne 0 ] && testres=false
      getwarn
      [ -z "$warn" ] && warn='<OK>'
      if $testres ; then
        echo "<OK> $servername is online (Links test, port ${serverport}, connect time $t sec)"
      else
        echo "<***> Links test connect to $servername:${serverport} failed!"
      fi
      continue
    fi
    if [ -n "$WGET" ]; then
      t=`(time -p $WGET -O - http://${serverip}:$serverport > /dev/null 2>&1) 2>&1 | grep real | cut -d' ' -f2`
      [ $? -ne 0 ] && testres=false
      getwarn
      [ -z "$warn" ] && warn='<OK>'
      if $testres ; then
        echo "<OK> $servername is online (Wget test, port ${serverport}, connect time $t sec)"
      else
        echo "<***> Wget test connect to $servername:${serverport} failed!"
      fi
      continue
    fi
  fi
done
IFS=$IFS1

