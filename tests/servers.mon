#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



### Uncomment below and put your servers list to conf/servers.conf if you need 
### to monitor multiple servers.
### Details and examples can be found in doc/multiple_servers.txt.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)
IFS1=$IFS
IFS='
'
echo ""
echo "Other servers availability"
echo "--------------------------"
echo ""
PING=`which ping 2>/dev/null`
SSH=`which ssh 2>/dev/null`
CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`
for mserver in `cat ${rpath}/../conf/servers.conf|grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#`
do
  serverip=`echo $mserver|awk '{print $1}'`
  servername=`echo $mserver|awk '{print $2}'`
  serverport=`echo $mserver|awk '{print $3}'`

  if [ "X$serverport" == "X" ] ; then
    for ((i=0; i<3; i++)) ; do
      $PING -c1 $serverip >/dev/null
      if [ "$?" == "0" ] ; then
        pingtest="yes"
      fi
    done
    if [ "x$pingtest" == "xyes" ]; then
      echo "<OK> $servername is online (ping test)"
    else
      echo "<***> Ping probe to $servername failed!"
    fi
    unset pingtest
  elif [ "X$serverport" == "X22" ] ; then
    [ "X$SSH" == "X" ] && echo "SSH client not found!" && continue
    $SSH $serverip pwd >/dev/null
    if [ "$?" == "0" ] ; then
      sshtest="yes"
    fi
    if [ "x$sshtest" == "xyes" ]; then
      echo "<OK> $servername is online (SSH test)"
    else
      echo "<***> SSH test connect to $servername failed!"
    fi
    unset sshtest
  else
    if [ "X$CURL" != "X" ]; then
      $CURL -m 5 -s ${serverip}:$serverport > /dev/null 2>&1
      res="$?"
      # Remove status 52 part if you want empty reply to mean failure
      if [ "$res" == "0" ] || [ "$res" == "28" ] || [ "$res" == "52" ]; then
        curltest="yes"
      fi
      if [ "x$curltest" == "xyes" ]; then
        echo "<OK> $servername is online (Curl test, port $serverport)"
      else
        echo "<***> Curl test connect to $servername failed!"
      fi
      unset curltest
      continue
    fi
    if [ "X$LYNX" != "X" ]; then
      $LYNX -dump http://${serverip}:$serverport > /dev/null 2>&1
      if [ "$?" == "0" ] ; then
        lynxtest="yes"
      fi
      if [ "x$lynxtest" == "xyes" ]; then
        echo "<OK> $servername is online (Lynx test, port $serverport)"
      else
        echo "<***> Lynx test connect to $servername failed!"
      fi
      unset lynxtest
      continue
    fi
    if [ "X$LINKS" != "X" ]; then
      $LINKS -dump http://${serverip}:$serverport > /dev/null 2>&1
      if [ "$?" == "0" ] ; then
        linkstest="yes"
      fi
      if [ "x$linkstest" == "xyes" ]; then
        echo "<OK> $servername is online (Links test, port $serverport)"
      else
        echo "<***> Links test connect to $servername failed!"
      fi
      unset linkstest
      continue
    fi
    if [ "X$WGET" != "X" ]; then
      $WGET -O - http://${serverip}:$serverport > /dev/null 2>&1
      if [ "$?" == "0" ] ; then
        wgettest="yes"
      fi
      if [ "x$wgettest" == "xyes" ]; then
        echo "<OK> $servername is online (Wget test, port $serverport)"
      else
        echo "<***> Wget test connect to $servername failed!"
      fi
      unset wgettest
      continue
    fi
  fi
done
IFS=$IFS1

