#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
source "$M_ROOT/conf/mon.conf" || exit 99
source "${0%.mon}.conf" || exit 99
     
portstcp=( `cat "${rpath}/../ports.tcp.list" 2>/dev/null | grep -v '^#' | grep -v '^[[:space:]]*#' | cut -d'|' -f1` )
portsudp=( `cat "${rpath}/../ports.udp.list" 2>/dev/null | grep -v '^#' | grep -v '^[[:space:]]*#' | cut -d'|' -f1` )
sockets=( `cat "${rpath}/../sockets.list" 2>/dev/null| grep -v '^#' | grep -v '^[[:space:]]*#'` )
[ -x /bin/netstat ] && NETSTATCMD='/bin/netstat'
[ "X$NETSTATCMD" == "X" ] && NETSTATCMD=`which netstat 2>/dev/null`

if [ `uname` == "Linux" ]; then
  [ "X$NETSTATCMD" == "X" ] && echo "Netstat utility not found! Aborting.." && exit 1
  NETCONNSTCP="${NETSTATCMD} -tapn"
  NETCONNSUDP="${NETSTATCMD} -uapn"
  SOCKCONNS="${NETSTATCMD} -xlpn"
fi

[ -x /bin/ping ] && PING='/bin/ping'
[ "X$PING" == "X" ] && PING=`which ping`

if [ `uname` == "Linux" ]; then
  ROUTE="$NETSTATCMD -rn"
fi

[ -e "${rpath}/../conf/sockets.exclude" ] || touch "${rpath}/../conf/sockets.exclude"
[ -e "${rpath}/../conf/ports.exclude" ] || touch "${rpath}/../conf/ports.exclude"

chk_portexclusions() {
  for exclport in `cat "${M_ROOT}/conf/ports.exclude" | grep -v '^#' | grep -v '^[[:space:]]*#'` ; do
      exclportnum=${exclport%%|*}
      exclportprog=${exclport#*|}
      portif=${1%:*}
      portnum=${1##*:}
      if [ -z "$exclportprog" ] || [ `expr $exclportprog : .*${2}` -ne 0 ] ; then
        if [ -z "$exclportnum" ] ; then
          skip=1 && break
        else
          if [ `expr $exclportnum : [0-9]*-[0-9]*` -ne 0 ] ; then
            port1=${exclportnum%-*}
            port2=${exclportnum#*-}
            ([[ $portnum -ge $port1 ]] && [[ $portnum -le $port2 ]]) && skip=1 && break
          else
            [[ $exclportnum -eq $portnum ]] && skip=1 && break
          fi
        fi
      fi
  done
}

echo
echo "Listening ports and sockets:"
echo "----------------------------"
echo
echo "  Name              Listening on                            Connections"
echo

### Two modes are available: with per socket monitor enabled or disabled.
### By default it is enabled. But on loaded servers with a lot of waiting and/or
### keepalived connections getting listening sockets from kernel and parsing the
### result may be a very expensive operation.
### Per socket monitor for certain protocol is disabled automatically with
### non-alert message if it turns out that the number of listening sockets for 
### this protocol registered with the kernel is greater than the number of
### current connections.

if [ -e "${rpath}/../ports.tcp.list" ] ; then
  inusetcp=`cat /proc/net/protocols | grep ^TCP[[:space:]] | awk '{print $3}'`
  inusetcp=`expr $inusetcp + 2`
  tcphead=`cat /proc/net/tcp | grep ' 0A ' | head -n $inusetcp | wc -l`
  inusetcp6=`cat /proc/net/protocols | grep ^TCPv6[[:space:]] | awk '{print $3}'`
  if [ -n "$inusetcp6" ] ; then
    inusetcp6=`expr $inusetcp6 + 2`
    tcp6head=`cat /proc/net/tcp6 | grep ' 0A ' | head -n $inusetcp6 | wc -l`
  fi
  # No point in tracking v4 and v6 separately (and netstat doesn't distinguish
  # them). If ANY of them overloaded, the monitor is disabled.
  if ([[ $tcphead -eq $inusetcp ]] || ([ -n "$inusetcp6" ] && [[ $tcp6head -eq $inusetcp6 ]])); then
    if ([[ $inusetcp -ne 0 ]] || [[ $inusetcp6 -ne 0 ]]); then
      echo "TCP ports monitor is disabled due to too many keepalive and/or waiting"
      echo "connections."
      echo "This is not an alert, these connections don't harm, but they make ports"
      echo "monitoring too expensive."
      echo
    fi
    portstcp=""
  else
    # No point in parsing of more than 100 lines of LISTENING ports, increase this
    # if necessary
    $NETSTATCMD -tlpn | head -100 | grep -v ^Proto | grep -v ^Active | awk '{ print $4" "$7 }' > "${M_TEMP}/ports.tcp.$$"
    [ `cat "${M_TEMP}/ports.tcp.$$" | wc -l` -gt `cat "${M_TEMP}/ports.tcp.$$" | uniq | wc -l` ] && echo "connections.mon: TCP ports monitor is disabled due to duplicates in netstat output" >> "${rpath}/../monitoring.log" && rm -f "${M_TEMP}/ports.tcp.$$"
  fi
fi
if [ -e "${rpath}/../ports.udp.list" ] ; then
  inuseudp=`cat /proc/net/protocols | grep ^UDP[[:space:]] | awk '{print $3}'`
  inuseudp=`expr $inuseudp + 2`
  udphead=`cat /proc/net/udp | grep ' 0A ' | head -n $inuseudp | wc -l`
  inuseudp6=`cat /proc/net/protocols | grep ^UDPv6[[:space:]] | awk '{print $3}'`
  if [ -n "$inuseudp6" ] ; then
    inuseudp6=`expr $inuseudp6 + 2`
    udp6head=`cat /proc/net/udp6 | grep ' 0A ' | head -n $inuseudp6 | wc -l`
  fi
  if ([[ $udphead -eq $inuseudp ]] || ([ -n "$inuseudp6" ] && [[ $udp6head -eq $inuseudp6 ]])); then
    if ([[ $inuseudp -ne 0 ]] && [[ $inuseudp6 -ne 0 ]]) ; then
      echo "UDP ports monitor is disabled due to too many keepalive and/or waiting"
      echo "connections."
      echo "This is not an alert, these connections don't harm, but they make ports"
      echo "monitoring too expensive."
      echo
    fi
    portsudp=""
  else
    $NETSTATCMD -ulpn | head -100 | grep -v ^Proto | grep -v ^Active | awk '{ print $4" "$6 }' >> "${M_TEMP}/ports.udp.$$"
    [ `cat "${M_TEMP}/ports.udp.$$" | wc -l` -gt `cat "${M_TEMP}/ports.udp.$$" | uniq | wc -l` ] && echo "connections.mon: UDP ports monitor is disabled due to duplicates in netstat output" >> "${rpath}/../monitoring.log" && rm -f "${M_TEMP}/ports.udp.$$"
  fi
fi

### If other protocols are needed (see /etc/net/protocols), they can be added
### easily, just follow the pattern

if [ -f "${M_TEMP}/ports.tcp.$$" ] ; then
  while read LINE
  do
    portstcp=( ${portstcp[*]} )
    portfound=0
    t=${LINE%%%*}
    prog=${LINE#* }
    prog=$(echo $prog | cut -d/ -f2 | cut -d: -f1)
    t=${t%% *}
    chk_portexclusions $t $prog
    
    # now compare ports
    for ((i=0; i<${#portstcp[*]}; i++))
    do
      if [ "X${portstcp[$i]}" == "X${t}" ]
      then
        unset portstcp[$i]
        printf "$prog"
        m=`expr length $prog`
        l=`expr 20 - $m`
        for ((n=1; n <= $l; n++)); do printf " "; done
        printf "${t}"
        m=`expr length "${t}"`
        l=`expr 40 - $m`
        for ((n=1; n <= $l; n++)); do printf " "; done
        printf "`$NETCONNSTCP | grep ":${t} " | wc -l`\n"
        portfound=1
        break
      fi
    done
    [[ $portfound -ne 1 ]] && [[ $skip -ne 1 ]] && echo "<***> Service ${prog} listening on ${t} is not being monitored."
    skip=0
  done < "${M_TEMP}/ports.tcp.$$"

  if [[ ${#portstcp[*]} -gt 0 ]]
  then
    for t in ${portstcp[*]} ; do
      prog=`grep "^${t}|" "${rpath}/../ports.tcp.list" | cut -d'|' -f2`
      chk_portexclusions $t $prog
      [[ $skip -ne 1 ]] && echo "<***> There is no service listening on TCP: $t (was $prog)"
      skip=0
    done
  fi
fi

if [ -f "${M_TEMP}/ports.udp.$$" ] ; then
  while read LINE
  do
    portsudp=( ${portsudp[*]} )
    portfound=0
    t=${LINE%%%*}
    prog=${LINE#* }
    prog=$(echo $prog | cut -d/ -f2 | cut -d: -f1)
    t=${t%% *}
    chk_portexclusions $t $prog
    
    # now compare ports
    for ((i=0; i<${#portsudp[*]}; i++))
    do
      if [ "X${portsudp[$i]}" == "X${t}" ]
      then
        unset portsudp[$i]
        printf "$prog"
        m=`expr length $prog`
        l=`expr 20 - $m`
        for ((n=1; n <= $l; n++)); do printf " "; done
        printf "${t}"
        m=`expr length "${t}"`
        l=`expr 40 - $m`
        for ((n=1; n <= $l; n++)); do printf " "; done
        printf "`$NETCONNSUDP | grep ":${t} " | wc -l`\n"
        portfound=1
        break
      fi
    done
    [[ $portfound -ne 1 ]] && [[ $skip -ne 1 ]] && echo "<***> Service ${prog} listening on ${t} is not being monitored."
    skip=0
  done < "${M_TEMP}/ports.udp.$$"

  if [[ ${#portsudp[*]} -gt 0 ]]
  then
    for t in ${portsudp[*]} ; do
      prog=`grep "^${t}|" "${rpath}/../ports.udp.list" | cut -d'|' -f2`
      chk_portexclusions $t $prog
      [[ $skip -ne 1 ]] && echo "<***> There is no service listening on UDP: $t (was $prog)"
      skip=0
    done
  fi
else
  echo "Not testing UDP ports: failed to read the currently open ports list"
fi

echo "  Name              Socket file"
echo
$SOCKCONNS | grep STREAM > "${M_TEMP}/sockets.$$"

while read LINE
do
  sockets=( ${sockets[*]} )
  for exclsocket in `cat "${rpath}/../conf/sockets.exclude" | grep -v '^#' | grep -v '^[[:space:]]*#'`
  do
    [[ $LINE =~ $exclsocket ]] && skip=1 && break
  done
  [[ $skip -eq 1 ]] && skip=0 && continue
  socketfound=0
  t="${LINE##*[[:space:]]}"
  sname=$(echo $LINE | awk -F'STREAM' '{print $2}' | awk '{print $3}')
  sname=${sname#*/}
  # now compare sockets
  for ((i=0; i<${#sockets[*]}; i++))
  do
    if [ "X${sockets[$i]}" == "X${t}" ]
    then
      unset sockets[$i]
      printf "$sname"
      m=`expr length $sname`
      l=`expr 20 - $m`
      for ((n=1; n <= $l; n++)); do printf " "; done
      printf "${t}\n"
      socketfound=1
      break
    fi
  done
  [[ $socketfound -ne 1 ]] && echo "<***> Service ${sname} listening on ${t} is not being monitored."
done < "${M_TEMP}/sockets.$$"

if [[ ${#sockets[*]} -gt 0 ]]
then
 echo "<***> There is no services listening on unix sockets: ${sockets[*]}"
fi

rm -f "${M_TEMP}"/ports.*.$$ "${M_TEMP}"/sockets.$$
# End of netstat test

echo
echo "Connections per protocol:"
echo "-------------------------"
echo
echo "  Protocol               Connections"
echo
cat /proc/net/protocols | tail -n +2 | awk '{printf "%-24s %s\n", $1, $3}'

# Connectivity test
if [ "X$CONNTEST_IP" == "X" ]
then
  if [ "X$ROUTE" != "X" ]; then
    $ROUTE | grep 'G' | grep -v 'Flags' | awk '{print $2}' > "${M_TEMP}/ping.tmp"
  fi
  [ -f /etc/resolv.conf ] && grep '^nameserver' /etc/resolv.conf | awk '{print $2}' >> "${M_TEMP}/ping.tmp"
  [ -f "${M_TEMP}/ping.tmp" ] || echo "<***> Unable to get any IP from system network settings to ping (tried: gateway, nameserver). Please provide IP address for the ping test in conf/mon.conf file"
  failedip=""
  pingedip=""
  while read LINE
  do
   [ "X${LINE}" == "X" ] || $PING -c1 $LINE >/dev/null
   if [ "$?" != "0" ] ; then
    failedip="${failedip} ${LINE}"
   else
    pingedip="${pingedip} ${LINE}"
   fi
  done < "${M_TEMP}/ping.tmp"
else
  for connip in ${CONNTEST_IP}
  do
    [ "X${connip}" == "X" ] || $PING -c1 ${connip} >/dev/null
    if [ "$?" != "0" ] ; then
      failedip="${failedip} ${LINE}"
    else
      pingedip="${pingedip} ${LINE}"
    fi
  done
fi
rm -f "${M_TEMP}/ping.tmp"
if [ "X$CONNTEST_IP" == "X127.0.0.1" ] || [ "X$CONNTEST_IP" == "Xlocalhost" ]; then
  if [ -n "$pingedip" ]; then
   echo ""
   echo 'Localhost pinged successfully'
  else
   echo '<***> Ping to localhost timeout!'
  fi
else
  if [ -n "$pingedip" ]; then
   echo ""
   echo 'Server is connected'
   echo "Successfully pinged: $pingedip"
   [ -n "$failedip" ] && echo "Ping to $failedip failed"
  else
   echo '<***> Server is disconnected!'
   echo "<***> IP(s) ${failedip} unavailable"
  fi
fi

## Connections alerts number limit
if [ -f "$M_TEMP"/conn_test_runs_count ] ; then
  [ `cat "$M_TEMP"/conn_test_runs_count|wc -l` -gt $PORTSMON_RUNS ] && echo > "$M_TEMP"/conn_test_runs_count && echo "$M_ROOT"/fixports.run >> "$M_ROOT"/actions.in || echo >> "$M_TEMP"/conn_test_runs_count
else
  echo > "$M_TEMP"/conn_test_runs_count
fi

unset failedip pingedip connip sockets socketfound sname i t portstcp portsudp portif portnum port1 port2 exclportnum exclportprog exclport inusetcp inuseudp testthrtcp testthrudp tcphead udphead

