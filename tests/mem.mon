#!/usr/bin/env bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# bc workaround to make it work with floating point numbers
solve() {
bc << EOF
scale=2
${1}
EOF
}

FREE=`which free 2>/dev/null`
PS=`which ps 2>/dev/null`
UPTIME=`which uptime 2>/dev/null`
VMSTAT=`which vmstat 2>/dev/null`
rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)
timeindexnow=`cat /tmp/m_script/timeindex`
source ${rpath}/../conf/mon.conf
source ${0%.mon}.conf
ruptime=`cat /proc/uptime | cut -d'.' -f1`
rfreeram=`cat /proc/meminfo | grep ^MemFree | awk '{ print $2 }'`
mfreeram=`solve "$rfreeram / 1024"`
ractiveram=`cat /proc/meminfo | grep "^Active:" | awk '{ print $2}'`
if [ -n "$ractiveram" ] ; then
mactiveram=`solve "$ractiveram / 1024"`
else
ractiveram=0
mactiveram=0
fi
rtotalram=`cat /proc/meminfo | grep ^MemTotal | awk '{ print $2 }'`
mtotalram=`solve "$rtotalram / 1024"`
rusedram=`expr $rtotalram - $rfreeram`
musedram=`solve "$mtotalram - $mfreeram"`
rfreeswap=`cat /proc/meminfo | grep ^SwapFree | awk '{ print $2 }'`
mfreeswap=`solve "$rfreeswap / 1024"`
rtotalswap=`cat /proc/meminfo | grep ^SwapTotal | awk '{ print $2 }'`
mtotalswap=`solve "$rtotalswap / 1024"`
rusedswap=`expr $rtotalswap - $rfreeswap`
musedswap=`solve "$mtotalswap - $mfreeswap"`
rtotalmemfree=`expr $rfreeram + $rfreeswap`
mtotalmemfree=`solve "$rtotalmemfree / 1024"`
rtotalprocess="$($PS axu | grep -vE "^USER|grep|ps" | wc -l)"
rloadavg="$(cat /proc/loadavg | cut -d' ' -f1,2,3)"

echo
echo "System status:"
echo "--------------"
echo
printf "Uptime:\t\t\t\t`expr $ruptime / 86400` days `expr \( $ruptime % 86400 \) / 3600`:`expr $ruptime % 86400 % 3600 / 60`\n"
printf "Load average (1 5 15 min):\t$rloadavg\n"
printf "Total running processes:\t$rtotalprocess\n"
echo
echo "RAM/Swap status:"
echo "----------------"
echo
printf "Total RAM:\t\t${mtotalram} MB\n"
printf "Active RAM:\t\t${mactiveram} MB\n"
printf "Used RAM:\t\t${musedram} MB\n" 
printf "Free RAM:\t\t${mfreeram} MB\n"
printf "Used Swap:\t\t${musedswap} MB\n"
printf "Free Swap:\t\t${mfreeswap} MB\n"
printf "Total Swap:\t\t${mtotalswap} MB\n"
echo

[[ $ruptime -lt `expr $FREQ \* 4` ]] && echo "<***> The system booted up `expr $ruptime / 60` minutes ago"

x="$(cat /proc/loadavg | cut -d' ' -f2)"
y1="$(echo "$x >= $LOAD_WARN_1" | bc)"
y2="$(echo "$x >= $LOAD_WARN_2" | bc)"
y3="$(echo "$x >= $LOAD_WARN_3" | bc)"
warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
echo "${warnind} 5 min load average is $x"

totalmemused=`solve "($rusedram + $rusedswap) / ($rtotalram + $rtotalswap) * 100"`
totalramused=`solve "$ractiveram / $rtotalram * 100"`

y1="$(echo "$totalmemused >= $MEM_WARN_1" | bc)"
y2="$(echo "$totalmemused >= $MEM_WARN_2" | bc)"
y3="$(echo "$totalmemused >= $MEM_WARN_3" | bc)"

warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
echo "${warnind} Free system memory is ${mtotalmemfree} MB, ${totalmemused}% used"

y1="$(echo "$totalramused >= $RAM_WARN_1" | bc)"
y2="$(echo "$totalramused >= $RAM_WARN_2" | bc)"
y3="$(echo "$totalramused >= $RAM_WARN_3" | bc)"

warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
echo "${warnind} Active memory is ${mactiveram} MB, ${totalramused}% of total RAM"

if [ "X$SQLITE3" == "X1" ] && [ "X${1}" == "XSQL" ]
then
  sqlite3 ${rpath}/../sysdata "update sysdata set totalram=$rtotalram, freeram=$rfreeram, activeram=$ractiveram, totalswap=$rtotalswap, freeswap=$rfreeswap, uptime=$ruptime, loadavg=$x, procnum=$rtotalprocess where timeindex='$timeindexnow'"
fi
