#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
source "$rpath/../conf/mon.conf"
source "${0%.mon}.conf"
source "$M_ROOT/lib/functions.sh"

resolve_uuid() {
  local resdisk
  if [ "${1:0:4}" == "UUID" ]; then
    resdisk=`readlink /dev/disk/by-uuid/${1:5} 2>/dev/null`
    echo "this is UUID that resolves to $resdisk" >> $M_TEMP/disk.tmp.discovered
  fi
  echo "$resdisk"
}

check_slaves() {
  slaves=`ls /sys/class/block/$1/slaves 2>/dev/null`
  if [ -n "$slaves" ] ; then
    echo "Disk $1 is a logical volume built upon `echo $slaves`" >> "$M_TEMP/disk.tmp.discovered"
    for sldisk in $slaves ; do
      if `grep -q $sldisk$ /proc/partitions` ; then
        echo "/dev/$sldisk" >> "$M_TEMP"/disk.tmp.ext
      else
        realsldisk=`resolve_uuid $sldisk`
        if [ -n "$realsldisk" ]; then
          `grep -q $sldisk$ /proc/partitions` && echo "/dev/$realsldisk" >> "$M_TEMP"/disk.tmp.ext
        fi
      fi
    done
  fi
}

if [ "_$SQLITE3" == "_1" ]; then
  alltables=`dbquery "$rpath/../sysdata" ".tables" | sed 's|\ \ *|\n|g' | grep -v ^$`
fi

rm $M_TEMP/disk.tmp*

echo -e "\nDisks usage:\n------------\n\n    Disk\t\t\t\tMountpoint\t\t\tUsage\n"
df -ml | grep -vE "^shm|^tmpfs|^devtmpfs|^udev|^none|^Filesystem" | tr -d '%' | sed 's_  *_|_g' | while read LINE ; do
  #if [ -n "$LONGLINE" ]; then
  #  LINE="$LONGLINE $LINE"
  #  LONGLINE=""
  #fi
  ## Sometimes df breaks the line, if it is much longer than 80 symbols
  #if [ -z "$(echo "$LINE" | awk '{ print $6}')" ] && [ -z "$LONGLINE" ]; then
  #  LONGLINE="$LINE"
  #  continue
  #fi
  disk=$(echo "$LINE" | cut -d'|' -f1)
  mpoint=$(echo "$LINE" | cut -d'|' -f6)
  used=$(echo "$LINE" | cut -d'|' -f5)
  usedm=$(echo "$LINE" | cut -d'|' -f3)
  free=$(echo "$LINE" | cut -d'|' -f4)
  x1="$(echo "$used >= $DISK_WARN_1" | bc)"
  x2="$(echo "$used >= $DISK_WARN_2" | bc)"
  x3="$(echo "$used >= $DISK_WARN_3" | bc)"
  warnind='<OK> '
  [ "$x1" == "1" ] && warnind=' <*> '
  [ "$x2" == "1" ] && warnind='<**> '
  [ "$x3" == "1" ] && warnind='<***>'
  printf "$warnind\t$disk"
  m=`expr length $disk`
  l=`expr 32 - $m`
  if [ $l -lt 1 ] ; then
    printf " "
  else
    printf "%${l}s"
  fi
  printf "$mpoint"
  m=`expr length $mpoint`
  l=`expr 32 - $m`
  if [ $l -lt 1 ] ; then
    printf " "
  else
    printf "%${l}s"
  fi
  printf "$used%%\n"

## Discovering what this disk really is
  disk=`echo $disk | cut -d'/' -f3-`
  if `grep -q $disk$ /proc/partitions` ; then
    echo ${disk#*/} >> "$M_TEMP/disk.tmp.ext"
  else
    if [ -h /dev/$disk ]; then
      realdisk=`readlink /dev/$disk`
      echo "/dev/$disk is a symlink to $realdisk" >> $M_TEMP/disk.tmp.discovered
    elif [ "$disk" == "root" ]; then
      realdisk=`grep root= /proc/cmdline`
      if [ -n "$realdisk" ]; then
        realdisk=`expr "$realdisk" : ".*root=\([^[:space:]]*\)"`
        echo "/dev/root is $realdisk" >> $M_TEMP/disk.tmp.discovered
        if ! `grep -q ${realdisk##*/}$ /proc/partitions` ; then
          realdisk=`resolve_uuid ${realdisk##*/}`
        fi
      else
        echo "Unable to resolve /dev/root" >> $M_TEMP/disk.tmp.discovered
      fi
    fi
    check_slaves $disk
    check_slaves ${realdisk##*/}
    [ -z "$realdisk" ] && echo "Unable to resolve $disk" >> $M_TEMP/disk.tmp.discovered && continue
    disk=${realdisk##*/}
    echo "/dev/$disk" >> "$M_TEMP/disk.tmp.ext"
  fi
  echo "$disk|$used|$usedm|$free" >> "$M_TEMP/diskusage"
  unset realdisk
done

# inodes usage
df -i | grep -vE "^shm|^tmpfs|^devtmpfs|^udev|^none|^Filesystem" | tr -d '%' | sed 's_  *_|_g' | while read LINE ; do
  #if [ -n "$LONGLINE" ]; then
  #  LINE="$LONGLINE $LINE"
  #  LONGLINE=""
  #fi
  ## Sometimes df breaks a line, if it is much longer than 80 symbols
  #if [ -z "$(echo "$LINE" | awk '{ print $6}')" ] && [ -z "$LONGLINE" ]; then
  #  LONGLINE="$LINE"
  #  continue
  #fi
  disk=$(echo "$LINE" | cut -d'|' -f1)
  mpoint=$(echo "$LINE" | cut -d'|' -f6)
  used=$(echo "$LINE" | cut -d'|' -f5)
  usedm=$(echo "$LINE" | cut -d'|' -f3)
  free=$(echo "$LINE" | cut -d'|' -f4)
  unset warnind
  x1="$(echo "$used >= $DISK_WARN_1" | bc 2>/dev/null)"
  x2="$(echo "$used >= $DISK_WARN_2" | bc 2>/dev/null)"
  x3="$(echo "$used >= $DISK_WARN_3" | bc 2>/dev/null)"
  [ "$x1" == "1" ] && warnind=' <*> '
  [ "$x2" == "1" ] && warnind='<**> '
  [ "$x3" == "1" ] && warnind='<***>'
  [ -n "$warnind" ] && echo "$warnind disk $disk mountpoint $mpoint inodes usage is $used"
  echo "$disk|$used|$usedm|$free" >> "$M_TEMP/diskusage.i"
done

swaps=`cat /proc/swaps | grep '^\/dev\/' | awk '{ print $1 }'`
echo "$swaps" >> "$M_TEMP/disk.tmp.ext"
for sw in `echo "$swaps"` ; do
  echo "$sw is a swap partition" >> $M_TEMP/disk.tmp.discovered
  check_slaves $sw
  swdisk=`resolve_uuid $sw`
  [ -n "$swdisk" ] && echo "/dev/${swdisk##*/}" >> "$M_TEMP/disk.tmp.ext"
done
echo
cat $M_TEMP/disk.tmp.discovered 2>/dev/null
rm $M_TEMP/diskusage $M_TEMP/diskusage.i >/dev/null 2>&1
exit 0
