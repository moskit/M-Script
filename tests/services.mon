#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

source "${rpath}/../conf/mon.conf"

getprocessname() {
  if [ -d /proc/$1 ] ; then
    pfull=`ps -wwo cmd $1`
    pcomm=`echo $pfull | tr -d' ' -f1`
  fi
}

checkpidfile() {
  pid=`cat "$1"|grep -v ^$|sed 's|[^[0-9]]||g'|tail -1 2>/dev/null`
  if [ -n "$pid" ] ; then
    if [ -d "/proc/$pid" ] ; then
      getprocessname $pid
      printf "$pcomm"
      m=`expr length $pcomm`;l=`expr 20 - $m`;for ((n=1; n <= $l; n++)); do printf " "; done
      printf "PID $pid"
      m=`expr length $pid`;l=`expr 20 - $m`;for ((n=1; n <= $l; n++)); do printf " "; done
      printf "${1}\n"
      echo "${1}|$pid|$pfull" >> /tmp/m_script/services.tmp
    else
      echo "<***> Stale pidfile found: $1. Process with ID $pid doesn't exist. Removing."
      rm -f "$1"
    fi
  else
    echo "<***> Empty pidfile found: $1. Removing."
    rm -f "$1"
  fi
}

IFS1=$IFS
IFS='
'
echo ""
echo "Running services"
echo "----------------"
echo
echo "  Process           PID                     PID file"
echo
for LINE in `cat "${rpath}/../conf/services.conf"|grep -v ^$|grep -v ^#|grep -v ^[[:space:]]*#` ; do
  LINE=`echo "$LINE" | sed 's|[[:space:]]*$||'`
  thepath=`echo "$LINE" | sed 's|[[:space:]]*recursive||'`
  # to workaround the weird idea of some OS packagers to have /var/run in
  # non-standard location, symlinked
  thepath="${thepath%/}/"
  if [ -d "$thepath" ] ; then
    if [[ "$LINE" =~ [[:space:]]*recursive$ ]] ; then
      find "$thepath" -name "*\.pid" | while read pidfile ; do
        for exclpidfile in `cat ${rpath}/../conf/pidfiles.exclude | grep -v '^#' | grep -v '^[[:space:]]*#'`
        do
          [[ $pidfile =~ $exclpidfile ]] && skip=1 && break
        done
        if [ -z "$skip" ] ; then
          checkpidfile "$pidfile"
        fi
        unset skip
      done
    else
      find "$thepath" -maxdepth 1 -name "*\.pid" | while read pidfile ; do
        for exclpidfile in `cat ${rpath}/../conf/pidfiles.exclude | grep -v '^#' | grep -v '^[[:space:]]*#'`
        do
          [[ $pidfile =~ $exclpidfile ]] && skip=1 && break
        done
        if [ -z "$skip" ] ; then
          checkpidfile "$pidfile"
        fi
        unset skip
      done
    fi
  elif [ -f "${thepath%/}" ] ; then
    checkpidfile "${thepath%/}"
  else
    echo "<***> Path ${thepath%/} doesn't exist!"
  fi
done
[ -f "${rpath}/../services.list" ] && prevlist=`cat "${rpath}/../services.list" 2>/dev/null` || echo "services.list not found" >> "${rpath}/../monitoring.log"
[ -f "${M_TEMP}/services.tmp" ] && currlist=`cat ${M_TEMP}/services.tmp 2>/dev/null` || echo "services.tmp not found" >> "${rpath}/../monitoring.log"
if [ -n "$prevlist" -a -n "$currlist" ] ; then
  for LINE in $currlist ; do
    if [ `echo "$prevlist" | grep -c "^${LINE}$"` -eq 0 ] ; then
      service=`echo $LINE | cut -d'|' -f1`
      pid=`echo $LINE | cut -d'|' -f2`
      getprocessname $pid
      if [ $(echo "$prevlist" | grep -c "^$service") -eq 0 ] ; then
        echo "<**> Service $pcomm with pidfile $service is a new service"
      fi
    fi
  done
  for LINE in $prevlist ; do
    if [ `echo "$currlist" | grep -c "^${LINE}$"` -eq 0 ] ; then
      service=`echo $LINE | cut -d'|' -f1`
      pid=`echo $LINE | cut -d'|' -f2`
      getprocessname $pid
      if [ $(echo "$currlist" | grep -c "^$service") -eq 0 ] ; then
        echo "<***> Service $pcomm with pidfile $service stopped!"
      else
        echo "<**> Service $pcomm with pidfile $service restarted"
      fi
    fi
  done
else
  echo "${rcommand} failed to compare services lists: one of the lists is empty" >> "${rpath}/../monitoring.log"
fi
[ -f "${M_TEMP}/services.tmp" ] && cat ${M_TEMP}/services.tmp > "${rpath}/../services.list"
rm -f ${M_TEMP}/services.tmp 2>&1
IFS=$IFS1

