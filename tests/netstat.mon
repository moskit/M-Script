#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PATH="/sbin:/usr/sbin:${PATH}"
rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
source ${rpath}/../conf/mon.conf
source ${rpath}/../lib/functions.sh

netstatbin=`which netstat 2>/dev/null`
 
timeindexnow=`cat /tmp/m_script/timeindex 2>/dev/null`
lasttimeindex=`cat /tmp/m_script/lasttimeindex 2>/dev/null`

[ -n "$timeindexnow" ] || timeindexnow=`date +"%s"`
monperiod=`expr $timeindexnow - $lasttimeindex`
[ -z "$monperiod" -o $monperiod -le 0 ] && timeshift=`cat "$M_TEMP/timeshift"` && monperiod=`expr $FREQ + $timeshift`

IFS1=$IFS ; IFS='
'
config=( `cat "${rpath}/netstat.conf" | grep -v ^$` )

metrics=$(echo "${config[*]}" | cut -d'|' -f2 | tr '\n' '|'); metrics=${metrics%|}

prev_values_arr=( `cat "$M_TEMP/netstat.dat" 2>/dev/null` )

curr_values=$($netstatbin -s | grep -E "$metrics" | sed 's|^ *||' | while read L ; do val=${L%% *}; var=`echo "${config[*]}" | cut -d'|' -f1,2 | grep "${L#* }" | cut -d'|' -f1`; eval "echo \"${var}=${val}\""; done)

IFS=$IFS1

rm -f "$M_TEMP/netstat.dat"
for st in $curr_values ; do eval $st ; echo $st >> "$M_TEMP/netstat.dat" ; done
curr_values_arr=( $curr_values )

[ ${#prev_values_arr[*]} -eq 0 ] && echo "`date +"%H:%M:%S"` $rcommand: previous data not found" >> "$M_ROOT/monitoring.log" && exit 1
dat_arr=( $(for L in ${prev_values_arr[*]}; do var=${L%=*}; val=${L#*=}; eval "${var}_prev=${val}"; echo "${var}=`eval "expr \\( \\\$${var} - \\\$${var}_prev \\) \\\\* 60 / $monperiod"`"; done) )

for st in ${dat_arr[*]} ; do
  resline="${resline}${st%%=*}:integer,"
  eval $st
done
[ "X$1" == "XSQL" ] && store_results "$resline"

echo -e "\nNetwork stats\n-------------\n\n"

IFS1=$IFS ; IFS='
'
for l3 in `echo "${config[*]}" | grep -v ^$ | cut -d'|' -f1,3,4,5 | grep \|` ; do
  var=`echo $l3 | cut -d'|' -f1`
  thr1=`echo $l3 | cut -d'|' -f2`
  thr2=`echo $l3 | cut -d'|' -f3`
  thr3=`echo $l3 | cut -d'|' -f4`
  val=`echo "${dat_arr[*]}" | tr ' ' '\n' | grep ^${var}= | cut -d'=' -f2`
  [[ `expr $val \> $thr3` -eq 1 ]] && echo "<***> `echo "${config[*]}" | grep ^$var | cut -d'|' -f2` is ${val} / minute" && continue
  [[ `expr $val \> $thr2` -eq 1 ]] && echo "<**>  `echo "${config[*]}" | grep ^$var | cut -d'|' -f2` is ${val} / minute" && continue
  [[ `expr $val \> $thr1` -eq 1 ]] && echo "<*>   `echo "${config[*]}" | grep ^$var | cut -d'|' -f2` is ${val} / minute" && continue
done
IFS=$IFS1

