#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PATH="/sbin:/usr/sbin:${PATH}"
rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
#*/
source "$M_ROOT/conf/mon.conf"
source "${0%.mon}.conf"
source "$M_ROOT/lib/functions.sh"

netstatbin=`which netstat 2>/dev/null`
iptablesbin=`which iptables 2>/dev/null`

if [ "X$SQLITE3" != "X0" ] && [ "X${1}" == "XSQL" ]
then

[ -n "$lasttimeindex" ] || lasttimeindex=`sqlite3 ${rpath}/../sysdata "select timeindex from sysdata order by timeindex desc limit 1"` || lasttimeindex=`cat $M_TEMP/timeindex`

numconn=`${netstatbin} -s 2>/dev/null | grep 'connections established' | awk '{print $1}'`
binputlast=`sqlite3 ${rpath}/../sysdata "select input from sysdata where timeindex='$lasttimeindex'"`
boutputlast=`sqlite3 ${rpath}/../sysdata "select output from sysdata where timeindex='$lasttimeindex'"`

if [ "X${iptablesbin}" != "X" ] && [ "X${IPTABLES}" != "X0" ]; then
  ${iptablesbin} -L INPUT -v -x > /tmp/ipt.input.accept
  if [ `grep '^Chain' /tmp/ipt.input.accept | grep -c ' 0 bytes'` -eq 1 ]
  then
    declare -i b
    b=0
    while read LINE
    do
      if [ "X${LINE}" != "X" ] && [ `echo ${LINE} | grep -c '^Chain'` -eq 0 ]
      then
        a=`echo ${LINE} | awk '{print $2}'`
        b+=`expr "$a" : '\([0-9]*\)'`
      fi
    done < /tmp/ipt.input.accept
    binput=$b
  else
    c=`grep '^Chain' /tmp/ipt.input.accept`
    binput=`expr "${c}" : '.*\(\ [0-9]*\ bytes\).*' | awk '{print $1}'`
  fi

  ${iptablesbin} -L OUTPUT -v -x > /tmp/ipt.output.accept
  if [ `grep '^Chain' /tmp/ipt.output.accept | grep -c ' 0 bytes'` -eq 1 ]
  then
    declare -i b
    b=0
    while read LINE
    do
      if [ "X${LINE}" != "X" ] && [ `echo ${LINE} | grep -c '^Chain'` -eq 0 ]
      then
        a=`echo ${LINE} | awk '{print $2}'`
        b+=`expr "$a" : '\([0-9]*\)'`
      fi
    done < /tmp/ipt.output.accept
    boutput=$b
  else
    c=`grep '^Chain' /tmp/ipt.output.accept`
    boutput=`expr "${c}" : '.*\(\ [0-9]*\ bytes\).*' | awk '{print $1}'`
  fi

  [ -z "$FREQ" ] && FREQ=200
  diffsec=`expr $timeindexnow - $lasttimeindex 2>/dev/null` || diffsec=$FREQ

  [ "X$binputlast" == "X" ] && binputlast=$binput
  [ "X$boutputlast" == "X" ] && boutputlast=$boutput
  
  if [ "X$BW_UNITS" == "XGBM" ] ; then
    # GB/month 
    # Number 2.5 represents approximately average number of seconds in one
    # month divided by 1024 twice
    diffbwin=`solve 2 "25 * ($binput - $binputlast) / ($diffsec * 10240)"`
    diffbwout=`solve 2 "25 * ($boutput - $boutputlast) / ($diffsec * 10240)"`
    unitname='GB/month'
  else
    # Mbytes/sec
    diffbwin=`solve 2 "($binput - $binputlast) / ($diffsec * 1048576)"`
    diffbwout=`solve 2 "($boutput - $boutputlast) / ($diffsec * 1048576)"`
    unitname='MB/sec'
  fi
else
  binput=0
  boutput=0
  diffbwin=0
  diffbwout=0
fi

echo -e "\nBandwidth:\n----------\n"

[[ $CONNECTIONS_1 -ne 0 ]] && y1="$(echo "$numconn >= $CONNECTIONS_1" | bc)" || y1=0
[[ $CONNECTIONS_2 -ne 0 ]] && y2="$(echo "$numconn >= $CONNECTIONS_2" | bc)" || y2=0
[[ $CONNECTIONS_3 -ne 0 ]] && y3="$(echo "$numconn >= $CONNECTIONS_3" | bc)" || y3=0
warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
printf "${warnind} Total connections:\t\t$numconn\n"

[[ $BW_INPUT_1 -ne 0 ]] && y1="$(echo "$diffbwin >= $BW_INPUT_1" | bc)" || y1=0
[[ $BW_INPUT_2 -ne 0 ]] && y2="$(echo "$diffbwin >= $BW_INPUT_2" | bc)" || y2=0
[[ $BW_INPUT_3 -ne 0 ]] && y3="$(echo "$diffbwin >= $BW_INPUT_3" | bc)" || y3=0
warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
printf "${warnind} Input bandwidth:\t\t$diffbwin ${unitname}\n"

[[ $BW_OUTPUT_1 -ne 0 ]] && y1="$(echo "$diffbwout >= $BW_OUTPUT_1" | bc)" || y1=0
[[ $BW_OUTPUT_2 -ne 0 ]] && y2="$(echo "$diffbwout >= $BW_OUTPUT_2" | bc)" || y2=0
[[ $BW_OUTPUT_3 -ne 0 ]] && y3="$(echo "$diffbwout >= $BW_OUTPUT_3" | bc)" || y3=0
warnind='<OK> '
[ "$y1" == "1" ] && warnind=' <*> '
[ "$y2" == "1" ] && warnind='<**> '
[ "$y3" == "1" ] && warnind='<***>'
printf "${warnind} Output bandwidth:\t\t$diffbwout ${unitname}\n"

sqlite3 ${rpath}/../sysdata "update sysdata set connections='$numconn', input='$binput', output='$boutput', bwidthin='$diffbwin', bwidthout='$diffbwout' where timeindex='$timeindexnow'"

fi

