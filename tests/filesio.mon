#!/bin/bash
# Copyright (C) 2008-2009 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### Description
# 1. Finds the most disk I/O intensive process by checking read/written bytes
#    in /proc/<pid>/io compared to the previous test
# 2. Finds FIO_TOP_FILES files that are being read/written most actively for
#    FIO_TOP_PROCESSES most active processes 

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
#*/
source "$M_ROOT/conf/mon.conf"

[ -z $FIO_TOP_PROCESSES ] && FIO_TOP_PROCESSES=3
[ -z $FIO_TOP_FILES ] && FIO_TOP_FILES=3

find_processes() {
cd /proc
IFS1=$IFS; IFS='
'; for l in `grep ^${1}_bytes */io | grep -v "${1}_bytes:\ 0"`; do
    pid=${l%%/*}
    rdp=${l##* }
    sleep 1
    rd=`test -d $pid && grep ^${1}_bytes $pid/io | cut -d' ' -f2`
    echo "`expr $rd - $rdp 2>/dev/null` $pid"
  done | sort -rn | head -n $FIO_TOP_PROCESSES
  IFS=$IFS1
}

find_cmd() {
  ps axo pid,cmd | sed 's|^ *||' | grep "^${1} " | cut -d' ' -f2-
}

print_eaters() {
IFS1=$IFS; IFS='
'; for eater in `echo "$io_eaters"` ; do
  io=`echo "$eater" | cut -d' ' -f1`
  pid=`echo "$eater" | cut -d' ' -f2`
  [ -d /proc/$pid ] || continue
  echo "${pid}|`find_cmd $pid`|${io}"
  if [ -d /proc/$pid/fdinfo ]; then
    cd /proc/$pid/fdinfo
    grep -L '^pos:[[:space:]]*0$' * | while read l ; do
      b=`grep ^pos $l | awk '{print $2}'`
      sleep 1
      a=`grep ^pos $l | awk '{print $2}'`
      c=`expr $a - $b`
      [ $c -ne 0 ] && echo "`readlink ../fd/$l` $c"
    done
  fi
done
IFS=$IFS1
}

echo -e "\nReaders\n-------\n"

io_eaters=`find_processes read`
print_eaters

echo -e "\nWriters\n-------\n"

io_eaters=`find_processes write`
print_eaters

