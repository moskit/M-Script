#!/bin/bash

solve() {
bc << EOF
scale=2
${1}
EOF
}

PATH="/sbin:/usr/sbin:${PATH}"
rcommand=${0##*/}
rpath=${0%/*}
#*/

[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
source "$M_ROOT/conf/mon.conf" || exit 99
source "${0%.mon}.conf" || exit 99

[ -z "$CMD_LENGTH" ] && CMD_LENGTH=256
[ -z "$CMD_ARGS" ] && CMD_ARGS=2
### +1 to include user
### +3 to start from the user field (see sequence below: rsz,vsz,user,cmd)
CMD_ARGS=`expr $CMD_ARGS + 4`

echo -e "\nMemory eaters (process name and process owner):\n-----------------------------------------------\n"

IFS1=$IFS
IFS='
'

totalram=`cat /proc/meminfo | grep ^MemTotal | awk '{ print $2 }'`
totalswap=`cat /proc/meminfo | grep ^SwapTotal | awk '{ print $2 }'`
totalmem=`expr $totalram + $totalswap`

if [ -n "$CALCULATE_TOTALS" ] ; then

  ### +1 to include user
  ### +3 to start from the user field (see sequence below: rsz,vsz,user,cmd)
  CMD_ARGS_TOT=`expr $CMD_ARGS + 4`
  
  ps axo rsz,vsz,user,cmd:$CMD_LENGTH | sed 's|^[[:space:]]*||g;s|[[:space:]][[:space:]]*| |g' | tail -n +2 > ${M_TEMP}/ps.list
  fields=$(for ((i=3; i<=$CMD_ARGS_TOT; i++)); do echo -n "${i}," ; done)
  fields=${fields%,} 

  [ -z "$TOTALS_MEM_TOP_NUM" ] && TOTALS_MEM_TOP_NUM=$MEM_TOP_NUM
  [ -z "$TOTALS_MEM_RES_MIN" ] && TOTALS_MEM_RES_MIN=$MEM_RES_MIN
  [ -z "$TOTALS_MEM_VIR_MIN" ] && TOTALS_MEM_VIR_MIN=$MEM_VIR_MIN
  [ -z "$TOTALS_MEM_RES_1" ] && TOTALS_MEM_RES_1=$MEM_RES_1
  [ -z "$TOTALS_MEM_RES_2" ] && TOTALS_MEM_RES_2=$MEM_RES_2
  [ -z "$TOTALS_MEM_RES_3" ] && TOTALS_MEM_RES_3=$MEM_RES_3
  [ -z "$TOTALS_MEM_VIR_1" ] && TOTALS_MEM_VIR_1=$MEM_VIR_1
  [ -z "$TOTALS_MEM_VIR_2" ] && TOTALS_MEM_VIR_2=$MEM_VIR_2
  [ -z "$TOTALS_MEM_VIR_3" ] && TOTALS_MEM_VIR_3=$MEM_VIR_3
  
  for proc in `cat ${M_TEMP}/ps.list | grep -v '^0 0' | cut -d' ' -f$fields | sort | uniq` ; do
    virtual=0
    resident=0
    for thisproc in `cat ${M_TEMP}/ps.list | grep " ${proc} " 2>/dev/null` ; do
      [ -z "$thisproc" ] && continue 2
      VSZ=`echo $thisproc | cut -d' ' -f2`
      [[ $VSZ -eq 0 ]] && continue 2
      RSS=`echo $thisproc | cut -d' ' -f1`
      [[ $RSS -eq 0 ]] && continue 2
      virtual=`expr $virtual + $VSZ`
      resident=`expr $resident + $RSS`
    done
    echo "$resident ${proc}" >> ${M_TEMP}/ps.list.totals.res
    echo "$virtual ${proc}" >> ${M_TEMP}/ps.list.totals.vir
  done
  sort -g -r ${M_TEMP}/ps.list.totals.res | head -n $TOTALS_MEM_TOP_NUM > ${M_TEMP}/ps.list.totals.res.sorted
  sort -g -r ${M_TEMP}/ps.list.totals.vir | head -n $TOTALS_MEM_TOP_NUM > ${M_TEMP}/ps.list.totals.vir.sorted

  for proc in `cat ${M_TEMP}/ps.list.totals.res.sorted` ; do
    unset usageprev warnind
    procname=${proc#* }
    usage=${proc%% *}
    usagemb=`solve "$usage / 1024"`
    usageperc=`solve "$usage / $totalram * 100"`
    [[ `echo "$usageperc >= $TOTALS_MEM_RES_MIN" | bc` -eq 1 ]] && echo "Process \"${procname}\" is using ${usagemb}MB of RAM"
    [ -f ${M_TEMP}/ps.prev.totals.res ] && usageprev=`grep " ${procname}$" ${M_TEMP}/ps.prev.totals.res | cut -d' ' -f1 | tail -1` || continue
    [ -n "$usageprev" ] && usageprevperc=`solve "$usageprev / $totalram * 100"` || continue
    if [ -n "$usageprevperc" ] ; then
      if [[ `echo "$usageperc >= $usageprevperc" | bc` -eq 1 ]] ; then
        direction="increased"
        usagediff=`solve "$usageperc - $usageprevperc"`
      else
        direction="decreased"
        usagediff=`solve "$usageprevperc - $usageperc"`
      fi
      y3="$(echo "$usagediff >= $TOTALS_MEM_RES_3" | bc)"
      [[ $y3 -eq 0 ]] && y2="$(echo "$usagediff >= $TOTALS_MEM_RES_2" | bc)"
      [[ $y2 -eq 0 ]] && y1="$(echo "$usagediff >= $TOTALS_MEM_RES_1" | bc)"
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
      [ -n "$warnind" ] && echo "${warnind} Process \"${procname}\" RAM usage $direction by $usagediff percents"
    fi
  done

  for proc in `cat ${M_TEMP}/ps.list.totals.vir.sorted` ; do
    unset usageprev warnind
    procname=${proc#* }
    usage=${proc%% *}
    usagemb=`solve "$usage / 1024"`
    usageperc=`solve "$usage / $totalmem * 100"`
    [[ `echo "$usageperc >= $TOTALS_MEM_VIR_MIN" | bc` -eq 1 ]] && echo "Process \"${procname}\" is using ${usagemb}MB of virtual memory"
    [ -f ${M_TEMP}/ps.prev.totals.vir ] && usageprev=`grep " ${procname}$" ${M_TEMP}/ps.prev.totals.vir | cut -d' ' -f1 | tail -1` || continue
    [ -n "$usageprev" ] && usageprevperc=`solve "$usageprev / $totalmem * 100"` || continue
    if [ -n "$usageprevperc" ] ; then
      if [[ `echo "$usageperc >= $usageprevperc" | bc` -eq 1 ]] ; then
        direction="increased"
        usagediff=`solve "$usageperc - $usageprevperc"`
      else
        direction="decreased"
        usagediff=`solve "$usageprevperc - $usageperc"`
      fi
      y3="$(echo "$usagediff >= $TOTALS_MEM_VIR_3" | bc)"
      [[ $y3 -eq 0 ]] && y2="$(echo "$usagediff >= $TOTALS_MEM_VIR_2" | bc)"
      [[ $y2 -eq 0 ]] && y1="$(echo "$usagediff >= $TOTALS_MEM_VIR_1" | bc)"
      [ "$y1" == "1" ] && warnind=' <*> '
      [ "$y2" == "1" ] && warnind='<**> '
      [ "$y3" == "1" ] && warnind='<***>'
      [ -n "$warnind" ] && echo "${warnind} Process \"${procname}\" virtual memory usage $direction by $usagediff percents"
    fi
  done
  
  mv ${M_TEMP}/ps.list.totals.res.sorted ${M_TEMP}/ps.prev.totals.res
  mv ${M_TEMP}/ps.list.totals.vir.sorted ${M_TEMP}/ps.prev.totals.vir
fi
### --> if [ -n "$CALCULATE_TOTALS" ]

### +2 to include user and pid
### +1 to start from the pid field
CMD_ARGS_NORM=`expr $CMD_ARGS + 3`

fields=$(for ((i=2; i<=$CMD_ARGS_NORM; i++)); do echo -n "${i}," ; done)
fields=${fields%,}
  
ps axo rsz,pid,user,cmd:$CMD_LENGTH | sed 's|^[[:space:]]*||g;s|[[:space:]][[:space:]]*| |g' | grep -v '^0 ' | sort -g | tail -n $MEM_TOP_NUM > ${M_TEMP}/ps.list.res

for proc in `cat ${M_TEMP}/ps.list.res` ; do
  unset usageprev warnind
  usage=${proc%% *}
  procid=`echo $proc | cut -d' ' -f2`
  procname=`echo $proc | cut -d' ' -f$fields`
  prochumanname="${procname#* }"
  usagemb=`solve "$usage / 1024"`
  usageperc=`solve "$usage / $totalram * 100"`
  [[ `echo "$usageperc >= $MEM_RES_MIN" | bc` -eq 1 ]] && echo "Process ID $procid \"${prochumanname}\" is using ${usagemb}MB of RAM"
  [ -f ${M_TEMP}/ps.prev.res ] && usageprev=`grep "$procid\ $prochumanname" ${M_TEMP}/ps.prev.res | cut -d' ' -f1 | tail -1` || continue
  [ -n "$usageprev" ] && usageprevperc=`solve "$usageprev / $totalram * 100"` || continue
  if [ -n "$usageprevperc" ] ; then
    if [[ `echo "$usageperc >= $usageprevperc" | bc` -eq 1 ]] ; then
      direction="increased"
      usagediff=`solve "$usageperc - $usageprevperc"`
    else
      direction="decreased"
      usagediff=`solve "$usageprevperc - $usageperc"`
    fi
    y3="$(echo "$usagediff >= $MEM_RES_3" | bc)"
    [[ $y3 -eq 0 ]] && y2="$(echo "$usagediff >= $MEM_RES_2" | bc)"
    [[ $y2 -eq 0 ]] && y1="$(echo "$usagediff >= $MEM_RES_1" | bc)"
    [ "$y1" == "1" ] && warnind=' <*> '
    [ "$y2" == "1" ] && warnind='<**> '
    [ "$y3" == "1" ] && warnind='<***>'
    [ -n "$warnind" ] && echo "${warnind} Process ID $procid \"${prochumanname}\" RAM usage $direction by $usagediff percents"
  fi
done

ps axo vsz,user,cmd:$CMD_LENGTH | sed 's|^[[:space:]]*||g;s|[[:space:]][[:space:]]*| |g' | grep -v '^0 ' | sort -g | tail -n $MEM_TOP_NUM > ${M_TEMP}/ps.list.vir

for proc in `cat ${M_TEMP}/ps.list.vir` ; do
  unset usageprev warnind
  usage=${proc%% *}
  procid=`echo $proc | cut -d' ' -f2`
  procname=`echo $proc | cut -d' ' -f$fields`
  prochumanname="${procname#* }"
  usagemb=`solve "$usage / 1024"`
  usageperc=`solve "$usage / $totalram * 100"`
  [[ `echo "$usageperc >= $MEM_RES_MIN" | bc` -eq 1 ]] && echo "Process ID $procid \"${prochumanname}\" is using ${usagemb}MB of virtual memory"
  [ -f ${M_TEMP}/ps.prev.vir ] && usageprev=`grep "$procid\ $prochumanname" ${M_TEMP}/ps.prev.vir | cut -d' ' -f1 | tail -1` || continue
  [ -n "$usageprev" ] && usageprevperc=`solve "$usageprev / $totalram * 100"` || continue
  if [ -n "$usageprevperc" ] ; then
    if [[ `echo "$usageperc >= $usageprevperc" | bc` -eq 1 ]] ; then
      direction="increased"
      usagediff=`solve "$usageperc - $usageprevperc"`
    else
      direction="decreased"
      usagediff=`solve "$usageprevperc - $usageperc"`
    fi
    y3="$(echo "$usagediff >= $MEM_RES_3" | bc)"
    [[ $y3 -eq 0 ]] && y2="$(echo "$usagediff >= $MEM_RES_2" | bc)"
    [[ $y2 -eq 0 ]] && y1="$(echo "$usagediff >= $MEM_RES_1" | bc)"
    [ "$y1" == "1" ] && warnind=' <*> '
    [ "$y2" == "1" ] && warnind='<**> '
    [ "$y3" == "1" ] && warnind='<***>'
    [ -n "$warnind" ] && echo "${warnind} Process ID $procid \"${prochumanname}\" virtual memory usage $direction by $usagediff percents"
  fi
done

mv ${M_TEMP}/ps.list.res ${M_TEMP}/ps.prev.res
mv ${M_TEMP}/ps.list.vir ${M_TEMP}/ps.prev.vir
rm -f ${M_TEMP}/ps.list*
IFS=$IFS1


