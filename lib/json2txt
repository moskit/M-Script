#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

declare -i i
i=0
declare -a index
index[$i]=0
emptyobj=true
#d=1
declare -a arrayi
declare -i ai

showdebug() {
  if [ -n "$1" ]; then
    echo "Parsing line = $line"
    echo "  WAS: index = $i    var[$i] = ${index[$i]}    value = $value    openedby = $openedby"
    echo "  WAS: emptyobj = $emptyobj    isclosed = $isclosed    arrayi = ${arrayi[*]}"
  else
    echo "  NOW: index = $i    var[$i] = ${index[$i]}    value = $value    openedby = $openedby"
    echo "  NOW: emptyobj = $emptyobj    isclosed = $isclosed    arrayi = ${arrayi[*]}"
  fi
}

parseline() {
  line=$1
  [ -n "$d" ] && showdebug was
  if [ "X$line" == "X{" ] ; then
    #$emptyobj || index[$i]=`expr ${index[$i]} + 1`
    if [ -n "$value" ] ; then
      printvalue "$value" && unset value
    fi
    i+=1
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X}" ] ; then
    emptyobj=true
    isclosed=1
    if [ -n "$value" ] ; then
      printvalue "$value" && unset value
    fi
    i+=-1
    # workaround for a mere list of objects, we want to count them
    [ $i -eq 0 ] && index[$i]=`expr ${index[$i]} + 1`
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X[" ] ; then
    # it is an array only if it's a beginning of a new value
    if [[ $isclosed -ne 0 ]] || [ -z "$value" ] ; then
      i+=1
      arrayi=( ${arrayi[*]} $i )
      index[$i]=0
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X]" ] ; then
    #arrayi=false
    if [ "X$openedby" == "Xquo" ] ; then
      value="${value}${line}"
    else
      printvalue "$value" && unset value
      ai=${#arrayi[*]} ; ai+=-1
      if [ -n "$ai" ] ; then
        if [[ ${arrayi[$ai]} -eq $i ]] ; then
          i+=-1
          unset arrayi[$ai]
        else
          i+=-1
        fi
      fi
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == 'X"' ] ; then
    unset openedby
    isclosed=1
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X," ] ; then
    #emptystr=true
    if [[ $isclosed -ne 0 ]] ; then
      printvalue "$value" && unset value
      ai=${#arrayi[*]} ; ai+=-1
      if [ $ai -ge 0 ] ; then
        if [[ ${arrayi[$ai]} -eq $i ]] ; then
          index[$i]=`expr ${index[$i]} + 1`
        fi
      fi
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ -n "$line" ] ; then
    $emptyobj && emptyobj=false
    
    isvarvalueline=`expr "$line" : '.*:.*'`
    if [ $isvarvalueline -eq 0 ] ; then
      # it is not a var:value line
      value="${value}${line}"
      [ -n "$d" ] && showdebug
      return
    fi
    
    # on the left of the first colon there must be a variable name
    varname="${line%%:*}"
    # sanitizing it
    varname=`expr "$varname" : "[[:space:]]*\"\(.*\)\""`
    index[$i]="$varname"
    # everything on the right (whatever it is)
    value="${line#*:}" ; value=`expr "$value" : "[[:space:]]*\(.*\)"`
    # now checking what it is
    if [ `expr "$value" : "\"[^\"]*\"$"` -eq 0 ] ; then
      # it is not just a quoted string value
      if [ `expr "$value" : ".*\".*"` -ne 0 ] ; then
      # but some quotes are there, so it may be (most probable first, for speed):
      # e.g. var: foo("bar")
        if [ `expr "$value" : "[^\"]*\".*[^\"]$"` -ne 0 ]; then
          # e.g. var: "foo\"bar\""
          isclosed=1
        else
          # assuming that it is a partial line
          isclosed=0
          # figuring out the opening symbol
          # odd number of quotes
          qn=`echo -n "$value" | sed 's|[^"]||g' | wc -m`
          if [ `expr $qn % 2` -eq 1 ]; then
            openedby="quo"
          fi
        fi
      else
        isclosed=1
      fi
    else
      isclosed=1
    fi
    [ -n "$d" ] && showdebug
#    unset noprint
  fi

}

printvalue() {
  [ -z "$1" ] && return
  valuename="${index[0]}"
  for ((n=1; n<=$i; n++)) ; do
    valuename="${valuename}/${index[$n]}"
  done
  valuename=${valuename%/}
  echo "${valuename}|${1}"
  unset valuename openedby
}

#( IFS='' ; for LINE in `cat $1` ; do echo "${LINE}" ; done ) | while read L ; do a=`printf "$L"|sed 's|{|\n{\n|g;s|}|\n}\n|g;s|,|\n|g'` ; echo "$a" | while read b ; do parseline $b ; echo ">>> $i $z" ; z=$i ; done ; done
cat $1|sed 's|{|\n{\n|g;s|},|\n}\n,\n|g;s|}|\n}\n|g;s|",|"\n,\n|g;s|,"|\n,\n"|g;s|,$|\n,|g;s|,[[:space:]]"|\n,\n"|g;s|\[|\n\[\n|g;s|\],|\n\]\n,\n|g;s|\]|\n\]\n|g' | grep -v ^$ | while read b ; do [ -n "$b" ] && parseline "${b}" ; done
unset branch index ndcont cont i LINE node

