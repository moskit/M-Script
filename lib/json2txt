#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

declare -i i
i=0
declare -a index
index[$i]=0
emptyobj=true
#d=1
declare -a arrayi
declare -i ai
ai=0
quoopened=false
quoclosed=true
objclosed=true
arrclosed=false

showdebug() {
  if [ -n "$1" ]; then
    echo "  Parsing line \"$line\""
    echo "    < index=$i  var[$i]=${index[$i]}  value=$value"
    echo "    < quoopened=$quoopened  quoclosed=$quoclosed  arrclosed=$arrclosed  objclosed=$objclosed"
    echo "    < emptyobj=$emptyobj  arrayi=${arrayi[*]}  ai=$ai"
  else
    echo "    > index=$i  var[$i]=${index[$i]}  value=$value"
    echo "    > quoopened=$quoopened  quoclosed=$quoclosed  arrclosed=$arrclosed  objclosed=$objclosed"
    echo "    > emptyobj=$emptyobj  arrayi=${arrayi[*]}  ai=$ai"
  fi
}

parseline() {
  line="$1"
  $quoclosed && $quoopened && quoopened=false
  [ -n "$d" ] && showdebug was
  if [ "X$line" == "X{" ] ; then
    objclosed=false
    #$emptyobj || index[$i]=`expr ${index[$i]} + 1`
    if [ -n "$value" ] ; then
      printvalue "$value" && unset value
    fi
    i+=1
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X}" ] ; then
    emptyobj=true
    $quoclosed && objclosed=true
    if [ -n "$value" ] ; then
      printvalue "$value" && unset value
    fi
    unset index[$i]
    i+=-1
    # workaround for a mere list of objects, we want to count them
    [ $i -eq 0 ] && index[$i]=`expr ${index[$i]} + 1`
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X[" ] ; then
    # it is an array only if it's a beginning of a new value
    if $quoclosed || [ -z "$value" ] ; then
      arrclosed=false
      i+=1
      arrayi=( ${arrayi[*]} $i )
      index[$i]=0
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X]" ] ; then
    #arrayi=false
    if $quoclosed ; then
      printvalue "$value" && unset value
      arrclosed=true
      ai=${#arrayi[*]} ; ai+=-1
      if [ -n "$ai" ] ; then
        if [[ ${arrayi[$ai]} -eq $i ]] ; then
          unset arrayi[$ai]
        fi
        unset index[$i]
        i+=-1
      fi
      
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == 'X"' ] ; then
    if ! $quoopened ; then
      quoopened=true
      quoclosed=false
    else
      quoclosed=true
    fi
    value="${value}${line}"
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X," ] ; then
    if $quoclosed ; then
      printvalue "$value" && unset value
      if ! $arrclosed ; then
        if [ -n "${arrayi[*]}" ] ; then
          ai=${#arrayi[*]} ; ai+=-1
          if [ $ai -ge 0 ] ; then
            if [[ ${arrayi[$ai]} -eq $i ]] ; then
              index[$i]=`expr ${index[$i]} + 1`
            else
              unset index[$i]
            fi
          else
            unset index[$i]
          fi
        else
          unset index[$i]
        fi
      else
        unset index[$i]
        arrclosed=false
      fi
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ "X$line" == "X:" ] ; then
    if $quoclosed ; then
      [ -z "${index[$i]}" ] && [ -n "$value" ] && index[$i]="$value" && unset value
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
    return
  fi
  if [ -n "$line" ] ; then
    $emptyobj && emptyobj=false
    [ -n "$d" ] && echo "        no conditions met"
    isvarvalueline=`expr "$line" : '.*:.*' 2>/dev/null`
    [ -z "$isvarvalueline" ] && isvarvalueline=0
    if [ $isvarvalueline -eq 0 ] ; then
      # it is not a var:value line
      value="${value}${line}"
      [ -n "$d" ] && showdebug
      return
    fi
    # below is applicable only if it's not a part of a string value
    if $quoclosed ; then
      # on the left of the first colon there must be a variable name
      varname="${line%%:*}"
      # sanitizing it
      varname=`expr "$varname" : "[[:space:]]*\"\(.*\)\""`
      index[$i]="$varname"
      # everything on the right (whatever it is)
      value="${line##*:}" ; value=`expr "$value" : "[[:space:]]*\(.*\)"`
    else
      value="${value}${line}"
    fi
    [ -n "$d" ] && showdebug
#    unset noprint
  fi

}

printvalue() {
  [ -z "$1" ] && return
  valuename="${index[0]}"
  for ((n=1; n<=$i; n++)) ; do
    valuename="$valuename/${index[$n]}"
  done
  valuename=${valuename%/}
  echo "$valuename|${1}"
  unset valuename
  quoopened=false
  objclosed=false
}

#( IFS='' ; for LINE in `cat $1` ; do echo "${LINE}" ; done ) | while read L ; do a=`printf "$L"|sed 's|{|\n{\n|g;s|}|\n}\n|g;s|,|\n|g'` ; echo "$a" | while read b ; do parseline $b ; echo ">>> $i $z" ; z=$i ; done ; done
cat $1|sed 's|{|\n{\n|g;s|},|\n}\n,\n|g;s|}|\n}\n|g;s|"|\n"\n|g;s|,|\n,\n|g;s|,$|\n,|g;s|,[[:space:]]"|\n,\n"|g;s|\[|\n\[\n|g;s|\],|\n\]\n,\n|g;s|\]|\n\]\n|g;s|:|\n:\n|g' | grep -v ^$ | while read b ; do [ -n "$b" ] && parseline "${b}" ; done
unset branch index ndcont cont i LINE node

