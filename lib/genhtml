#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")

STAT=`which stat 2>/dev/null`
LOG="$M_ROOT/logs/dashboard.log"
[ -z "$STAT" ] && log "stat utility not found" && exit 1

possible_options="type css folder"
necessary_options="type"
[ $# -eq 0 ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
IFS1=$IFS
IFS='-'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac

  for option in `echo $possible_options | sed 's/ /-/g'`; do 
    [ -n "$s_optname" ] && [ "X$s_optname" == "X$option" ] && eval "$option=\"${s_optarg}\"" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options> <textfile>"
  echo 
  echo "Options:"
  echo
  echo "  --type=<type>            - dash, report, alert"
  echo "                             default is dash."
  echo "  --css=<CSS class>        - dash slot class (dash type only)"
  exit 0
fi

log() {
  echo "`date +"%m.%d %H:%M:%S"` ${0##*/}: ${@}">>$LOG
}

[ -z "$folder" ] && folder="servers/localhost"
[ -d "$M_ROOT/www/$folder" ] || install -d "$M_ROOT/www/$folder"
source "$M_ROOT/conf/dash.conf"
source "$M_ROOT/conf/mon.conf"
[ -z "$freqdef" ] && freqdef=$FREQ

textfile="$s_param"
case $type in
  dash)
    id="`date +"%m.%d_%H:%M:%S"`"
    serverid="`hostname 2>/dev/null || hostname -f 2>/dev/null || ifconfig | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1' | tail -1`"
    echo "<div id=\"${id}_${serverid}\" title=\"$id\" class=\"chunk $css\" onclick=\"showData('${id}_${serverid}','/${folder%%/*}')\">&nbsp;<div id=\"data_${id}_${serverid}\" class=\"dhtmlmenu\" style=\"display: none\"></div></div>" >> "$M_ROOT/www/$folder/dash.html" 2>>"$M_ROOT/logs/dashboard.log"
    "$M_ROOT/lib/txt2html" "$textfile" >> "$M_ROOT/www/$folder/${id}_${serverid}.html"
    exc=`cat "$M_ROOT/www/$folder/dash.html" | wc -l` 2>>"$M_ROOT/logs/dashboard.log"
    exc=`expr $exc - $slotline_length` || exc=`expr $exc - 50`
    if [[ $exc -gt 0 ]] ; then
      for ((i=1; i<=${exc}; i++)) ; do
        sed -i '1d' "$M_ROOT/www/$folder/dash.html" 2>>"$M_ROOT/logs/dashboard.log"
      done
    fi
    oldestchunk=`head -1 "$M_ROOT/www/$folder/dash.html"`
    oldestfile="`expr "$oldestchunk" : '<div id=\"\(.*\)\" title'`".html
    badluck=false # we are lucky by default
    if [ -f "$M_ROOT/www/$folder/$oldestfile" ]; then
      oldestfiledate=`$STAT -c "%z" "$M_ROOT/www/$folder/$oldestfile"`
      # sanitizing, just in case
      oldestfiledate=`date -d "$oldestfiledate" +"%s" 2>/dev/null`
      [ -z "$oldestfiledate" ] && badluck=true
    else
      badluck=true
    fi
    if $badluck ; then
      log "unable to find the oldest file in folder ${folder}. Using calculation based on frequency"
      timerange=`expr $slotline_length \* $freqdef / 60` || timerange=166
    else
      log "oldest file timestamp for folder ${folder}: $oldestfiledate"
      timenow=`date +"%s"`
      timerange=`expr \( $timenow - $oldestfiledate \) / 60 + 1`
    fi
    if [ `expr "$timerange" : ".*[^0-9]"` -eq 0 ]; then
      find "$M_ROOT/www/$folder/" -type f -mmin +$timerange -exec rm '{}' \;
    else
      echo "ERROR: old files not removed from $M_ROOT/www/$folder" >> "$M_ROOT/logs/dashboard.log"
    fi
    ;;
  report)
    "$M_ROOT/lib/txt2html" "$textfile" >> "$M_ROOT/www/$folder/report.html" 2>>"$M_ROOT/logs/dashboard.log"
    ;;
esac
IFS=$IFS1

