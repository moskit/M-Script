#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

declare -i i
i=0
declare -a branch
declare -a index
declare -a ndarr
debug=false

addnode() {
  nd=$1
  selfclosed=false
  expr "$nd" : ^\? >/dev/null && return 0
  expr "$nd" : .*/$ >/dev/null && nd=${nd%/} && selfclosed=true
  #nd=`echo "$nd" | sed 's|"|\\\"|g'`
  $debug && echo "==== $nd ="
  if `expr "$nd" : ^\" >/dev/null` ; then
    tag=`expr "$nd" : "^\(\".*\"\)"`
  else
    tag=`expr "$nd" : "^\([^\ ]*\)\(\ \|$\|/\)"`
  fi
  vars=`expr "$nd" : "^$tag\ \(.*=.*\)\($\|/$\)"`
  
  #vars=$(for n in $nd ; do a=`expr "$n" : "\(.*=\".*\"\)"` ; [ -n "$a" ] && b=`expr "$a" : "\(.*\)="` && c=`expr "$a" : ".*=\"\(.*\)\""` && echo "\"$b\"|\"$c\"" ;  done)
  $debug && echo "  == $tag ="
  index[$i]="$tag"
  unset ndcont
  if [ $i -gt 1 ] ; then
    # this means the node is closed and the previous value was its content:
    if [ "X${index[$i-2]}" == "X${nd#/}" ] ; then
      ndcont=${index[$i-1]}
    fi
  fi
  n=${#branch[*]}
  [ -z "${ndarr[$n]}" ] && ndarr[$n]=0
  $debug && echo "X/${index[$i]} == X${index[$i-1]}"
  if [ $i -ne 0 ]; then
    [ "X/${index[$i]}" == "X${index[$i-1]}" ] && ndarr[$n]=`expr ${ndarr[$n]} + 1`
  fi
  
  if $debug ; then
    echo -e "----------------------------\n$i | $n | ${ndarr[$n]} --  $ndcont  --  ${index[$i]}"
    for ((l=0; l<$n; l++)) ; do
      txtline="$txtline\"${branch[$l]}\"/"
    done
    echo "***** $txtline"
    unset txtline
  fi
  
  if [ -n "$ndcont" ] ; then
    # we got the full line, printing
    for ((l=0; l<$n-2; l++)) ; do
      txtline="$txtline\"${branch[$l]}\"/${ndarr[$l]}/"
    done
    txtline="$txtline\"${branch[$n-2]}\"/${ndarr[$n-2]}|"
    txtline="$txtline\"${branch[$n-1]}\""
    echo "$txtline"
    unset txtline
    $debug && echo "     unsetting branch[$n-1] :: ${branch[$n-1]}"
    $debug && echo "     unsetting branch[$n-2] :: ${branch[$n-2]}"
    unset branch[$n-1] branch[$n-2] ndarr[$n]
  else
    branch[$n]="$tag"
    if [ -n "$vars" ]; then
      for ((l=0; l<=$n; l++)) ; do
        txtline="$txtline\"${branch[$l]}\"/${ndarr[$l]}/"
      done
      echo "${txtline%/}|$vars"
      unset txtline vars
    fi
    if $selfclosed ; then
      $debug && echo "     self-closed, unsetting branch[$n] :: ${branch[$n]}"
      unset branch[$n] ndarr[$n]
    else
      $debug && echo "     $n: X${branch[$n]} == X/${branch[$n-1]}"
      if [ $n -ne 0 ]; then
        if [ "X${branch[$n]}" == "X/${branch[$n-1]}" ] 2>/dev/null ; then
          $debug && echo "     unsetting branch[$n] :: ${branch[$n]}" && echo "     unsetting branch[$n-1] :: ${branch[$n-1]}"
          unset branch[$n-1] branch[$n] ndarr[$n]
        fi
      fi
    fi
  fi
  i+=1
}

( cat $1 | tr -d '\r\n' | tr '<>' '\n' | grep -v ^$ ) | while read node ; do ([ -n "$node" ] && [ "$node" != "|" ]) && addnode "$node"; done

unset branch index ndcont cont i LINE node ndarr

