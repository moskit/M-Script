#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

fpath=$(readlink -f "$BASH_SOURCE")
fcomm=${fpath##*/}
fpath=${fpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$fpath/../")
[ -f "$M_ROOT/actions.in" ] || exit 0
[ `cat "$M_ROOT/actions.in" | wc -l` -eq 0 ] && rm "$M_ROOT/actions.in" && exit 0

LOG="$M_ROOT/logs/actions.log"
source "$M_ROOT/lib/functions.sh"

possible_options="mode limit help"

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optname=`echo $s_optname | tr -d '-'`
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1
if [ -n "$help" ]; then
cat << "EOF"

Usage: $fcomm <options>
  where <options>:
    
    --mode=<distinct,all>
    --limit=N
    
EOF
exit 0
fi

job_allowed() {
  [ -f "$M_ROOT"/conf/actions.allowed.list ] || return 0
  if [ `grep -c $JOBCMD_E "$M_ROOT"/conf/actions.allowed.list` -ne 0 ] ; then
    if [ `grep -c $JOBID "$M_TEMP/actions.auth.list"` -ne 0 ] ; then
      log "job: $JOBCMD ID: $JOBID is allowed"
      return 0
    else
      log "job: $JOBCMD ID: $JOBID is not allowed"
      return 1
    fi
  fi
}

[ -z "$mode" ] && mode="distinct"
[ -z "$limit" ] && limit=5
newfile=false
[ -f "$M_ROOT/actions.q" ] || newfile=true

while read action ; do
  [ -z "$action" ] && continue
  JOBINTIME=`echo "$action" | cut -d'|' -f2`
  JOBCMD=`echo "$action" | cut -d'|' -f1`
  JOBAUTH=`echo "$action" | cut -d'|' -f3`
  if [ -n "$JOBINTIME" ] ; then
    JOBID="`echo "$action" | md5sum | cut -b 1,2,3,4,5`_${JOBINTIME}"
  else
    JOBID="`echo "$action" | md5sum | cut -b 1,2,3,4,5`_`date +"%y%m%d%H%M%S"`"
  fi
  [ -z "$JOBAUTH" ] && echo "$JOBID" >> "$M_TEMP/actions.auth.list"
  JOBCMD_E=`echo "$JOBCMD" | sed 's|/|\\\\/|g;s| |\\\\ |g'`
  if job_allowed ; then
    echo "${JOBCMD}|${JOBID}" >> "$M_ROOT/actions.q"
  fi
  if [ "$mode" == "distinct" ] ; then
    sed -i "/^${JOBCMD_E}|/d" "$M_ROOT/actions.in"
  else
    sed -i "/^${JOBCMD_E}|${JOBINTIME}|/d" "$M_ROOT/actions.in"
  fi
  sed -i "/^${JOBCMD_E}$/d" "$M_ROOT/actions.in"
  sed -i "/^${JOBID}$/d" "$M_TEMP/actions.auth.list"
done<"$M_ROOT/actions.in"

$newfile && chmod 600 "$M_ROOT/actions.q"

for ((n=0; n<$limit; n++)); do
  JOB=`head -1 "$M_ROOT/actions.q" | cut -d'|' -f1`
  [ -z "$JOB" ] && sed -i "1d" "$M_ROOT"/actions.q && continue
  JOBID=`head -1 "$M_ROOT/actions.q" | cut -d'|' -f2`
  log "--- executing job: $JOB ID: $JOBID"
  sed -i "1d" "$M_ROOT"/actions.q && log "job: $JOB ID: $JOBID has been removed from the queue"
  $JOB >> $LOG 2>&1
  res=$?
  if [ $res -ne 0 ] ; then
    log "=== job: $JOB ID: $JOBID has failed: exit status $res"
    echo "${JOB}|${JOBID}|$res" >> "$M_ROOT/actions.failed"
  else
    log "=== job: $JOB ID: $JOBID has finished successfully"
  fi
  # exit status numbers 5 and 13 allow to block the script for additional
  # $BLOCK_ERR5 and $BLOCK_ERR13 cycles respectively
  if [ $res -eq 13 ] && [ -n "$BLOCK_ERR13" ]; then
    cclbl=`grep -c "^${JOBCMD_E}|" "$M_TEMP/actions.blocked"`
    [ $cclbl -ne 0 ] && sed -i "/^${JOBCMD_E}|/d" "$M_TEMP/actions.blocked" && echo "${JOB}|$BLOCK_ERR13" >> "$M_TEMP/actions.blocked"
  fi
  if [ $res -eq 5 ] && [ -n "$BLOCK_ERR5" ]; then
    cclbl=`grep -c "^${JOBCMD_E}|" "$M_TEMP/actions.blocked"`
    [ $cclbl -ne 0 ] && sed -i "/^${JOBCMD_E}|/d" "$M_TEMP/actions.blocked" && echo "${JOB}|$BLOCK_ERR5" >> "$M_TEMP/actions.blocked"
  fi
done




