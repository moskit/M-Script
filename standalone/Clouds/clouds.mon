#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1

source "$M_ROOT/conf/mon.conf"
source "$rpath/${rcommand%.mon}.conf"
M_TEMP="$M_TEMP/cloud"

gen_html_table() {
IFS1=$IFS
IFS='
'
echo -n "<table><tr style=\"font-weight: bold\"><td class=\"srvtbl_id\">ID</td><td class=\"srvtbl_name\">Name</td><td class=\"srvtbl_status\">Status</td><td class=\"srvtbl_pubIP\">Public IP</td><td class=\"srvtbl_privIP\">Private IP</td><td class=\"srvtbl_cluster\">Cluster</td><td class=\"srvtbl_image\">Image</td><td class=\"srvtbl_size\">Size</td></tr>"
for CL in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f6 | sort | uniq`; do

  for SN in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f1,2,6 | grep \|$CL$ | sort` ; do
    ID="${SN%%|*}"
    LN=`grep ^$ID\| "$M_TEMP/$cloud/full.servers.list"`
    name="`echo $LN | cut -d'|' -f2`"
    status="`echo $LN | cut -d'|' -f3`"
    pubIP="`echo $LN | cut -d'|' -f4`"
    privIP="`echo $LN | cut -d'|' -f5`"
    cluster="`echo $LN | cut -d'|' -f6`"
    `grep -q ^$cluster\| "$M_ROOT/conf/clusters.conf"` && trclass="thiscluster" || trclass="thatcluster"
    image="`echo $LN | cut -d'|' -f7`"
    size="`echo $LN | cut -d'|' -f8`"
    echo "<tr class=\"$trclass\" id=\"$ID\"><td class=\"srvtbl_id\" id=\"${ID}_id\">$ID</td><td class=\"srvtbl_name\" id=\"${ID}_name\">$name</td><td class=\"srvtbl_status\" id=\"${ID}_status\">$status</td><td class=\"srvtbl_pubIP\" id=\"${ID}_pubIP\">$pubIP</td><td class=\"srvtbl_privIP\" id=\"${ID}_privIP\">$privIP</td><td class=\"srvtbl_cluster\" id=\"${ID}_cluster\">$cluster</td><td class=\"srvtbl_image\" id=\"${ID}_image\">$image</td><td class=\"srvtbl_size\" id=\"${ID}_size\">$size</td></tr>"
  done
done

  for SN in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f1,2,6 | grep \|$ | sort` ; do
    ID="${SN%%|*}"
    LN=`grep ^$ID\| "$M_TEMP/$cloud/full.servers.list"`
    name="`echo $LN | cut -d'|' -f2`"
    status="`echo $LN | cut -d'|' -f3`"
    pubIP="`echo $LN | cut -d'|' -f4`"
    privIP="`echo $LN | cut -d'|' -f5`"
    cluster="`grep ^$privIP\| "$M_ROOT/servers.list" | cut -d'|' -f5`"
    [ -z "$cluster" ] && cluster="`grep ^$pubIP\| "$M_ROOT/servers.list" | cut -d'|' -f5`"
    [ -z "$cluster" ] && trclass="nocluster" || trclass="mancluster"
    image="`echo $LN | cut -d'|' -f7`"
    size="`echo $LN | cut -d'|' -f8`"
    echo "<tr class=\"$trclass\" id=\"$ID\"><td class=\"srvtbl_id\" id=\"${ID}_id\">$ID</td><td class=\"srvtbl_name\" id=\"${ID}_name\">$name</td><td class=\"srvtbl_status\" id=\"${ID}_status\">$status</td><td class=\"srvtbl_pubIP\" id=\"${ID}_pubIP\">$pubIP</td><td class=\"srvtbl_privIP\" id=\"${ID}_privIP\">$privIP</td><td class=\"srvtbl_cluster\" id=\"${ID}_cluster\">$cluster</td><td class=\"srvtbl_image\" id=\"${ID}_image\">$image</td><td class=\"srvtbl_size\" id=\"${ID}_size\">$size</td></tr>"
    
  done
echo "</table>"
IFS=$IFS1
}

clouds=( `cat "$M_ROOT/conf/clusters.conf" | grep -v ^# | cut -d'|' -f12 | grep -v ^$ | sort | uniq` )

declare -a catline

for cloud in ${clouds[*]} ; do
  log "cloud $cloud"
  export CLOUD=$cloud
  catline+=("$M_ROOT/cloud/servers.list.${cloud}")
  source "$M_ROOT/conf/clouds/${CLOUD}.conf"
  source "$M_ROOT/lib/cloud_functions.sh"
  [ -z "$API_CALLS_FREQ" ] && API_CALLS_FREQ=1
  if [[ $API_CALLS_FREQ -gt 1 ]]; then
    cyclescount=`cat "$rpath/${cloud}.cycles.count"`
    if [[ $cyclescount -ge $API_CALLS_FREQ ]]; then
      echo 0 > "$rpath/${cloud}.cycles.count"
      log "updating servers.list"
      "$M_ROOT"/cloud/$CLOUD_PROVIDER/show_servers --cloud=$cloud --update_servers_list
      res=$?
      [ $res -eq 10 ] && log "failed to acquire cloud operations lock" && exit 0
      [ $res -eq 0 ] && log "list updated successfully"
      [ $res -eq 1 ] && log "update_servers_list error" && exit 1
    else
      echo `expr $cyclescount + 1 2>/dev/null || echo 0` > "$rpath/${cloud}.cycles.count"
      exit 10
    fi
  else
    log "updating servers.list"
    "$M_ROOT"/cloud/$CLOUD_PROVIDER/show_servers --cloud=$cloud --update_servers_list
    res=$?
    [ $res -eq 10 ] && log "failed to acquire cloud operations lock" && exit 0
    [ $res -eq 0 ] && log "list updated successfully"
    [ $res -eq 1 ] && log "update_servers_list error" && exit 1
  fi

  [ `cat "$M_TEMP/$cloud/full.servers.list" 2>/dev/null | wc -l` -eq 0 ] && log "servers list is empty for this cloud, update forced" && echo -n > "$M_TEMP/$cloud/show_servers.resp.prev"
  if [ -f "$M_TEMP/$cloud/show_servers.resp" ]; then
    [ -f "$M_TEMP/$cloud/show_servers.resp.prev" ] || echo -n > "$M_TEMP/$cloud/show_servers.resp.prev"
    if [ -n "`$DIFF -q "$M_TEMP/$cloud/show_servers.resp" "$M_TEMP/$cloud/show_servers.resp.prev" 2>&1`" ]; then
      log "getting full list"
      "$M_ROOT"/cloud/common/show_servers --cloud="$cloud" --noupdate --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
      if [ `cat "$M_TEMP/$cloud/full.servers.list" | wc -l` -eq 0 ]; then
        log "no hosts in the response file, querying API"
        "$M_ROOT"/cloud/common/show_servers --cloud="$cloud" --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
        res=$?
        [ $res -eq 10 ] && log "failed to acquire cloud operations lock" && exit 0
        [ $res -eq 0 ] && log "list received"
        [ $res -eq 1 ] && log "API query error" && exit 1
        cp "$M_TEMP/$cloud/show_servers.resp" "$M_TEMP/$cloud/show_servers.resp.prev"
      fi
    else
      log "no changes found"
      continue
    fi
  else
    log "no response found, querying"
    "$M_ROOT"/cloud/common/show_servers --cloud="$cloud" --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
    res=$?
    [ $res -eq 10 ] && log "failed to acquire cloud operations lock" && exit 0
    [ $res -eq 0 ] && log "list received"
    [ $res -eq 1 ] && log "API query error" && exit 1
  fi
  gen_html_table > "$M_TEMP/$cloud/full.servers.list.html"
  for cl in `cat "$M_ROOT/conf/clusters.conf" | grep -vE '^#|[[:space:]]*#' | cut -d'|' -f1,7,12 | grep \|${cloud}$ | grep -v ^$ | grep -v \|\| | cut -d'|' -f1` ; do
    test_cluster_limit "$cl" || echo "<***> Cluster $cl has more servers than maximum number defined in conf/clusters.conf"
    test_cluster_minimum "$cl" || echo "<***> Cluster $cl has less servers than minimal number defined in conf/clusters.conf"
  done
  
done

log "concatenating cloud lists: ${catline[*]}"
[ -n "${catline[*]}" ] && cat "${catline[*]}" > "$M_ROOT/servers.list" 2>/dev/null

exit 10

