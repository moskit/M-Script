#!/bin/bash
# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"
log "starting.."

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/cloud.conf"
source "$M_ROOT/lib/cloud_functions.sh"
source "$rpath/${rcommand%.mon}.conf"
M_TEMP="$M_TEMP/cloud"

gen_html_table() {
IFS1=$IFS
IFS='
'
echo -n "<table><tr style=\"font-weight: bold\"><td class=\"srvtbl_id\">ID</td><td class=\"srvtbl_name\">Name</td><td class=\"srvtbl_status\">Status</td><td class=\"srvtbl_pubIP\">Public IP</td><td class=\"srvtbl_privIP\">Private IP</td><td class=\"srvtbl_cluster\">Cluster</td><td class=\"srvtbl_image\">Image</td><td class=\"srvtbl_size\">Size</td></tr>"
for CL in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f6 | sort | uniq`; do

  for SN in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f1,2,6 | grep \|$CL$ | sort` ; do
    ID="${SN%%|*}"
    LN=`grep ^$ID\| "$M_TEMP/$cloud/full.servers.list"`
    name="`echo $LN | cut -d'|' -f2`"
    status="`echo $LN | cut -d'|' -f3`"
    pubIP="`echo $LN | cut -d'|' -f4`"
    privIP="`echo $LN | cut -d'|' -f5`"
    cluster="`echo $LN | cut -d'|' -f6`"
    `grep -q ^$cluster\| "$M_ROOT/conf/clusters.conf"` && trclass="thiscluster" || trclass="thatcluster"
    image="`echo $LN | cut -d'|' -f7`"
    size="`echo $LN | cut -d'|' -f8`"
    echo "<tr class=\"$trclass\" id=\"$ID\"><td class=\"srvtbl_id\" id=\"${ID}_id\">$ID</td><td class=\"srvtbl_name\" id=\"${ID}_name\">$name</td><td class=\"srvtbl_status\" id=\"${ID}_status\">$status</td><td class=\"srvtbl_pubIP\" id=\"${ID}_pubIP\">$pubIP</td><td class=\"srvtbl_privIP\" id=\"${ID}_privIP\">$privIP</td><td class=\"srvtbl_cluster\" id=\"${ID}_cluster\">$cluster</td><td class=\"srvtbl_image\" id=\"${ID}_image\">$image</td><td class=\"srvtbl_size\" id=\"${ID}_size\">$size</td></tr>"
  done
done

  for SN in `cat "$M_TEMP/$cloud/full.servers.list" | cut -d'|' -f1,2,6 | grep \|$ | sort` ; do
    ID="${SN%%|*}"
    LN=`grep ^$ID\| "$M_TEMP/$cloud/full.servers.list"`
    name="`echo $LN | cut -d'|' -f2`"
    status="`echo $LN | cut -d'|' -f3`"
    pubIP="`echo $LN | cut -d'|' -f4`"
    privIP="`echo $LN | cut -d'|' -f5`"
    cluster="`grep ^$privIP\| "$M_ROOT/servers.list" | cut -d'|' -f5`"
    [ -z "$cluster" ] && cluster="`grep ^$pubIP\| "$M_ROOT/servers.list" | cut -d'|' -f5`"
    [ -z "$cluster" ] && trclass="nocluster" || trclass="mancluster"
    image="`echo $LN | cut -d'|' -f7`"
    size="`echo $LN | cut -d'|' -f8`"
    echo "<tr class=\"$trclass\" id=\"$ID\"><td class=\"srvtbl_id\" id=\"${ID}_id\">$ID</td><td class=\"srvtbl_name\" id=\"${ID}_name\">$name</td><td class=\"srvtbl_status\" id=\"${ID}_status\">$status</td><td class=\"srvtbl_pubIP\" id=\"${ID}_pubIP\">$pubIP</td><td class=\"srvtbl_privIP\" id=\"${ID}_privIP\">$privIP</td><td class=\"srvtbl_cluster\" id=\"${ID}_cluster\">$cluster</td><td class=\"srvtbl_image\" id=\"${ID}_image\">$image</td><td class=\"srvtbl_size\" id=\"${ID}_size\">$size</td></tr>"
    
  done
echo "</table>"
IFS=$IFS1
}

clouds=( $CLOUD `cat "$M_ROOT/conf/clusters.conf" | grep -v ^# | cut -d'|' -f12 | grep -v ^$ | sort | uniq` )

# might be manual edits of servers.list: non-cloud servers and servers added by
# start_server that have not yet reported by API (there might be delays)
if [ -z "`$DIFF -q "$M_ROOT/servers.list" "$M_TEMP/servers.list" 2>&1`" ]; then
  log "no changes in servers.list"
else
  cp "$M_ROOT/servers.list" "$M_TEMP/servers.list"
  log "changes found in servers.list"
fi

for cloud in ${clouds[*]} ; do
# update_servers_list command does not remove manual records from servers.list
# and it updates show_servers.resp for each cloud; thus we have a full list:
# current servers.list backuped to $M_TEMP and clouds' responses
  log "cloud $cloud"
  [ -z "$API_CALLS_FREQ" ] && API_CALLS_FREQ=1
  if [[ $API_CALLS_FREQ -gt 1 ]]; then
    cyclescount=`cat "$rpath/${cloud}.cycles.count"`
    if [[ $cyclescount -ge $API_CALLS_FREQ ]]; then
      echo 0 > "$rpath/${cloud}.cycles.count"
      [ -x $M_ROOT/$cloud/update_servers_list ] && $M_ROOT/$cloud/update_servers_list
    else
      echo `expr $cyclescount + 1 2>/dev/null || echo 0` > "$rpath/${cloud}.cycles.count"
      exit 0
    fi
  else
    [ -x $M_ROOT/$cloud/update_servers_list ] && $M_ROOT/$cloud/update_servers_list
  fi

  [ `cat "$M_TEMP/$cloud/full.servers.list" 2>/dev/null | wc -l` -eq 0 ] && log "servers list is empty for this cloud, update forced" && echo > "$M_TEMP/$cloud/show_servers.resp.prev"
  if [ -f "$M_TEMP/$cloud/show_servers.resp" ]; then
    [ -f "$M_TEMP/$cloud/show_servers.resp.prev" ] || echo > "$M_TEMP/$cloud/show_servers.resp.prev"
    if [ -n "`$DIFF -q "$M_TEMP/$cloud/show_servers.resp" "$M_TEMP/$cloud/show_servers.resp.prev" 2>&1`" ]; then
      log "getting full list"
      "$M_ROOT"/cloud/$cloud/show_servers --noupdate --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
      [ `cat "$M_TEMP/$cloud/full.servers.list" | wc -l` -eq 0 ] && log "no hosts in the response file, querying" && "$M_ROOT"/cloud/$cloud/show_servers --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
      cp "$M_TEMP/$cloud/show_servers.resp" "$M_TEMP/$cloud/show_servers.resp.prev"
    else
      log "no changes found"
    fi
  else
    log "no response found, querying"
    "$M_ROOT/cloud/$cloud"/show_servers --view=table --all --resolveids > "$M_TEMP/$cloud/full.servers.list"
  fi
  gen_html_table > "$M_TEMP/$cloud/full.servers.list.html"
done

# By now the diff of current and backuped servers.list files contains
# non-cloud servers (including those not yet reported by API)
noncloud=`$DIFF "$M_ROOT/servers.list" "$M_TEMP/servers.list" 2>&1 | grep '^>' | sed 's|^> ||'`
if [ -n "$noncloud" ]; then
  cloud="noncloud"
  [ -d "$M_TEMP/$cloud" ] || install -d "$M_TEMP/$cloud"
  [ -f "$M_TEMP/$cloud/full.servers.list" ] && rm "$M_TEMP/$cloud/full.servers.list"
  IFS1=$IFS; IFS='
'
  for LINE in `echo $noncloud` ; do
    ncip=`echo $LINE | cut -d'|' -f1`
    ncname=`echo $LINE | cut -d'|' -f4`
    nccluster=`echo $LINE | cut -d'|' -f5`
    echo "|$ncname||$ncip||$nccluster||" >> "$M_TEMP/$cloud/full.servers.list"
  done
  IFS=$IFS1
fi

for cl in `cat "$M_ROOT/conf/clusters.conf" | grep -vE '^#|[[:space:]]*#|^$' | cut -d'|' -f1,7 | grep -v ^$ | grep -v \|$ | cut -d'|' -f1` ; do
  check_cluster_limit "$cl" || echo "<***> Cluster $cl has more servers than maximum number defined in conf/clusters.conf"
  check_cluster_minimum "$cl" || echo "<***> Cluster $cl has less servers than minimal number defined in conf/clusters.conf"
done









  


