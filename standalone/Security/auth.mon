#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")

source "$M_ROOT/lib/functions.sh" # includes mon.conf
blockip=false
source "$rpath/${rcommand%.mon}.conf"

[ -z "$file" ] && echo "file is not defined" >&2 && exit 1
interval=`expr $FREQ + $timeshift 2>/dev/null` || interval=210
interval="$interval sec"
[ -z "$maxlines" ] && maxlines=500
[ -z "$maxfail" ] && maxfail=5
[ -z "$maxinvalid" ] && maxinvalid=3
[ -z "$maxfailroot" ] && maxfailroot=3
[ -z "$timeformat" ] && timeformat="%b %_d %H:%M:%S"
[ -z "$method" ] && method="REJECT"
export BLOCK_CALLER="$rcommand"
LOG="$M_ROOT/logs/sa.log"

"$M_ROOT"/helpers/unblock_ip tmp

logged=`"$M_ROOT"/helpers/logreader --file=$file --timeformat="$timeformat" --maxlines=$maxlines --interval="$interval"`

[ -n "$logged" ] && date_header

invalidusers=`echo "$logged" | grep "Invalid\\ user"`
rootfails=`echo "$logged" | grep "Failed\\ password\\ for\\ root"`
userfails=`echo "$logged" | grep "Failed\\ password\\ for\\ " | grep -v "Failed\\ password\\ for\\ root" | grep -v "Failed\\ password\\ for\\ invalid"`
loginbykey=`echo "$logged" | grep "Accepted\\ publickey\\ for"`
loginbypass=`echo "$logged" | grep "Accepted\\ password\\ for"`

if [ -n "$loginbykey" ]; then
  echo -e "\n<OK> Successful logins using key authentication:\n-------------------------------------------------\n"
  echo "$loginbykey" | grep -oE "for\ .*\ from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2,3,4 | sed 's|^|<OK> |'
fi
if [ -n "$loginbypass" ]; then
  echo -e "\n<OK> Successful logins using password authentication:\n------------------------------------------------------\n"
  echo "$loginbypass" | grep -oE "for\ .*\ from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2,3,4 | sed 's|^|<OK> |'
fi

if [ -n "$rootfails" ]; then
  echo -e "\n<**> Failed attempts to login as root:\n---------------------------------------\n"
  rootfails=`echo "$rootfails" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  for ipaddr in `echo "$rootfails" | sort | uniq` ; do
    invalid=`echo "$rootfails" | grep -c "^${ipaddr}$"`
    score=$(($invalid * 100 / $maxfailroot))
    echo "<**> ${ipaddr}: $invalid attempts"
    $blockip && iptoblock+=( ${ipaddr}/${score} )
  done
fi

if [ -n "$invalidusers" ]; then
  echo -e "\n<**> Attempts to login as non-existing user:\n---------------------------------------------\n"
  invalidusers=`echo "$invalidusers" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  for ipaddr in `echo "$invalidusers" | sort | uniq` ; do
    invalid=`echo "$invalidusers" | grep -c "^${ipaddr}$"`
    score=$(($invalid * 100 / $maxinvalid))
    echo "<**> ${ipaddr}: $invalid attempts"
    $blockip && iptoblock+=( ${ipaddr}/${score} )
  done
fi

if [ -n "$userfails" ]; then
  echo -e "\n<**> Failed attempts to login as non-root user:\n------------------------------------------------\n"
  userfails=`echo "$userfails" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  for ipaddr in `echo "$userfails" | sort | uniq` ; do
    invalid=`echo "$userfails" | grep -c "^${ipaddr}$"`
    score=$(($invalid * 100 / $maxfail))
    echo "<**> ${ipaddr}: $invalid attempts"
    $blockip && iptoblock+=( ${ipaddr}/${score} )
  done
fi

if $blockip ; then
  for ip in `echo "${iptoblock[*]}" | tr ' ' '\n' | sort | uniq`; do
    ipaddr=${ip%%/*}
    invalidtotal=`echo "${iptoblock[*]}" | tr ' ' '\n' | grep "^${ipaddr}/"`
    scoresum=`echo -n "$invalidtotal" | cut -sd'/' -f2 | grep -v ^$ | while read inv ; do echo "$inv + " ; done`
    scoresum=${scoresum%+}
    [ -z "$scoresum" ] && scoresum=0
    currentscore=`echo $scoresum | bc`
    previousscore=`grep "${ipaddr}/" "$rpath/ip_block.tmp" 2>/dev/null | cut -sd'/' -f2 | grep -v ^$ | tail -1`
    [ -z "$previousscore" ] && previousscore=0
    totalscore=`expr $currentscore + $previousscore`
    log "IP: $ipaddr  Sum: $scoresum  Current Score: $currentscore  Previous Score: $previousscore  Total Score: $totalscore"
    sed -i "/${ipaddr}\//d" "$rpath/ip_block.tmp"
    echo "${ipaddr}/$totalscore" >> "$rpath/ip_block.tmp"
    if [ $totalscore -ge 100 ] 2>/dev/null; then
      echo "$ipaddr" | "$M_ROOT"/helpers/block_ip - --method="$method" --block_forever_after=0
    else
      if [ -n "$tmpblock" ]; then
        if [ $totalscore -ge $tmpblock ] 2>/dev/null; then
          echo "$ipaddr" | "$M_ROOT"/helpers/block_ip - --method="$method"
        fi
      fi
    fi
  done
fi


