#!/bin/bash
# Copyright (C) 2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
RECIPIENT_STATS=false
LOG_ERRORS=false
source "$rpath/../../lib/functions.sh"
source "$rpath/postfix.conf"
[ ! -e "$MAILLOG" ] && echo "log file $MAILLOG does not exist!" && exit 1
[ -z "$MAXLINES" ] && MAXLINES=1000
[ `expr "$MAXLINES" : ".*[^0-9]"` -ne 0 ] && MAXLINES=1000

declare -i deferred
declare -i bounced
declare -i sent
deferred=0 ; bounced=0 ; sent=0

timeshift=`cat /tmp/m_script/timeshift 2>/dev/null`
[ -n "$FREQ" -a -n "$timeshift" ] && period=$(($FREQ + $timeshift)) || period=210

log=`$M_ROOT/helpers/logreader --file="$MAILLOG" --period="$period sec" --maxlines=$MAXLINES | grep ' postfix/'`

LOG="$M_ROOT/logs/sa.log"

get_lock

for id in `echo "$log" | grep postfix/qmgr | cut -d':' -f4 | sort | uniq`; do

  from=`echo "$log" | grep postfix/qmgr | grep "$id: from" | cut -d'<' -f2 | cut -d'>' -f1 | head -1`
  # no from normally means that it's relayed to some filter; comment this line
  # if you want these to be shown too
  [ -z "$from" ] && continue
  to=`echo "$log" | grep "$id: to" | cut -d'<' -f2 | cut -d'>' -f1 | head -1`
  info=`echo "$log" | grep 'postfix/smtp\[' | grep -v 'relay=127\.0\.0\.1' | grep 'status=' | grep "$id: to" | tail -1`
  [ -z "$info" ] && continue
  status=`echo "$info" | awk -F'status=' '{print $2}' | cut -d' ' -f1`
  sdate=`echo "$info" | awk '{print $1" "$2" "$3}'`
  sdate=`date -d "$sdate" +"%s" 2>/dev/null`
  [ -z "$sdate" ] && sdate=`date +"%s"`
  if $RECIPIENT_STATS ; then
    reason=`expr "$info" : ".*status=[a-z]*\ (\(.*\))$" | sed "s|'|''|g"`
    errorcounter=`dbquery "$rpath/data/recipients.db" "SELECT errorcounter FROM recipients WHERE email='$to'"`
    successcounter=`dbquery "$rpath/data/recipients.db" "SELECT successcounter FROM recipients WHERE email='$to'"`
    if [ -z "$errorcounter" ] && [ -z "$successcounter" ]; then
      if [ "_$status" == "_bounced" ] || [ "_$status" == "_deferred" ]; then
        errorcounter=1
        successcounter=0
      else
        errorcounter=0
        successcounter=1
      fi
      dbquery "$rpath/data/recipients.db" "INSERT INTO recipients (date, email, status, errorcounter, successcounter, reason) VALUES ('$sdate', '$to', '$status', '$errorcounter', '$successcounter', '$reason')"
    else
      if [ "_$status" == "_bounced" ] || [ "_$status" == "_deferred" ]; then
        errorcounter=`expr $errorcounter + 1 2>/dev/null`
      else
        successcounter=`expr $successcounter + 1 2>/dev/null`
      fi
      dbquery "$rpath/data/recipients.db" "UPDATE recipients SET date='$sdate', status='$status', errorcounter='$errorcounter', successcounter='$successcounter', reason='$reason', custom='' WHERE email='$to'"
    fi
  fi
  if [ "_$status" == "_bounced" ] || [ "_$status" == "_deferred" ]; then
    [ -z "$reason" ] && reason=`expr "$info" : "[a-z]*\ (\(.*\))$" | sed "s|'|''|g"`
    if $LOG_ERRORS ; then
      echo "$to|$status|$reason|$sdate" >> "$rpath/data/error.log"
    fi
    unset reason
  fi

  if [ -n "$status" ]; then
    case $status in
      deferred)
        warn='<**>'
        deferred+=1
        ;;
      bounced)
        warn='<***>'
        bounced+=1
        ;;
      sent)
        warn='<OK>'
        sent+=1
        ;;
      *)
        warn='<*>'
        ;;
    esac
    echo "$warn From: $from  To: $to  Status: $status"
  fi

done

store_results "deferred|integer,bounced|integer,sent|integer"

if $LOG_ERRORS && $ANALYZE_ERRORS ; then
  echo "--------------------------------------------------------"
  "$rpath"/analyze_error_log
fi

release_lock

exit 0


