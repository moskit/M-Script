#!/bin/bash
rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
source "$M_ROOT/lib/functions.sh" # includes mon.conf
source "$rpath/${rcommand%.mon}.conf"

if [ -n "$CONF_LIST" ]; then
  ngconfs=`echo "$CONF_LIST" | tr ',' ' '`
else
  ngconfs=${rcommand%.mon}
fi

for ngconf in $ngconfs ; do
  source "$rpath/${ngconf}.conf"
  ngconf_sn=`echo "$ngconf" | tr '-' '_'`
  [ -z "$NGINX_SERVER" ] && echo "NGINX_SERVER is not defined" >&2 && continue
  [ -z "$file" ] && echo "file is not defined" >&2 && continue
  ngconfcloud=`echo "$NGINX_SERVER" | cut -sd'|' -f1`
  ngconfcluster=`echo "$NGINX_SERVER" | cut -sd'|' -f2`
  ngconfserver=`echo "$NGINX_SERVER" | cut -d'|' -f3`
  if [ -n "$ngconfcluster" ]; then
    # if cluster is defined, it is a data collector
    [ -z "$ngconfcloud" ] && ngconfcloud=$CLOUD
    "$M_ROOT"/getdash.ssh Nginx $ngconfcloud/$ngconfcluster $ngconfserver
  else      

    # per second
    [ -z "$maxrate" ] && maxrate=100
    [ -z "$block_flood_method" ] && block_flood_method="DROP"

    interval=`expr $FREQ + $timeshift 2>/dev/null` || interval=210
    maxreqn=`expr $maxrate \* $interval`
    if [ "_$log_read_method" == "_timestamp" ]; then
      [ -z "$maxlines" ] && maxlines=10000
      [ -z "$timeformat" ] && timeformat="%d/%b/%Y:%H:%M"
      logged=`"$M_ROOT"/helpers/logreader --file=$file --timeformat="$timeformat" --maxlines=$maxlines --interval="$interval sec"`
    else
      logged=`"$M_ROOT"/helpers/logreader --file=$file`
    fi
    echo -e "\n    URL  Requests  Average  Minimal  Maximal\n------------------------------------------------------------------------------\n"
    IFSORIG=$IFS
    IFS='
    '
    requestips=`echo "$logged" | cut -d' ' -f1`
    requests=`echo "$requestips" | wc -l`
    ips=`echo "$requestips" | sort | uniq -c`
    users=`echo "$ips" | wc -l`
    url2=`echo "$logged" | cut -d' ' -f7 | cut -d'?' -f1`
    urlresp=`echo "$logged" | cut -d' ' -f7,11`
    for url in `echo "$url2" | sort | uniq`; do
      resptime=`echo "$urlresp" | grep "^$url\ " | cut -sd' ' -f2 | grep "[0-9\.]"`
      reqn=`echo "$resptime" | wc -l`
      if [ $reqn -gt 1 ]; then
        resptotal=$(solve 3 "`echo "$resptime" | tr '\n' '+'`0")
        [ -z "$resptotal" ] && continue
        reqtotal=`echo "$logged" | cut -d' ' -f7 | grep "^$url" | wc -l`
        respavg=`solve 3 "$resptotal / $reqtotal"`
        respmin=`echo "$resptime" | sort -n | head -1`
        respmax=`echo "$resptime" | sort -n | tail -1`
        #log "**** URL: $url :: reqn>1 :: `echo "$resptime" | tr '\n' '+'`0 = $resptotal :: $resptotal / $reqtotal = $respavg :: MIN: $respmin MAX: $respmax ****"
      else
        [ -z "$resptime" ] && continue
        respavg=$resptime
        respmin=$resptime
        respmax=$resptime
        #log "**** URL: $url :: reqn=1 :: resptime: $resptime ****"
      fi
      unset resptime
      [ `solve 3 "$respmax < $respmax_1"` -eq 1 ] && warn="<OK>"
      if [ -z "$warn" ]; then
        [ `solve 3 "$respmax < $respmax_2"` -eq 1 ] && warn="<*>"
        if [ -z "$warn" ]; then
          if [ `solve 3 "$respmax < $respmax_3"` -eq 1 ]; then
            warn="<**>"
          else
            warn="<***>"
          fi
        fi
      fi
      echo "$warn  $url  $reqn  $respavg  $respmin  $respmax"
      unset warn
      store_results "url|text,reqn|integer,respavg|real,respmin|real,respmax|real" "$rpath/${ngconf}.db|${ngconf_sn}_perf"
    done
    echo

    # Flood detection and blocking
    if $detect_flood ; then
      for reqn in `echo "$ips" | sort -n | sed 's|^\s*||' | tail -3`; do
      n=`echo $reqn | cut -d' ' -f1`
      ip=`echo $reqn | cut -d' ' -f2`
      if [[ $n -gt $maxreqn ]]; then
        if $block_flood ; then
          export BLOCK_CALLER="$rcommand"
          echo "$ip" | "$M_ROOT"/helpers/block_ip - --method="$block_flood_method" --block_forever_after=0
          echo "<***> IP $ip has been blocked for $n requests over $interval seconds"
        else
          echo "<***> HTTP flood from IP ${ip}: $n requests over $interval seconds"
        fi
      fi
      done
    fi

    # Balancer monitor
    upstreams=`echo "$logged" | cut -d' ' -f12 | sort | uniq -c`
    
    
    IFS=$IFSORIG

    store_results "requests|integer,users|integer" "$rpath/${ngconf}.db|$ngconf_sn"

  fi
done
