#!/bin/bash

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/
DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found, exiting..  " && exit 1
source "${rpath}/${rcommand%.mon}.conf"
source "${rpath}/../../conf/mon.conf"
SQLITE=`which sqlite3 2>/dev/null`
touch "${rpath}/mongo_mongos_servers.list" "${rpath}/mongo_config_servers.list" "${rpath}/mongo_shards.list"
TMPDIR="${TMPDIR}/MongoDB"
install -d "${TMPDIR}"

function print_servers() {
  for host in $@ ; do
    echo "$host"
  done
}

function find_master() {
  im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().primary"|tail -1`
  if [ -z "$im" ] ; then
    im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().ismaster"|tail -1`
    [ "X$im" == "Xtrue" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || exit 1
}

function ip_to_name() {
  rname1=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $2}'`
  [ -n "$rname1" ] && rname2=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $3}'` || rname=${1%:*}
  [ -n "$rname2" ] && [ ${#rname2} -lt ${#rname1} ] && rname=$rname2 || rname=$rname1
  [ -n "$rname" ] || rname=${1%:*}
}

function collect_hosts() {
  for name in $@ ; do
    port=${name#*:}
    ip_to_name $name
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function server_to_database() {
  for d in `cat "${rpath}/data/${1}.dat"` ; do
    eval "`echo "$line" | sed 's_|_=_'`"
  done      
  $SQLITE "${rpath}/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, status, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opsTotalInsert, opsTotalQuery, opsTotalUpdate, opsTotalDelete, opsTotalGetmore, opsTotalCommand, opsShardedInsert, opsShardedQuery, opsShardedUpdate, opsShardedDelete, opsShardedGetmore, opsShardedCommand, opsNotShardedInsert, opsNotShardedQuery, opsNotShardedUpdate, opsNotShardedDelete, opsNotShardedGetmore, opsNotShardedCommand, lockRatio, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters) values (`date +"%s"`, '`date +"%Y%m%d"`', '${cs}' ${connCurrent-0}, ${connAvailable-0}, ${netIn-0}, ${netOut-0}, ${netReqn-0}, ${opsTotalInsert-0}, ${opsTotalQuery-0}, ${opsTotalUpdate-0}, ${opsTotalDelete-0}, ${opsTotalGetmore-0}, ${opsTotalCommand-0}, ${opsShardedInsert-0}, ${opsShardedQuery-0}, ${opsShardedUpdate-0}, ${opsShardedDelete-0}, ${opsShardedGetmore-0}, ${opsShardedCommand-0}, ${opsNotShardedInsert-0}, ${opsNotShardedQuery-0}, ${opsNotShardedUpdate-0}, ${opsNotShardedDelete-0}, ${opsNotShardedGetmore-0}, ${opsNotShardedCommand-0}, ${lockRatio-0}, ${lockQueueTotal-0}, ${lockQueueReaders-0}, ${lockQueueWriters-0}, ${lockClientsTotal-0}, ${lockClientsReaders-0}, ${lockClientsWriters-0})"
}

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | sed 's|,| |g'`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^${name}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "${TMPDIR}/mongo_config_servers.list"
  [ -f "${TMPDIR}/mongo_config_servers.list" ] && [ -f "${rpath}/mongo_config_servers.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"`" ] && mv "${TMPDIR}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"
  
elif [ -z "$MONGO_SERVERS" ] ; then
  echo "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else
  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | sed 's|,| |g'`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
fi

for configip in $configips ; do
  mongoses=`($MONGO ${configip}/config --eval "db.mongos.find({}, {_id : 1}).forEach(printjson)" 2>/dev/null && gotit=1) | "${rpath}/../../lib/json2txt" | awk '{print $2}' | sort -n`
  [ -n "$gotit" ] && unset gotit && break
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "${TMPDIR}/mongo_mongos_servers.list"
  [ -f "${TMPDIR}/mongo_mongos_servers.list" ] && [ -f "${rpath}/mongo_mongos_servers.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"`" ] && mv "${TMPDIR}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`($MONGO ${configip}/config --eval "db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>/dev/null && gotit=1) | "${rpath}/../../lib/json2txt"`
  [ -n "$gotit" ] && unset gotit && break
done

if [ -n "$shardhosts" ] ; then
  rm -f "${TMPDIR}/mongo_shards.list" 2>/dev/null
  IFS1=$IFS
  IFS='
'
  nmax=`echo "$shardhosts" | tail -1 | cut -d'/' -f1`
  for ((n=1; n<=$nmax; n++)) ; do
    shard=`echo "$shardhosts" | grep ^$n\/ | grep _id | awk '{print $2}'`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | awk '{print $2}'`
    shardport=${shardhost#*:}
    ip_to_name ${shardhost%:*}
    shardhost="$rname"
    echo "${shardhost%:*}:${shardport} ${shard}" >> "${TMPDIR}/mongo_shards.list"
  done
  [ -f "${TMPDIR}/mongo_shards.list" ] && [ -f "${rpath}/mongo_shards.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_shards.list" "${rpath}/mongo_shards.list"`" ] && mv "${TMPDIR}/mongo_shards.list" "${rpath}/mongo_shards.list"
IFS=$IFS1
fi

if [ -e "${rpath}/mongo_config_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_config_servers.list"` ; do
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    if [ "X$SQLITE3" == "X1" ] ; then
      server_to_database "${cs}"
    fi
  done
fi

if [ -e "${rpath}/mongo_mongos_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_mongos_servers.list"` ; do
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    if [ "X$SQLITE3" == "X1" ] ; then
      server_to_database "${cs}"
    fi
  done
fi

if [ -e "${rpath}/mongo_shards.list" ] ; then
  for cs in `cat "${rpath}/mongo_shards.list" | cut -d' ' -f1` ; do
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    if [ "X$SQLITE3" == "X1" ] ; then
      server_to_database "${cs}"
    fi
  done
fi




