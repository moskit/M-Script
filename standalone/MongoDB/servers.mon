#!/bin/bash

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"
log "Starting.."

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && log "Mongo client not found, exiting..  " && exit 1
source "${rpath}/${rcommand%.mon}.conf"
source "$M_ROOT/conf/mon.conf"
SQLITE=`which sqlite3 2>/dev/null`
touch "${rpath}/mongo_mongos_servers.list" "${rpath}/mongo_config_servers.list" "${rpath}/mongo_shards.list" "${rpath}/mongo_servers.list"
M_TEMP="${M_TEMP}/MongoDB"
install -d "${M_TEMP}"

function print_servers() {
  for host in $@ ; do
    echo "${host}|||"
  done
}

function find_master() {
  im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().primary" 2>>"$LOG" | grep -v arning | tail -1`
  if [ -z "$im" ] ; then
    im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().ismaster" 2>>"$LOG" |tail -1`
    [ "X$im" == "Xtrue" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || (log "Unable to find master for replica set (asked ${1})" && exit 1)
}

function find_rsmemberrole() {
  rsmemberrole='|slave'
  master=`find_master "${1}"`
  members=`mongo ${master}/config --quiet --eval "rs.conf().members.forEach(printjson)" | "$M_ROOT/lib/json2txt"`
  membernum=`echo "$members" | grep "${1}" | cut -d'/' -f1`
  arbiter=`echo "$members" | grep "^${membernum}\/" | grep arbiterOnly | grep -c true$`
  [ $arbiter -eq 1 ] && rsmemberrole='|arbiter'
  [ -n "$master" ] && [ "$master" == "${1}" ] && rsmemberrole='|master'
}

function ip_to_name() {
  rname1=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $2}'`
  [ -n "$rname1" ] && rname2=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $3}'` || rname=${1%:*}
  [ -n "$rname2" ] && [ ${#rname2} -lt ${#rname1} ] && rname=$rname2 || rname=$rname1
  [ -n "$rname" ] || rname=${1%:*}
}

function collect_hosts() {
  for name in $@ ; do
    port=${name#*:}
    [ "X$port" == "X$name" ] && port=""
    ip_to_name $name
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function parse_data() {
  unset timeindex day hostport status version uptime memRes memVir memMapped memMappedWJournal infoHeapUsage connCurrent connAvailable netIn netOut netReqn opcountersInsert opcountersQuery opcountersUpdate opcountersDelete opcountersGetmore opcountersCommand opsShardedInsert opsShardedQuery opsShardedUpdate opsShardedDelete opsShardedGetmore opsShardedCommand opsNotShardedInsert opsNotShardedQuery opsNotShardedUpdate opsNotShardedDelete opsNotShardedGetmore opsNotShardedCommand lockRatio lockQueueTotal lockQueueReaders lockQueueWriters lockClientsTotal lockClientsReaders lockClientsWriters ops_queriesps ops_queriesps_sharded ops_queriesps_notsharded ops_insertsps ops_insertsps_sharded ops_insertsps_notsharded ops_updatesps ops_updatesps_sharded ops_updatesps_notsharded ops_deletesps ops_deletesps_sharded ops_deletesps_notsharded ops_getmoresps ops_getmoresps_sharded ops_getmoresps_notsharded ops_commandsps ops_commandsps_sharded  ops_commandsps_notsharded ops_totalqps ops_totalqps_sharded ops_totalqps_notsharded
  timeindexnow=`date +"%s"`
  lasttimeindex=`cat "${M_TEMP}/${1}.lasttimeindex" 2>/dev/null | grep -v warning` || lasttimeindex=`expr $timeindexnow - $FREQ` || lasttimeindex=`expr $timeindexnow - 200`
  echo $timeindexnow > "${M_TEMP}/${1}.lasttimeindex"
  for d in `cat "${rpath}/data/${1}.dat" | grep \|` ; do
    eval "`echo "$d" | sed 's_|_=_'`"
  done
  echo "Server ${1} ** `date`"
  echo "-----------------------------------------"
  echo
  echo " Status"
  echo
  echo "Status:   ${status}" | sed 's|1|OK|;s|0|Error|'
  echo "Uptime:   since `date -d "-$uptime sec"`" | sed 's|  | |g'
  echo
  echo " Memory"
  echo
  echo "Resident (MB):   ${memRes-0}"
  echo "Virtual (MB):   ${memVir-0}"
  echo "Mapped (MB):   ${memMapped-0}"
  echo "Mapped with journal (MB):   ${memMappedWJournal-0}"
  echo "Heap usage (MB):   `expr ${infoHeapUsage-0} / 1048576`"
  echo
  echo " Network"
  echo
  echo "Current connections:   ${connCurrent-0}"
  echo "Available connections:   ${connAvailable-0}"
  netIn_prev=`grep ^netIn\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netIn_prev=$netIn
  bw_in=`echo "scale=2; (${netIn-0} - ${netIn_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576" | bc`
  netOut_prev=`grep ^netOut\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netOut_prev=$netOut
  bw_out=`echo "scale=2; (${netOut-0} - ${netOut_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576" | bc`
  echo "Bandwidth in (MB/sec):   ${bw_in}"
  echo "Bandwidth out (MB/sec):   ${bw_out}"
  netReqn_prev=`grep ^netReqn\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netReqn_prev=$netReqn
  net_reqps=`echo "scale=1; ($netReqn - $netReqn_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  echo "Network requests per second:   $net_reqps"
  if [ -n "$lockTime" ] ; then
    echo
    echo " Global lock"
    echo
    lockTime_prev=`grep ^lockTime\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || lockTime_prev=$lockTime
    lockTime=`echo "scale=4; (${lockTime} - ${lockTime_prev}) / ($timeindexnow - $lasttimeindex) / 10000" | bc`
    echo "Lock time current, percents:   $lockTime"
    echo "Lock time overall, percents:   `echo "scale=4; $lockRatio * 100 / 1" | bc`"
    echo "Lock queue total:   $lockQueueTotal"
    echo "Lock queue readers:   $lockQueueReaders"
    echo "Lock queue writers:   $lockQueueWriters"
    echo "Lock clients total:   $lockClientsTotal"
    echo "Lock clients readers:   $lockClientsReaders"
    echo "Lock clients writers:   $lockClientsWriters"
  else
    lockTime=0
  fi
  echo
  echo " Operations / second"
  echo
  echo " Operation Type         Total       Sharded       Not Sharded"
  echo
  
  # Total
  
  opcountersQuery_prev=`grep ^opcountersQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_queriesps=`echo "scale=1; ($opcountersQuery >= $opcountersQuery_prev) * ($opcountersQuery - $opcountersQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opcountersInsert_prev=`grep ^opcountersInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersInsert_prev=$opcountersInsert
  [ -n "$opcountersInsert" ] && ops_insertsps=`echo "scale=1; ($opcountersInsert >= $opcountersInsert_prev) * ($opcountersInsert - $opcountersInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opcountersUpdate_prev=`grep ^opcountersUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersUpdate_prev=$opcountersUpdate
  [ -n "$opcountersUpdate" ] && ops_updatesps=`echo "scale=1; ($opcountersUpdate >= $opcountersUpdate_prev) * ($opcountersUpdate - $opcountersUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opcountersDelete_prev=`grep ^opcountersDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersDelete_prev=$opcountersDelete
  [ -n "$opcountersDelete" ] && ops_deletesps=`echo "scale=1; ($opcountersDelete >= $opcountersDelete_prev) * ($opcountersDelete - $opcountersDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opcountersGetmore_prev=`grep ^opcountersGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersGetmore_prev=$opcountersGetmore
  [ -n "$opcountersGetmore" ] && ops_getmoresps=`echo "scale=1; ($opcountersGetmore >= $opcountersGetmore_prev) * ($opcountersGetmore - $opcountersGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opcountersCommand_prev=`grep ^opcountersCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersCommand_prev=$opcountersCommand
  [ -n "$opcountersCommand" ] && ops_commandsps=`echo "scale=1; ($opcountersCommand >= $opcountersCommand_prev) * ($opcountersCommand - $opcountersCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opcountersQuery" ] && ops_totalqps=`echo "scale=1; $ops_queriesps + $ops_insertsps + $ops_updatesps + $ops_deletesps + $ops_getmoresps + $ops_commandsps" | bc`
  
  # Sharded
  
  opsShardedQuery_prev=`grep ^opsShardedQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedQuery_prev=$opsShardedQuery
  [ -n "$opsShardedQuery" ] && ops_queriesps_sharded=`echo "scale=1; ($opsShardedQuery >= $opsShardedQuery_prev) * ($opsShardedQuery - $opsShardedQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedInsert_prev=`grep ^opsShardedInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedInsert_prev=$opsShardedInsert
  [ -n "$opsShardedInsert" ] && ops_insertsps_sharded=`echo "scale=1; ($opsShardedInsert >= $opsShardedInsert_prev) * ($opsShardedInsert - $opsShardedInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedUpdate_prev=`grep ^opsShardedUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedUpdate_prev=$opsShardedUpdate
  [ -n "$opsShardedUpdate" ] && ops_updatesps_sharded=`echo "scale=1; ($opsShardedUpdate >= $opsShardedUpdate_prev) * ($opsShardedUpdate - $opsShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedDelete_prev=`grep ^opsShardedDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedDelete_prev=$opsShardedDelete
  [ -n "$opsShardedDelete" ] && ops_deletesps_sharded=`echo "scale=1; ($opsShardedDelete >= $opsShardedDelete_prev) * ($opsShardedDelete - $opsShardedDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedGetmore_prev=`grep ^opsShardedGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedGetmore_prev=$opsShardedGetmore
  [ -n "$opsShardedGetmore" ] && ops_getmoresps_sharded=`echo "scale=1; ($opsShardedGetmore >= $opsShardedGetmore_prev) * ($opsShardedGetmore - $opsShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedCommand_prev=`grep ^opsShardedCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedCommand_prev=$opsShardedCommand
  [ -n "$opsShardedCommand" ] && ops_commandsps_sharded=`echo "scale=1; ($opsShardedCommand >= $opsShardedCommand_prev) * ($opsShardedCommand - $opsShardedCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opsShardedQuery" ] && ops_totalqps_sharded=`echo "scale=1; $ops_queriesps_sharded + $ops_insertsps_sharded + $ops_updatesps_sharded + $ops_deletesps_sharded + $ops_getmoresps_sharded + $ops_commandsps_sharded" | bc`
  
  # Not Sharded
  
  opsNotShardedQuery_prev=`grep ^opsNotShardedQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedQuery_prev=$opsNotShardedQuery
  [ -n "$opsNotShardedQuery" ] && ops_queriesps_notsharded=`echo "scale=1; ($opsNotShardedQuery >= $opsNotShardedQuery_prev) * ($opsNotShardedQuery - $opsNotShardedQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedInsert_prev=`grep ^opsNotShardedInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedInsert_prev=$opsNotShardedInsert
  [ -n "$opsNotShardedInsert" ] && ops_insertsps_notsharded=`echo "scale=1; ($opsNotShardedInsert >= $opsNotShardedInsert_prev) * ($opsNotShardedInsert - $opsNotShardedInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedUpdate_prev=`grep ^opsNotShardedUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedUpdate_prev=$opsNotShardedUpdate
  [ -n "$opsNotShardedUpdate" ] && ops_updatesps_notsharded=`echo "scale=1; ($opsNotShardedUpdate >= $opsNotShardedUpdate_prev) * ($opsNotShardedUpdate - $opsNotShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedDelete_prev=`grep ^opsNotShardedDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedDelete_prev=$opsNotShardedDelete
  [ -n "$opsNotShardedDelete" ] && ops_deletesps_notsharded=`echo "scale=1; ($opsNotShardedDelete >= $opsNotShardedDelete_prev) * ($opsNotShardedDelete - $opsNotShardedDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedGetmore_prev=`grep ^opsNotShardedGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedGetmore_prev=$opsNotShardedGetmore
  [ -n "$opsNotShardedGetmore" ] && ops_getmoresps_notsharded=`echo "scale=1; ($opsNotShardedGetmore >= $opsNotShardedGetmore_prev) * ($opsNotShardedGetmore - $opsNotShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedCommand_prev=`grep ^opsNotShardedCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedCommand_prev=$opsNotShardedCommand
  [ -n "$opsNotShardedCommand" ] && ops_commandsps_notsharded=`echo "scale=1; ($opsNotShardedCommand >= $opsNotShardedCommand_prev) * ($opsNotShardedCommand - $opsNotShardedCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opsNotShardedQuery" ] && ops_totalqps_notsharded=`echo "scale=1; $ops_queriesps_notsharded + $ops_insertsps_notsharded + $ops_updatesps_notsharded + $ops_deletesps_notsharded + $ops_getmoresps_notsharded + $ops_commandsps_notsharded" | bc`
  
  echo "Query               $ops_queriesps      $ops_queriesps_sharded      $ops_queriesps_notsharded"
  echo "Insert              $ops_insertsps      $ops_insertsps_sharded     $ops_insertsps_notsharded"
  echo "Update              $ops_updatesps      $ops_updatesps_sharded     $ops_updatesps_notsharded"
  echo "Delete              $ops_deletesps      $ops_deletesps_sharded     $ops_deletesps_notsharded"
  echo "Getmore              $ops_getmoresps      $ops_getmoresps_sharded     $ops_getmoresps_notsharded"
  echo "Command              $ops_commandsps      $ops_commandsps_sharded     $ops_commandsps_notsharded"
  echo "Total                $ops_totalqps      $ops_totalqps_sharded      $ops_totalqps_notsharded"
  
  if [ "X$SQLITE3" == "X1" ] ; then
    $SQLITE "${rpath}/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, status, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opcountersInsert, opcountersQuery, opcountersUpdate, opcountersDelete, opcountersGetmore, opcountersCommand, opsShardedInsert, opsShardedQuery, opsShardedUpdate, opsShardedDelete, opsShardedGetmore, opsShardedCommand, opsNotShardedInsert, opsNotShardedQuery, opsNotShardedUpdate, opsNotShardedDelete, opsNotShardedGetmore, opsNotShardedCommand, opsTotalQPS, opsShardedTotalQPS, opsNotShardedTotalQPS, lockRatio, lockTime, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters) values ($timeindexnow, '`date +"%Y%m%d"`', '${cs}', '${status}', '$version', '${uptime-0}', '${memRes-0}', '${memVir-0}', '${memMapped-0}', '${memMappedWJournal-0}', '${infoHeapUsage-0}', '${connCurrent-0}', '${connAvailable-0}', '${bw_in-0}', '${bw_out-0}', '${net_reqps-0}', '${ops_insertsps-0}', '${ops_queriesps-0}', '${ops_updatesps-0}', '${ops_deletesps-0}', '${ops_getmoresps-0}', '${ops_commandsps-0}', '${ops_insertsps_sharded-0}', '${ops_queriesps_sharded-0}', '${ops_updatesps_sharded-0}', '${ops_deletesps_sharded-0}', '${ops_getmoresps_sharded-0}', '${ops_commandsps_sharded-0}', '${ops_insertsps_notsharded-0}', '${ops_queriesps_notsharded-0}', '${ops_updatesps_notsharded-0}', '${ops_deletesps_notsharded-0}', '${ops_getmoresps_notsharded-0}', '${ops_commandsps_notsharded-0}', '${ops_totalqps-0}', '${ops_totalqps_sharded-0}', '${ops_totalqps_notsharded-0}', '${lockRatio-0}', '${lockTime-0}', '${lockQueueTotal-0}', '${lockQueueReaders-0}', '${lockQueueWriters-0}', '${lockClientsTotal-0}', '${lockClientsReaders-0}', '${lockClientsWriters-0}')" 2>>"$LOG"
  fi
  
}

### The script begins here :)

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | sed 's|,| |g'`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^${name}\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && log "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "${M_TEMP}/mongo_config_servers.list"
  [ -f "${M_TEMP}/mongo_config_servers.list" ] && [ -f "${rpath}/mongo_config_servers.list" ] && [ -n "`$DIFF -q "${M_TEMP}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"`" ] && mv "${M_TEMP}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"
  
elif [ -z "$MONGO_SERVERS" ] ; then
  log "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else

## Config servers are not defined

  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | sed 's|,| |g'`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && log "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
  
  ## Collecting servers list
  rm -f "${M_TEMP}/mongo_servers.list"
  # For hosts from servers.conf
  for mongohost in $configips ; do
    mongoport=${mongohost##*:}
    mongohost="${mongohost%:*}"
    # Is it a part of replica set?
    if [ "X`${MONGO} ${mongohost}:${mongoport}/config --quiet --eval "rs.conf()" | tail -1`" != "Xnull" ] ; then
      replicaset=`${MONGO} ${mongohost}:${mongoport}/config --quiet --eval "rs.conf()._id" | tail -1`
      find_rsmemberrole "${mongohost}:${mongoport}"
    fi
    echo "${mongohost}:${mongoport}||${replicaset}${rsmemberrole}" >> "${M_TEMP}/mongo_servers.list"
  done
  
  # Getting hosts list for every found replica set
  for rs in `cat "${M_TEMP}/mongo_servers.list" | cut -d'|' -f2 | sort | uniq` ; do
    for rshost in `cat "${M_TEMP}/mongo_servers.list" | grep "|${rs}|" | cut -d'|' -f1` ; do
      replicahosts=`${MONGO} ${rshost}/config --quiet --eval "rs.conf().members.forEach(printjson)" 2>/dev/null`
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/host | cut -d' ' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break
    done

    for replicahost in $replicahosts ; do
      [ `grep -c "^${replicahost}|" "${M_TEMP}/mongo_servers.list"` -gt 0 ] && continue
      ip_to_name ${replicahost}
      [ `grep -c "^${rname}:${replicahost##*:}|" "${M_TEMP}/mongo_servers.list"` -gt 0 ] && continue
      find_rsmemberrole "${replicahost}"
      echo "${rname}:${replicahost##*:}||${rs}${rsmemberrole}" >> "${M_TEMP}/mongo_servers.list"
    done

  done
  
  [ -f "${M_TEMP}/mongo_servers.list" ] && [ -f "${rpath}/mongo_servers.list" ] && [ -n "`$DIFF -q "${M_TEMP}/mongo_servers.list" "${rpath}/mongo_servers.list"`" ] && mv "${M_TEMP}/mongo_servers.list" "${rpath}/mongo_servers.list"
fi
  
for configip in $configips ; do
# Despite variable name this is not necessarily config servers, so might be
# replica sets
#  master=`find_master ${configip} || echo ${configip}`
  mongoses=`$MONGO ${configip}/config --quiet --eval "db.mongos.find({}, {_id : 1}).forEach(printjson)" 2>/dev/null`
  res=$?
  mongoses=`echo "$mongoses" | "$M_ROOT/lib/json2txt" | cut -d'|' -f2 | tr -d '"' | sort -n`
  [ $res -eq 0 ] && break
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "${M_TEMP}/mongo_mongos_servers.list"
  [ -f "${M_TEMP}/mongo_mongos_servers.list" ] && [ -f "${rpath}/mongo_mongos_servers.list" ] && [ -n "`$DIFF -q "${M_TEMP}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"`" ] && mv "${M_TEMP}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"
else
  echo > "${rpath}/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`$MONGO ${configip}/config --quiet --eval "db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>/dev/null`
  res=$?
  shardhosts=`echo "$shardhosts" | "$M_ROOT"/lib/json2txt | tr -d '"'`
  [ $res -eq 0 ] && break
done

if [ -n "$shardhosts" ] ; then
  [ -f "${M_TEMP}/mongo_shards.list" ] && rm -f "${M_TEMP}/mongo_shards.list"
  IFS1=$IFS
  IFS='
'
  nmax=`echo "$shardhosts" | tail -1 | cut -d'/' -f1`
  for ((n=0; n<=$nmax; n++)) ; do
    shard=`echo "$shardhosts" | grep ^$n\/ | grep _id | cut -d'|' -f2`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | cut -d'|' -f2`
    shard=`eval "echo $shard"` ; shardhost=`eval "echo $shardhost"`
    #ifreplicaset=${shardhost%%/*}
    shardhost=${shardhost#*/}
    # might be multiple hosts here, not needed now, it'll be dealt with later
    shardhost=${shardhost%%,*}
    shardport=${shardhost#*:}
    if [ "X`${MONGO} ${shardhost%:*}:${shardport}/config --quiet --eval "rs.conf()" | tail -1`" != "Xnull" ] ; then
      replicaset=`${MONGO} ${shardhost%:*}:${shardport}/config --quiet --eval "rs.conf()._id" | tail -1`
    fi
    ip_to_name ${shardhost%:*}
    shardhost="$rname"
    find_rsmemberrole "${shardhost}"
    echo "${shardhost%:*}:${shardport}|${shard}|${replicaset}${rsmemberrole}" >> "${M_TEMP}/mongo_shards.list"
  done
  
  for rs in `cat "${M_TEMP}/mongo_shards.list" | cut -d'|' -f2,3 | sort | uniq` ; do

    for rshost in `cat "${M_TEMP}/mongo_shards.list" | grep "|${rs}$" | cut -d'|' -f1` ; do
      replicahosts=`${MONGO} ${rshost}/config --quiet --eval "rs.conf().members.forEach(printjson)" 2>/dev/null`
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/host | cut -d'|' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break
    done

    for replicahost in $replicahosts ; do
      [ `grep -c "^${replicahost}|" "${M_TEMP}/mongo_shards.list"` -gt 0 ] && continue
      ip_to_name ${replicahost}
      [ `grep -c "^${rname}:${replicahost##*:}|" "${M_TEMP}/mongo_shards.list"` -gt 0 ] && continue
      find_rsmemberrole "${shardhost}"
      echo "${replicahost}|${rs}${rsmemberrole}" >> "${M_TEMP}/mongo_shards.list"
    done

  done
  
  [ -f "${M_TEMP}/mongo_shards.list" ] && [ -f "${rpath}/mongo_shards.list" ] && [ -n "`$DIFF -q "${M_TEMP}/mongo_shards.list" "${rpath}/mongo_shards.list"`" ] && mv "${M_TEMP}/mongo_shards.list" "${rpath}/mongo_shards.list"
IFS=$IFS1
else
  echo > "${M_TEMP}/mongo_shards.list"
fi

if [ -e "${rpath}/mongo_config_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_config_servers.list"` ; do
    [ -d "$M_ROOT/www/MongoDB/configservers/${cs}" ] || install -d "$M_ROOT/www/MongoDB/configservers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat" 2>/dev/null || sed -i "/${cs}/d" "${rpath}/mongo_config_servers.list"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "$M_ROOT/lib/txt2html" "${rpath}/data/${cs}.report" > "$M_ROOT/www/MongoDB/configservers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi

if [ -e "${rpath}/mongo_mongos_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_mongos_servers.list"` ; do
    install -d "$M_ROOT/www/MongoDB/balancers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat" 2>/dev/null || sed -i "/${cs}/d" "${rpath}/mongo_mongos_servers.list"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "$M_ROOT/lib/txt2html" "${rpath}/data/${cs}.report" > "$M_ROOT/www/MongoDB/balancers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi

if [ -e "${rpath}/mongo_shards.list" ] ; then
  for cs in `cat "${rpath}/mongo_shards.list" | cut -d'|' -f1` ; do
    install -d "$M_ROOT/www/MongoDB/shardservers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat" 2>/dev/null || sed -i "/${cs}/d" "${rpath}/mongo_shards.list"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "$M_ROOT"/lib/txt2html "${rpath}/data/${cs}.report" > "$M_ROOT/www/MongoDB/shardservers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi

if [ -e "${rpath}/mongo_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_servers.list" | cut -d'|' -f1` ; do
    install -d "$M_ROOT/www/MongoDB/servers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat" 2>/dev/null || sed -i "/${cs}/d" "${rpath}/mongo_servers.list"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "$M_ROOT/lib/txt2html" "${rpath}/data/${cs}.report" > "$M_ROOT/www/MongoDB/servers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi


