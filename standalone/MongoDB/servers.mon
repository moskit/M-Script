#!/bin/bash

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
xpath=${xcommand%/*}/
rcommand=${xcommand##*/}
rpath=${0%/*}/${xpath}
#*/
DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found, exiting..  " && exit 1
source "${rpath}/${rcommand%.mon}.conf"
source "${rpath}/../../conf/mon.conf"
SQLITE=`which sqlite3 2>/dev/null`
touch "${rpath}/mongo_mongos_servers.list" "${rpath}/mongo_config_servers.list" "${rpath}/mongo_shards.list"
TMPDIR="${TMPDIR}/MongoDB"
install -d "${TMPDIR}"

function print_servers() {
  for host in $@ ; do
    echo "$host"
  done
}

function find_master() {
  im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().primary"|tail -1`
  if [ -z "$im" ] ; then
    im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().ismaster"|tail -1`
    [ "X$im" == "Xtrue" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || exit 1
}

function ip_to_name() {
  rname1=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $2}'`
  [ -n "$rname1" ] && rname2=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $3}'` || rname=${1%:*}
  [ -n "$rname2" ] && [ ${#rname2} -lt ${#rname1} ] && rname=$rname2 || rname=$rname1
  [ -n "$rname" ] || rname=${1%:*}
}

function collect_hosts() {
  for name in $@ ; do
    port=${name#*:}
    ip_to_name $name
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function parse_data() {
  unset timeindex day hostport status version uptime memRes memVir memMapped memMappedWJournal infoHeapUsage connCurrent connAvailable netIn netOut netReqn opsTotalInsert opsTotalQuery opsTotalUpdate opsTotalDelete opsTotalGetmore opsTotalCommand opsShardedInsert opsShardedQuery opsShardedUpdate opsShardedDelete opsShardedGetmore opsShardedCommand opsNotShardedInsert opsNotShardedQuery opsNotShardedUpdate opsNotShardedDelete opsNotShardedGetmore opsNotShardedCommand lockRatio lockQueueTotal lockQueueReaders lockQueueWriters lockClientsTotal lockClientsReaders lockClientsWriters
  timeindexnow=`date +"%s"`
  lasttimeindex=`cat "${TMPDIR}/${1}.lasttimeindex" 2>/dev/null` || lasttimeindex=`expr $timeindexnow - $FREQ` || lasttimeindex=`expr $timeindexnow - 200`
  echo $timeindexnow > "${TMPDIR}/${1}.lasttimeindex"
  for d in `cat "${rpath}/data/${1}.dat"` ; do
    eval "`echo "$d" | sed 's_|_=_'`"
  done
  echo
  echo "Server ${1}"
  echo "---------------------------"
  echo
  echo " Status"
  echo
  echo "Status:   ${status}" | sed 's|1|OK|;s|0|Error|'
  echo "Uptime:   since `date -d "-$uptime sec"`"
  echo
  echo " Memory"
  echo
  echo "Resident (MB):   ${memRes-0}"
  echo "Virtual (MB):   ${memVir-0}"
  echo "Mapped (MB):   ${memMapped-0}"
  echo "Mapped with journal (MB):   ${memMappedWJournal-0}"
  echo "Heap usage (MB):   `expr ${infoHeapUsage-0} / 1048576`"
  echo
  echo " Network"
  echo
  echo "Current connections:   ${connCurrent-0}"
  echo "Available connections:   ${connAvailable-0}"
  netIn_prev=`grep ^netIn\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netIn_prev=$netIn
  bw_in=`echo "scale=2; (${netIn-0} - ${netIn_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576" | bc`
  netOut_prev=`grep ^netIn\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netOut_prev=$netOut
  bw_out=`echo "scale=2; (${netOut-0} - ${netOut_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576" | bc`
  echo "Bandwidth in (MB/sec):   ${bw_in}"
  echo "Bandwidth out (MB/sec):   ${bw_out}"
  netReqn_prev=`grep ^netReqn\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || netReqn_prev=$netReqn
  net_reqps=`echo "scale=1; ($netReqn - $netReqn_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  echo "Network requests per second:   $net_reqps"
  echo
  echo " Queries"
  echo
  echo " Query Type         Total       Sharded       Not Sharded"
  echo
  
  # Total
  
  opsTotalQuery_prev=`grep ^opsTotalQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalQuery_prev=$opsTotalQuery
  [ -n "$opsTotalQuery" ] && ops_queriesps=`echo "scale=1; ($opsTotalQuery - $opsTotalQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsTotalInsert_prev=`grep ^opsTotalInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalInsert_prev=$opsTotalInsert
  [ -n "$opsTotalInsert" ] && ops_insertsps=`echo "scale=1; ($opsTotalInsert - $opsTotalInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsTotalUpdate_prev=`grep ^opsTotalUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalUpdate_prev=$opsTotalUpdate
  [ -n "$opsTotalUpdate" ] && ops_updatesps=`echo "scale=1; ($opsTotalUpdate - $opsTotalUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsTotalDelete_prev=`grep ^opsTotalDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalDelete_prev=$opsTotalDelete
  [ -n "$opsTotalDelete" ] && ops_deletesps=`echo "scale=1; ($opsTotalDelete - $opsTotalDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsTotalGetmore_prev=`grep ^opsTotalGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalGetmore_prev=$opsTotalGetmore
  [ -n "$opsTotalGetmore" ] && ops_getmoresps=`echo "scale=1; ($opsTotalGetmore - $opsTotalGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsTotalCommand_prev=`grep ^opsTotalCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsTotalCommand_prev=$opsTotalCommand
  [ -n "$opsTotalCommand" ] && ops_commandsps=`echo "scale=1; ($opsTotalCommand - $opsTotalCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opsTotalQuery" ] && ops_totalqps=`echo "scale=1; $ops_queriesps + $ops_insertsps + $ops_updatesps + $ops_deletesps + $ops_getmoresps + $ops_commandsps" | bc`
  
  # Sharded
  
  opsShardedQuery_prev=`grep ^opsShardedQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedQuery_prev=$opsShardedQuery
  [ -n "$opsShardedQuery" ] && ops_queriesps_sharded=`echo "scale=1; ($opsShardedQuery - $opsShardedQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedInsert_prev=`grep ^opsShardedInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedInsert_prev=$opsShardedInsert
  [ -n "$opsShardedInsert" ] && ops_insertsps_sharded=`echo "scale=1; ($opsShardedInsert - $opsShardedInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedUpdate_prev=`grep ^opsShardedUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedUpdate_prev=$opsShardedUpdate
  [ -n "$opsShardedUpdate" ] && ops_updatesps_sharded=`echo "scale=1; ($opsShardedUpdate - $opsShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedDelete_prev=`grep ^opsShardedDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedDelete_prev=$opsShardedDelete
  [ -n "$opsShardedDelete" ] && ops_deletesps_sharded=`echo "scale=1; ($opsShardedDelete - $opsShardedDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedGetmore_prev=`grep ^opsShardedGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedGetmore_prev=$opsShardedGetmore
  [ -n "$opsShardedGetmore" ] && ops_getmoresps_sharded=`echo "scale=1; ($opsShardedGetmore - $opsShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsShardedCommand_prev=`grep ^opsShardedCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedCommand_prev=$opsShardedCommand
  [ -n "$opsShardedCommand" ] && ops_commandsps_sharded=`echo "scale=1; ($opsShardedCommand - $opsShardedCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opsShardedQuery" ] && ops_totalqps_sharded=`echo "scale=1; $ops_queriesps_sharded + $ops_insertsps_sharded + $ops_updatesps_sharded + $ops_deletesps_sharded + $ops_getmoresps_sharded + $ops_commandsps_sharded" | bc`
  
  # Not Sharded
  
  opsNotShardedQuery_prev=`grep ^opsNotShardedQuery\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedQuery_prev=$opsNotShardedQuery
  [ -n "$opsNotShardedQuery" ] && ops_queriesps_notsharded=`echo "scale=1; ($opsNotShardedQuery - $opsNotShardedQuery_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedInsert_prev=`grep ^opsNotShardedInsert\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedInsert_prev=$opsNotShardedInsert
  [ -n "$opsNotShardedInsert" ] && ops_insertsps_notsharded=`echo "scale=1; ($opsNotShardedInsert - $opsNotShardedInsert_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedUpdate_prev=`grep ^opsNotShardedUpdate\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedUpdate_prev=$opsNotShardedUpdate
  [ -n "$opsNotShardedUpdate" ] && ops_updatesps_notsharded=`echo "scale=1; ($opsNotShardedUpdate - $opsNotShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedDelete_prev=`grep ^opsNotShardedDelete\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedDelete_prev=$opsNotShardedDelete
  [ -n "$opsNotShardedDelete" ] && ops_deletesps_notsharded=`echo "scale=1; ($opsNotShardedDelete - $opsNotShardedDelete_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedGetmore_prev=`grep ^opsNotShardedGetmore\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedGetmore_prev=$opsNotShardedGetmore
  [ -n "$opsNotShardedGetmore" ] && ops_getmoresps_notsharded=`echo "scale=1; ($opsNotShardedGetmore - $opsNotShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  opsNotShardedCommand_prev=`grep ^opsNotShardedCommand\| "${rpath}/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedCommand_prev=$opsNotShardedCommand
  [ -n "$opsNotShardedCommand" ] && ops_commandsps_notsharded=`echo "scale=1; ($opsNotShardedCommand - $opsNotShardedCommand_prev) / ($timeindexnow - $lasttimeindex)" | bc`
  
  [ -n "$opsNotShardedQuery" ] && ops_totalqps_notsharded=`echo "scale=1; $ops_queriesps_notsharded + $ops_insertsps_notsharded + $ops_updatesps_notsharded + $ops_deletesps_notsharded + $ops_getmoresps_notsharded + $ops_commandsps_notsharded" | bc`
  
  echo "Query               $ops_queriesps      $ops_queriesps_sharded      $ops_queriesps_notsharded"
  echo "Insert              $ops_insertsps      $ops_insertsps_sharded     $ops_insertsps_notsharded"
  echo "Update              $ops_updatesps      $ops_updatesps_sharded     $ops_updatesps_notsharded"
  echo "Delete              $ops_deletesps      $ops_deletesps_sharded     $ops_deletesps_notsharded"
  echo "Getmore              $ops_getmoresps      $ops_getmoresps_sharded     $ops_getmoresps_notsharded"
  echo "Command              $ops_commandsps      $ops_commandsps_sharded     $ops_commandsps_notsharded"
  echo "Total                $ops_totalqps      $ops_totalqps_sharded      $ops_totalqps_notsharded"
  
  if [ "X$SQLITE3" == "X1" ] ; then
    $SQLITE "${rpath}/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, status, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opsTotalInsert, opsTotalQuery, opsTotalUpdate, opsTotalDelete, opsTotalGetmore, opsTotalCommand, opsShardedInsert, opsShardedQuery, opsShardedUpdate, opsShardedDelete, opsShardedGetmore, opsShardedCommand, opsNotShardedInsert, opsNotShardedQuery, opsNotShardedUpdate, opsNotShardedDelete, opsNotShardedGetmore, opsNotShardedCommand, lockRatio, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters) values ($timeindexnow, '`date +"%Y%m%d"`', '${cs}', '${status}', '$version', '${uptime-0}', '${memRes-0}', '${memVir-0}', '${memMapped-0}', '${memMappedWJournal-0}', '${infoHeapUsage-0}', '${connCurrent-0}', '${connAvailable-0}', '${netIn-0}', '${netOut-0}', '${netReqn-0}', '${opsTotalInsert-0}', '${opsTotalQuery-0}', '${opsTotalUpdate-0}', '${opsTotalDelete-0}', '${opsTotalGetmore-0}', '${opsTotalCommand-0}', '${opsShardedInsert-0}', '${opsShardedQuery-0}', '${opsShardedUpdate-0}', '${opsShardedDelete-0}', '${opsShardedGetmore-0}', '${opsShardedCommand-0}', '${opsNotShardedInsert-0}', '${opsNotShardedQuery-0}', '${opsNotShardedUpdate-0}', '${opsNotShardedDelete-0}', '${opsNotShardedGetmore-0}', '${opsNotShardedCommand-0}', '${lockRatio-0}', '${lockQueueTotal-0}', '${lockQueueReaders-0}', '${lockQueueWriters-0}', '${lockClientsTotal-0}', '${lockClientsReaders-0}', '${lockClientsWriters-0}')"
  fi
  
}

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | sed 's|,| |g'`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^${name}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "${TMPDIR}/mongo_config_servers.list"
  [ -f "${TMPDIR}/mongo_config_servers.list" ] && [ -f "${rpath}/mongo_config_servers.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"`" ] && mv "${TMPDIR}/mongo_config_servers.list" "${rpath}/mongo_config_servers.list"
  
elif [ -z "$MONGO_SERVERS" ] ; then
  echo "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else
  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | sed 's|,| |g'`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
fi

for configip in $configips ; do
  mongoses=`($MONGO ${configip}/config --eval "db.mongos.find({}, {_id : 1}).forEach(printjson)" 2>/dev/null && gotit=1) | "${rpath}/../../lib/json2txt" | awk '{print $2}' | sort -n`
  [ -n "$gotit" ] && unset gotit && break
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "${TMPDIR}/mongo_mongos_servers.list"
  [ -f "${TMPDIR}/mongo_mongos_servers.list" ] && [ -f "${rpath}/mongo_mongos_servers.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"`" ] && mv "${TMPDIR}/mongo_mongos_servers.list" "${rpath}/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`($MONGO ${configip}/config --eval "db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>/dev/null && gotit=1) | "${rpath}/../../lib/json2txt"`
  [ -n "$gotit" ] && unset gotit && break
done

if [ -n "$shardhosts" ] ; then
  rm -f "${TMPDIR}/mongo_shards.list" 2>/dev/null
  IFS1=$IFS
  IFS='
'
  nmax=`echo "$shardhosts" | tail -1 | cut -d'/' -f1`
  for ((n=1; n<=$nmax; n++)) ; do
    shard=`echo "$shardhosts" | grep ^$n\/ | grep _id | awk '{print $2}'`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | awk '{print $2}'`
    shardport=${shardhost#*:}
    ip_to_name ${shardhost%:*}
    shardhost="$rname"
    echo "${shardhost%:*}:${shardport} ${shard}" >> "${TMPDIR}/mongo_shards.list"
  done
  [ -f "${TMPDIR}/mongo_shards.list" ] && [ -f "${rpath}/mongo_shards.list" ] && [ -n "`$DIFF -q "${TMPDIR}/mongo_shards.list" "${rpath}/mongo_shards.list"`" ] && mv "${TMPDIR}/mongo_shards.list" "${rpath}/mongo_shards.list"
IFS=$IFS1
fi

if [ -e "${rpath}/mongo_config_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_config_servers.list"` ; do
    install -d "${rpath}/../../www/mongo/configservers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "${rpath}/../../lib/txt2html" "${rpath}/data/${cs}.report" > "${rpath}/../../www/mongo/configservers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi

if [ -e "${rpath}/mongo_mongos_servers.list" ] ; then
  for cs in `cat "${rpath}/mongo_mongos_servers.list"` ; do
    install -d "${rpath}/../../www/mongo/balancers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "${rpath}/../../lib/txt2html" "${rpath}/data/${cs}.report" > "${rpath}/../../www/mongo/balancers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi

if [ -e "${rpath}/mongo_shards.list" ] ; then
  for cs in `cat "${rpath}/mongo_shards.list" | cut -d' ' -f1` ; do
    install -d "${rpath}/../../www/mongo/shardservers/${cs}"
    mv "${rpath}/data/${cs}.dat" "${rpath}/data/${cs}.dat.prev" 2>/dev/null
    $MONGO ${cs}/admin --quiet "${rpath}/serverstatus.js" > "${rpath}/data/${cs}.dat"
    parse_data "${cs}" > "${rpath}/data/${cs}.report"
    "${rpath}/../../lib/txt2html" "${rpath}/data/${cs}.report" > "${rpath}/../../www/mongo/shardservers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done
fi



