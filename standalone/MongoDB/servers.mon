#!/bin/bash

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"
log "Starting.."

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && log "Mongo client not found, exiting..  " && exit 1
source "$rpath/${rcommand%.mon}.conf"
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi
source "$M_ROOT/conf/mon.conf"

touch "$rpath/mongo_mongos_servers.list" "$rpath/mongo_config_servers.list" "$rpath/mongo_shards.list" "$rpath/mongo_servers.list"
M_TEMP="$M_TEMP/MongoDB"
install -d "$M_TEMP"

function print_servers() {
  for host in $@ ; do
    echo "$host|||"
  done
}

function find_master() {
  im=`$MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().primary" 2>>"$LOG" | grep -v arning | tail -1`
  if [ -z "$im" ] ; then
    im=`$MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().ismaster" 2>>"$LOG" |tail -1`
    [ "X$im" == "Xtrue" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || (log "Unable to find master for replica set (asked ${1})" && exit 1)
}

function find_rsmemberrole() {
  rsmemberrole='|slave'
  master=`find_master "$1"`
  members=`$MONGO $AUTH "$master/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG" | "$M_ROOT/lib/json2txt"`
  membernum=`echo "$members" | grep "$1" | cut -d'/' -f1`
  arbiter=`echo "$members" | grep "^${membernum}\/" | grep arbiterOnly | grep -c true$`
  [ $arbiter -eq 1 ] && rsmemberrole='|arbiter'
  [ -n "$master" ] && [ "$master" == "$1" ] && rsmemberrole='|master'
}

function ip_to_name() {
  rname1=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $2}'`
  [ -n "$rname1" ] && rname2=`grep "^${1%:*}[[:space:]]" /etc/hosts | awk '{print $3}'` || rname=${1%:*}
  [ -n "$rname2" ] && [ ${#rname2} -lt ${#rname1} ] && rname=$rname2 || rname=$rname1
  [ -n "$rname" ] || rname=${1%:*}
}

function collect_hosts() {
  for name in $@ ; do
    port=${name#*:}
    [ "X$port" == "X$name" ] && port=""
    ip_to_name $name
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function parse_data() {
  timeindexnow=`date +"%s"`
  lasttimeindex=`cat "$M_TEMP/${1}.lasttimeindex" 2>/dev/null | grep -v warning` || lasttimeindex=`expr $timeindexnow - $FREQ` || lasttimeindex=`expr $timeindexnow - 200`
  echo $timeindexnow > "$M_TEMP/${1}.lasttimeindex"
  for d in `cat "$rpath/data/${1}.dat" | grep \|` ; do
    eval "`echo "$d" | sed 's_|_=_'`"
  done
  echo -e "Server $1 ** `date`\n-----------------------------------------\n\n Status\n"
  echo "Status:   $status" | sed 's|1|OK|;s|0|Error|'
  echo "Uptime:   since `date -d "-$uptime sec"`" | sed 's|  | |g'
  echo -e "\n Memory\n\nResident (MB):   ${memRes-0}\nVirtual (MB):   ${memVir-0}\nMapped (MB):   ${memMapped-0}\nMapped with journal (MB):   ${memMappedWJournal-0}\nHeap usage (MB):   `expr ${infoHeapUsage-0} / 1048576`\n\n Network\n\nCurrent connections:   ${connCurrent-0}\nAvailable connections:   ${connAvailable-0}"
  [ -e "$rpath/data/${1}.dat.prev" -a -e "$rpath/data/${1}.dat" ] || return
  netIn_prev=`grep ^netIn\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || netIn_prev=$netIn
  bw_in=`solve 2 "(${netIn-0} - ${netIn_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576"`
  netOut_prev=`grep ^netOut\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || netOut_prev=$netOut
  bw_out=`solve 2 "(${netOut-0} - ${netOut_prev-1}) / ($timeindexnow - $lasttimeindex) / 1048576"`
  echo -e "Bandwidth in (MB/sec):   $bw_in\nBandwidth out (MB/sec):   $bw_out"
  netReqn_prev=`grep ^netReqn\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || netReqn_prev=$netReqn
  net_reqps=`solve 1 "($netReqn - $netReqn_prev) / ($timeindexnow - $lasttimeindex)"`
  echo "Network requests per second:   $net_reqps"
  if [ -n "$lockTime" ] ; then
    echo -e "\n Global lock\n"
    lockTime_prev=`grep ^lockTime\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || lockTime_prev=$lockTime
    lockTime=`solve 2 "(${lockTime} - ${lockTime_prev}) / ($timeindexnow - $lasttimeindex) / 10000"`
    echo -e "Lock time current, percents:   $lockTime\nLock time overall, percents:   `solve 2 "$lockRatio * 100 / 1"`\nLock queue total:   $lockQueueTotal\nLock queue readers:   $lockQueueReaders\nLock queue writers:   $lockQueueWriters\nLock clients total:   $lockClientsTotal\nLock clients readers:   $lockClientsReaders\nLock clients writers:   $lockClientsWriters"
  else
    lockTime=0
    lockRatio=0
  fi
    
  accessesNotInMemory_prev=`grep ^accessesNotInMemory\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || accessesNotInMemory_prev=$accessesNotInMemory
  [ -n "$accessesNotInMemory" ] && recstatsNotInMemory=`solve 1 "($accessesNotInMemory - $accessesNotInMemory_prev) / ($timeindexnow - $lasttimeindex)"`
  
  pageFaultExceptionsThrown_prev=`grep ^pageFaultExceptionsThrown\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || pageFaultExceptionsThrown=$pageFaultExceptionsThrown_prev
  [ -n "$pageFaultExceptionsThrown" ] && recstatsPageFaults=`solve 1 "($pageFaultExceptionsThrown - $pageFaultExceptionsThrown_prev) / ($timeindexnow - $lasttimeindex)"`
  
  echo -e "\n Access Stats\n\nRecords not found in memory:   $recstatsNotInMemory\nPage fault exceptions:   $recstatsPageFaults\n"
  
  echo -e "\n Operations / second\n\nOperation Type         Total       Sharded       Not Sharded\n"
  
  # Total
  
  opcountersQuery_prev=`grep ^opcountersQuery\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_queriesps=`solve 1 "($opcountersQuery >= $opcountersQuery_prev) * ($opcountersQuery - $opcountersQuery_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opcountersInsert_prev=`grep ^opcountersInsert\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersInsert_prev=$opcountersInsert
  [ -n "$opcountersInsert" ] && ops_insertsps=`solve 1 "($opcountersInsert >= $opcountersInsert_prev) * ($opcountersInsert - $opcountersInsert_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opcountersUpdate_prev=`grep ^opcountersUpdate\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersUpdate_prev=$opcountersUpdate
  [ -n "$opcountersUpdate" ] && ops_updatesps=`solve 1 "($opcountersUpdate >= $opcountersUpdate_prev) * ($opcountersUpdate - $opcountersUpdate_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opcountersDelete_prev=`grep ^opcountersDelete\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersDelete_prev=$opcountersDelete
  [ -n "$opcountersDelete" ] && ops_deletesps=`solve 1 "($opcountersDelete >= $opcountersDelete_prev) * ($opcountersDelete - $opcountersDelete_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opcountersGetmore_prev=`grep ^opcountersGetmore\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersGetmore_prev=$opcountersGetmore
  [ -n "$opcountersGetmore" ] && ops_getmoresps=`solve 1 "($opcountersGetmore >= $opcountersGetmore_prev) * ($opcountersGetmore - $opcountersGetmore_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opcountersCommand_prev=`grep ^opcountersCommand\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opcountersCommand_prev=$opcountersCommand
  [ -n "$opcountersCommand" ] && ops_commandsps=`solve 1 "($opcountersCommand >= $opcountersCommand_prev) * ($opcountersCommand - $opcountersCommand_prev) / ($timeindexnow - $lasttimeindex)"`
  
  [ -n "$opcountersQuery" ] && ops_totalqps=`solve 1 "$ops_queriesps + $ops_insertsps + $ops_updatesps + $ops_deletesps + $ops_getmoresps + $ops_commandsps"`
  
  # Sharded
  
  opsShardedQuery_prev=`grep ^opsShardedQuery\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedQuery_prev=$opsShardedQuery
  [ -n "$opsShardedQuery" ] && ops_queriesps_sharded=`solve 1 "($opsShardedQuery >= $opsShardedQuery_prev) * ($opsShardedQuery - $opsShardedQuery_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsShardedInsert_prev=`grep ^opsShardedInsert\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedInsert_prev=$opsShardedInsert
  [ -n "$opsShardedInsert" ] && ops_insertsps_sharded=`solve 1 "($opsShardedInsert >= $opsShardedInsert_prev) * ($opsShardedInsert - $opsShardedInsert_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsShardedUpdate_prev=`grep ^opsShardedUpdate\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedUpdate_prev=$opsShardedUpdate
  [ -n "$opsShardedUpdate" ] && ops_updatesps_sharded=`solve 1 "($opsShardedUpdate >= $opsShardedUpdate_prev) * ($opsShardedUpdate - $opsShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsShardedDelete_prev=`grep ^opsShardedDelete\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedDelete_prev=$opsShardedDelete
  [ -n "$opsShardedDelete" ] && ops_deletesps_sharded=`solve 1 "($opsShardedDelete >= $opsShardedDelete_prev) * ($opsShardedDelete - $opsShardedDelete_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsShardedGetmore_prev=`grep ^opsShardedGetmore\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedGetmore_prev=$opsShardedGetmore
  [ -n "$opsShardedGetmore" ] && ops_getmoresps_sharded=`solve 1 "($opsShardedGetmore >= $opsShardedGetmore_prev) * ($opsShardedGetmore - $opsShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsShardedCommand_prev=`grep ^opsShardedCommand\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsShardedCommand_prev=$opsShardedCommand
  [ -n "$opsShardedCommand" ] && ops_commandsps_sharded=`solve 1 "($opsShardedCommand >= $opsShardedCommand_prev) * ($opsShardedCommand - $opsShardedCommand_prev) / ($timeindexnow - $lasttimeindex)"`
  
  [ -n "$opsShardedQuery" ] && ops_totalqps_sharded=`solve 1 "$ops_queriesps_sharded + $ops_insertsps_sharded + $ops_updatesps_sharded + $ops_deletesps_sharded + $ops_getmoresps_sharded + $ops_commandsps_sharded"`
  
  # Not Sharded
  
  opsNotShardedQuery_prev=`grep ^opsNotShardedQuery\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedQuery_prev=$opsNotShardedQuery
  [ -n "$opsNotShardedQuery" ] && ops_queriesps_notsharded=`solve 1 "($opsNotShardedQuery >= $opsNotShardedQuery_prev) * ($opsNotShardedQuery - $opsNotShardedQuery_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsNotShardedInsert_prev=`grep ^opsNotShardedInsert\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedInsert_prev=$opsNotShardedInsert
  [ -n "$opsNotShardedInsert" ] && ops_insertsps_notsharded=`solve 1 "($opsNotShardedInsert >= $opsNotShardedInsert_prev) * ($opsNotShardedInsert - $opsNotShardedInsert_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsNotShardedUpdate_prev=`grep ^opsNotShardedUpdate\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedUpdate_prev=$opsNotShardedUpdate
  [ -n "$opsNotShardedUpdate" ] && ops_updatesps_notsharded=`solve 1 "($opsNotShardedUpdate >= $opsNotShardedUpdate_prev) * ($opsNotShardedUpdate - $opsNotShardedUpdate_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsNotShardedDelete_prev=`grep ^opsNotShardedDelete\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedDelete_prev=$opsNotShardedDelete
  [ -n "$opsNotShardedDelete" ] && ops_deletesps_notsharded=`solve 1 "($opsNotShardedDelete >= $opsNotShardedDelete_prev) * ($opsNotShardedDelete - $opsNotShardedDelete_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsNotShardedGetmore_prev=`grep ^opsNotShardedGetmore\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedGetmore_prev=$opsNotShardedGetmore
  [ -n "$opsNotShardedGetmore" ] && ops_getmoresps_notsharded=`solve 1 "($opsNotShardedGetmore >= $opsNotShardedGetmore_prev) * ($opsNotShardedGetmore - $opsNotShardedGetmore_prev) / ($timeindexnow - $lasttimeindex)"`
  
  opsNotShardedCommand_prev=`grep ^opsNotShardedCommand\| "$rpath/data/${1}.dat.prev" | cut -d '|' -f2` || opsNotShardedCommand_prev=$opsNotShardedCommand
  [ -n "$opsNotShardedCommand" ] && ops_commandsps_notsharded=`solve 1 "($opsNotShardedCommand >= $opsNotShardedCommand_prev) * ($opsNotShardedCommand - $opsNotShardedCommand_prev) / ($timeindexnow - $lasttimeindex)"`
  
  [ -n "$opsNotShardedQuery" ] && ops_totalqps_notsharded=`solve 1 "$ops_queriesps_notsharded + $ops_insertsps_notsharded + $ops_updatesps_notsharded + $ops_deletesps_notsharded + $ops_getmoresps_notsharded + $ops_commandsps_notsharded"`
  
  echo -e "Query               $ops_queriesps      $ops_queriesps_sharded      $ops_queriesps_notsharded\nInsert              $ops_insertsps      $ops_insertsps_sharded     $ops_insertsps_notsharded\nUpdate              $ops_updatesps      $ops_updatesps_sharded     $ops_updatesps_notsharded\nDelete              $ops_deletesps      $ops_deletesps_sharded     $ops_deletesps_notsharded\nGetmore              $ops_getmoresps      $ops_getmoresps_sharded     $ops_getmoresps_notsharded\nCommand              $ops_commandsps      $ops_commandsps_sharded     $ops_commandsps_notsharded\nTotal                $ops_totalqps      $ops_totalqps_sharded      $ops_totalqps_notsharded"
  
  if [ "X$SQLITE3" == "X1" ] ; then
    dbquery "$rpath/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, status, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opcountersInsert, opcountersQuery, opcountersUpdate, opcountersDelete, opcountersGetmore, opcountersCommand, opsShardedInsert, opsShardedQuery, opsShardedUpdate, opsShardedDelete, opsShardedGetmore, opsShardedCommand, opsNotShardedInsert, opsNotShardedQuery, opsNotShardedUpdate, opsNotShardedDelete, opsNotShardedGetmore, opsNotShardedCommand, opsTotalQPS, opsShardedTotalQPS, opsNotShardedTotalQPS, lockRatio, lockTime, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters, recstatsPageFaults, recstatsNotInMemory) values ($timeindexnow, '`date +"%Y%m%d"`', '${cs}', '${status}', '$version', '${uptime-0}', '${memRes-0}', '${memVir-0}', '${memMapped-0}', '${memMappedWJournal-0}', '${infoHeapUsage-0}', '${connCurrent-0}', '${connAvailable-0}', '${bw_in-0}', '${bw_out-0}', '${net_reqps-0}', '${ops_insertsps-0}', '${ops_queriesps-0}', '${ops_updatesps-0}', '${ops_deletesps-0}', '${ops_getmoresps-0}', '${ops_commandsps-0}', '${ops_insertsps_sharded-0}', '${ops_queriesps_sharded-0}', '${ops_updatesps_sharded-0}', '${ops_deletesps_sharded-0}', '${ops_getmoresps_sharded-0}', '${ops_commandsps_sharded-0}', '${ops_insertsps_notsharded-0}', '${ops_queriesps_notsharded-0}', '${ops_updatesps_notsharded-0}', '${ops_deletesps_notsharded-0}', '${ops_getmoresps_notsharded-0}', '${ops_commandsps_notsharded-0}', '${ops_totalqps-0}', '${ops_totalqps_sharded-0}', '${ops_totalqps_notsharded-0}', '${lockRatio-0}', '${lockTime-0}', '${lockQueueTotal-0}', '${lockQueueReaders-0}', '${lockQueueWriters-0}', '${lockClientsTotal-0}', '${lockClientsReaders-0}', '${lockClientsWriters-0}', '${recstatsPageFaults-0}', '${recstatsNotInMemory-0}')" 2>>"$LOG"
  fi
  unset status version uptime memRes memVir memMapped memMappedWJournal infoHeapUsage connCurrent connAvailable bw_in bw_out net_reqps ops_insertsps ops_queriesps ops_updatesps ops_deletesps ops_getmoresps ops_commandsps ops_insertsps_sharded ops_queriesps_sharded ops_updatesps_sharded ops_deletesps_sharded ops_getmoresps_sharded ops_commandsps_sharded ops_insertsps_notsharded ops_queriesps_notsharded ops_updatesps_notsharded ops_deletesps_notsharded ops_getmoresps_notsharded ops_commandsps_notsharded ops_totalqps ops_totalqps_sharded ops_totalqps_notsharded lockRatio lockTime lockTime_prev lockQueueTotal lockQueueReaders lockQueueWriters lockClientsTotal lockClientsReaders lockClientsWriters recstatsPageFaults recstatsNotInMemory
}

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | sed 's|,| |g'`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^$name\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && log "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "$M_TEMP/mongo_config_servers.list"
  [ -f "$M_TEMP/mongo_config_servers.list" ] && [ -f "$rpath/mongo_config_servers.list" ] && [ -n "`$DIFF -q "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list"`" ] && mv "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list"
  
elif [ -z "$MONGO_SERVERS" ] ; then
  log "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else

## Config servers are not defined

  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | sed 's|,| |g'`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && log "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
  
  ## Collecting servers list
  [ -f "$M_TEMP/mongo_servers.list" ] && rm -f "$M_TEMP/mongo_servers.list"
  # For hosts from servers.conf
  for mongohost in $configips ; do
    mongoport=${mongohost##*:}
    mongohost="${mongohost%:*}"
    # Is it a part of a replica set?
    if [ "X`$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.conf()" | tail -1`" != "Xnull" ] ; then
      replicaset=`$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG" | tail -1`
      find_rsmemberrole "${mongohost}:${mongoport}"
    fi
    echo "${mongohost}:${mongoport}||${replicaset}${rsmemberrole}" >> "$M_TEMP/mongo_servers.list"
  done
  
  # Getting hosts list for every found replica set
  for rs in `cat "$M_TEMP/mongo_servers.list" | cut -d'|' -f3 | sort | uniq` ; do
    for rshost in `cat "$M_TEMP/mongo_servers.list" | grep "|$rs|" | cut -d'|' -f1` ; do
      replicahosts=`$MONGO $AUTH "$rshost/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG"`
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/\"host\" | cut -d'|' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break
    done
    replicalist=()
    for replicahost in $replicahosts ; do
      [ `grep -c "^${replicahost}|" "$M_TEMP/mongo_servers.list"` -gt 0 ] && continue
      ip_to_name "$replicahost"
      [ `grep -c "^${rname}:${replicahost##*:}|" "$M_TEMP/mongo_servers.list"` -gt 0 ] && continue
      find_rsmemberrole "$replicahost"
      replicalist+=("${rname}:${replicahost##*:}||${rs}${rsmemberrole}")
    done
    echo -e ${replicalist[*]} | tr ' ' '\n' >> "$M_TEMP/mongo_servers.list"
  done

  [ -f "$M_TEMP/mongo_servers.list" ] && [ -f "$rpath/mongo_servers.list" ] && [ -n "`$DIFF -q "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list"`" ] && mv "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list"
fi
  
for configip in $configips ; do
# Despite variable name this is not necessarily config servers, so might be
# replica sets
# master=`find_master ${configip} || echo ${configip}`
  mongoses=`$MONGO $AUTH "$configip/admin" --quiet --eval "db = db.getSiblingDB(\"config\"); db.mongos.find({}, {_id : 1}).forEach(printjson)" 2>>"$LOG"`
  res=$?
  mongoses=`echo "$mongoses" | "$M_ROOT/lib/json2txt" | cut -d'|' -f2 | tr -d '"' | sort -n`
  [ $res -eq 0 ] && break
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "$M_TEMP/mongo_mongos_servers.list"
  [ -f "$M_TEMP/mongo_mongos_servers.list" ] && [ -f "$rpath/mongo_mongos_servers.list" ] && [ -n "`$DIFF -q "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list"`" ] && mv "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list"
else
  echo -n > "$rpath/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`$MONGO $AUTH "$configip"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>>"$LOG"`
  res=$?
  shardhosts=`echo "$shardhosts" | "$M_ROOT"/lib/json2txt | tr -d '"'`
  [ $res -eq 0 ] && break
done

if [ -n "$shardhosts" ] ; then
  [ -f "$M_TEMP/mongo_shards.list" ] && rm -f "$M_TEMP/mongo_shards.list"
  IFS1=$IFS
  IFS='
'
  nmax=`echo "$shardhosts" | tail -1 | cut -d'/' -f1`
  shardlist=()
  for ((n=0; n<=$nmax; n++)) ; do
    shard=`echo "$shardhosts" | grep ^$n\/ | grep _id | cut -d'|' -f2`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | cut -d'|' -f2`
    shard=`eval "echo $shard"` ; shardhost=`eval "echo $shardhost"`
    #ifreplicaset=${shardhost%%/*}
    shardhost=${shardhost#*/}
    # might be multiple hosts here, not needed now, it'll be dealt with later
    shardhost=${shardhost%%,*}
    shardport=${shardhost#*:}
    if [ "X`$MONGO $AUTH "${shardhost%:*}:${shardport}/admin" --quiet --eval "rs.conf()" 2>>"$LOG" | tail -1`" != "Xnull" ] ; then
      replicaset=$(IFS=$IFS1 ; $MONGO $AUTH "${shardhost%:*}:${shardport}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG" | tail -1)
    fi
    ip_to_name ${shardhost%:*}
    shardhost="$rname"
    find_rsmemberrole "${shardhost}:${shardport}"
    shardlist+=("${shardhost}:${shardport}|$shard|${replicaset}${rsmemberrole}")
  done
  echo -e ${shardlist[*]} | tr ' ' '\n' > "$M_TEMP/mongo_shards.list"

  shardlist=()
  for rs in `cat "$M_TEMP/mongo_shards.list" | cut -d'|' -f2,3 | sort | uniq` ; do

    for rshost in `cat "$M_TEMP/mongo_shards.list" | grep "|$rs|" | cut -d'|' -f1` ; do
      replicahosts=$(IFS=$IFS1 ; $MONGO $AUTH "$rshost"/admin --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG")
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/\"host\" | cut -d'|' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break
    done

    for replicahost in $replicahosts ; do
      [ `grep -c "^$replicahost|" "$M_TEMP/mongo_shards.list"` -gt 0 ] && continue
      ip_to_name "$replicahost"
      [ `grep -c "^${rname}:${replicahost##*:}|" "$M_TEMP/mongo_shards.list"` -gt 0 ] && continue
      find_rsmemberrole "$replicahost"
      shardlist+=("$replicahost|${rs}${rsmemberrole}")
    done
    echo -e ${shardlist[*]} | tr ' ' '\n' >> "$M_TEMP/mongo_shards.list"
  done
  
  [ -f "$M_TEMP/mongo_shards.list" ] && [ -f "$rpath/mongo_shards.list" ] && [ -n "`$DIFF -q "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list"`" ] && mv "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list"
IFS=$IFS1
else
  echo > "$M_TEMP/mongo_shards.list"
fi

if [ -e "$rpath/mongo_config_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_config_servers.list" | cut -d'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/configservers/$cs" ] || install -d "$M_ROOT/www/MongoDB/configservers/$cs"
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
# mongo localhost:27017/admin --quiet --eval "db.currentOp().inprog.forEach(function(d){ if(d.waitingForLock) print(d.op)})" | sort | uniq -c
    serverstatus=$($MONGO $AUTH "$cs"/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
      sed -i "/$cs/d" "$rpath/mongo_config_servers.list"
    else
      echo "$serverstatus" > "$rpath/data/${cs}.dat"
    fi
    statusreport=`parse_data "$cs"`
    echo "$statusreport" > "$rpath/data/${cs}.report"
    reporthtml=`"$M_ROOT/lib/"txt2html "$rpath/data/${cs}.report"`
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/configservers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done &
fi

if [ -e "$rpath/mongo_mongos_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_mongos_servers.list" | cut -d'|' -f1` ; do
    install -d "$M_ROOT/www/MongoDB/balancers/$cs"
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
    serverstatus=$($MONGO $AUTH "$cs"/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
      sed -i "/$cs/d" "$rpath/mongo_mongos_servers.list"
    else
      echo "$serverstatus" > "$rpath/data/${cs}.dat"
    fi
    statusreport=`parse_data "$cs"`
    echo "$statusreport" > "$rpath/data/${cs}.report"
    reporthtml=`"$M_ROOT/lib/"txt2html "$rpath/data/${cs}.report"`
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/balancers/${cs}/${cs%:*}_${cs#*:}_name.html"
  done &
fi

if [ -e "$rpath/mongo_shards.list" ] ; then
  for cs in `cat "$rpath/mongo_shards.list" | cut -d'|' -f1` ; do
    install -d "$M_ROOT/www/MongoDB/shardservers/$cs"
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
    serverstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
      sed -i "/$cs/d" "$rpath/mongo_shards.list"
    else
      echo "$serverstatus" > "$rpath/data/${cs}.dat"
    fi
    statusreport=`parse_data "$cs"`
    echo "$statusreport" > "$rpath/data/${cs}.report"
    reporthtml=`"$M_ROOT/lib/"txt2html "$rpath/data/${cs}.report"`
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/shardservers/$cs/${cs%:*}_${cs#*:}_name.html"
  done &
fi

if [ -e "$rpath/mongo_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_servers.list" | cut -d'|' -f1` ; do
    install -d "$M_ROOT/www/MongoDB/servers/$cs"
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
    serverstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
      sed -i "/$cs/d" "$rpath/mongo_servers.list"
    else
      echo "$serverstatus" > "$rpath/data/${cs}.dat"
    fi
    statusreport=`parse_data "$cs"`
    echo "$statusreport" > "$rpath/data/${cs}.report"
    reporthtml=`"$M_ROOT/lib/"txt2html "$rpath/data/${cs}.report"`
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/servers/$cs/${cs%:*}_${cs#*:}_name.html"
  done &
fi

### Cleanup. Note that it removes all old files from data folder, including
### those created by other MongoDB monitors

timeshift=`cat "$M_TEMP/../timeshift" || echo 0`
ccl=`expr $FREQ + $timeshift || echo 200`
mmin=`expr $ccl \* 3 / 60 + 1`
find "$rpath/data/" -mmin +$mmin -exec rm {} \;
exit 0

