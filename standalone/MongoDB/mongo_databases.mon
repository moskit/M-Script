#!/bin/bash
# Copyright (C) 2012-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
LOG="$M_ROOT/logs/sa.log"

source "$rpath/mongo_servers.conf"
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found! Exiting..  " && exit 1
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi

source "$rpath/mongo_databases.conf" 2>/dev/null
source "$M_ROOT/lib/functions.sh"

get_lock

if [ -e "$rpath/mongo_mongos_servers.list" ]; then
  nmongos=`wc -l "$rpath/mongo_mongos_servers.list"`
  hostport=`head -$((RANDOM%$nmongos+1)) "$rpath/mongo_mongos_servers.list" | tail -1 | cut -d'|' -f1`
fi
[ -z "$hostport" -a -e "$rpath/mongo_servers.list" ] && hostport=`cat "$rpath/mongo_servers.list" | grep -vE "slave$|arbiter$" | cut -d'|' -f1 | tr '\n' ' '`
[ -z "$hostport" ] && echo "No servers found" && unlock_exit 1

[ -f "$rpath/data/databases.dat" ] && rm -f "$rpath/data/databases.dat"

databases=()
for hp in $hostport ; do
  databases+=(`$MONGO $AUTH "$hp/admin" --quiet --eval "db.runCommand( { listDatabases : 1 } ).databases.forEach ( function(d) { if (d.empty == false && d.name != 'local' && d.name != 'admin') { print( '=' + '\$hp|' + d.name + '|' + d.sizeOnDisk ) }} )" | grep ^= | tr -d '^='`)
done
echo -e ${databases[*]} | tr ' ' '\n' | sort | uniq > "$rpath/data/databases.dat"

ignored=`echo "$IGNORED_DBS" | tr ',' ' '`
ignored=`echo "$ignored" | tr ' ' '\n' | grep -v ^$`

for hpdb in `cat "$rpath/data/databases.dat" | cut -d'|' -f1,2` ; do
  
  hp=${hpdb%|*}
  db=${hpdb#*|}
  echo "$ignored" | grep -q "^${db}$" && continue

  dbdat=`$MONGO $AUTH "$hp/admin" --quiet --eval "db = db.getSiblingDB(\"$db\"); printjson(db.stats())" 2>/dev/null | "$M_ROOT"/lib/json2txt`
  
  collections=`$MONGO $AUTH "$hp/admin" --quiet --eval "db = db.getSiblingDB(\"$db\"); db.getCollectionNames()" 2>/dev/null | grep -vE "exception|Error|failed" | tr ',' '\n'`
  
  for coll in `echo "$collections"`; do
    colldata=`$MONGO $AUTH "$hp/admin" --quiet --eval "var cdb = '$db', cns = '$coll'" "$rpath/collinfo.js"`
    eval "`echo "$colldata" | grep coll_count`"
    eval "`echo "$colldata" | grep coll_size`"
    eval "`echo "$colldata" | grep coll_indexsize`"
    eval "`echo "$colldata" | grep coll_storsize`"
    eval "`echo "$colldata" | grep coll_chunks`"
    ns="${db}.${coll}"
    if [ "_$SHARDING" == "_manual" ]; then
      store_results "hp|text,ns|text,coll_count|integer,coll_size|integer,coll_indexsize|integer,coll_storsize|integer,coll_chunks|integer" "standalone/MongoDB/databases.sql3|collections"
    else
      store_results "ns|text,coll_count|integer,coll_size|integer,coll_indexsize|integer,coll_storsize|integer,coll_chunks|integer" "standalone/MongoDB/databases.sql3|collections"
    fi
    echo "$colldata" > "$rpath/data/${ns}.dat"
  done
  if [ "_$SHARDING" == "_manual" ]; then
    echo "$dbdat" > "$rpath/data/${db}.${hp}.dat"
    echo "$collections" > "$rpath/data/${db}.${hp}.collections"
    "$rpath"/nonshard_distributed_dbreport "$db" "$hostport"
  else
    echo "$dbdat" > "$rpath/data/${db}.dat"
    echo "$collections" > "$rpath/data/${db}.collections"
  fi
done

release_lock

# we don't need a report from this monitor
exit 10

