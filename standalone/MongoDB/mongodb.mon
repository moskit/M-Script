#!/bin/bash

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rcommand=${xcommand##*/}
rpath=${xcommand%/*}
#*/
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found! Exiting..  " && exit 1
source "${rpath}/${rcommand%.mon}.conf"

function print_mongoses() {
  for host in $@ ; do
    echo $host
  done
}

function print_config_servers() {
  for host in $@ ; do
    echo $host
  done
}

function find_master() {
  im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().primary"|tail -1`
  if [ -z "$im" ] ; then
    im=`${MONGO} ${1}/config --quiet --eval "rs.isMaster().ismaster"|tail -1`
    [ "X$im" == "Xtrue" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || exit 1
}

function print_databases() {
  ${MONGO} ${1}/admin --eval "db.runCommand( { listDatabases : 1 } ).databases.forEach ( function(d) { print( '=' + d.name + ' ' + d.sizeOnDisk ) } ); print( '=totalSize ' + db.runCommand( { listDatabases : 1 } ).totalSize )" | grep ^= | sed 's|^=||g'
}

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | sed 's|,| |g'`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^${name}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      [ -n "$port" ] || port=27019
      configips="$configips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
  else
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      [ -n "$port" ] || port=27019
      configips="$configips ${name%:*}:$port"
    done
  fi
  print_config_servers
  
elif [ -z "$MONGO_SERVERS" ] ; then
  echo "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else
  MONGO_SERVERS=`echo $MONGO_SERVERS | sed 's|,| |g'`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "${rpath}/../../conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "X$cluster" == "X1" ] && [ "X$noncluster" == "X1" ] && echo "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "X$cluster" == "X1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      [ -n "$port" ] || port=27017
      configips="$configips `"${rpath}/../../cloud/ec2/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
  else
    for name in $MONGO_SERVERS ; do
      port=${name#*:}
      [ -n "$port" ] || port=27017
      configips="$configips ${name%:*}:$port"
    done
  fi
fi

for configip in $configips ; do
  mongoses=`($MONGO ${configip}/config --eval "db.mongos.find({}, {_id : 1}).forEach(printjson)" 2>/dev/null && gotit=1) | "${rpath}/lib/json2txt" | awk '{print $2}' | sort -n`
  [ -n "$gotit" ] && unset gotit && break
done

if [ -n "$mongoses" ] ; then
  print_mongoses $mongoses
  for mongos in $mongoses ; do
    print_databases $mongos && break
  done
  
else
  for configip in $configips ; do
    master=`find_master $configip` && break
  done
  print_databases $master
fi









#mongo appserver13/admin --eval "db.runCommand( { listDatabases : 1 } ).databases.forEach ( function(d) { print( '=' + d.name + ' ' + d.sizeOnDisk ) } ); print( '=totalSize ' + db.runCommand( { listDatabases : 1 } ).totalSize )" | grep ^= | sed 's|^=||g'

