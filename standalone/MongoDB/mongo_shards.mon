#!/bin/bash
# Copyright (C) 2012-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"

MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found, exiting..  " && exit 1

source "$rpath/mongo_servers.conf"
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi

source "$rpath/${rcommand%.mon}.conf" 2>/dev/null
source "$M_ROOT/conf/mon.conf"

timeindexnow=`date +"%s"`
timeshift=`cat "$M_TEMP/timeshift" 2>/dev/null`
[ -n "$timeshift" ] && period=`expr $FREQ + $timeshift` || period=$FREQ
lastping="ISODate(\"`date -d "-$period sec" +"%Y-%m-%dT%H:%M:%S"`\")"

M_TEMP="$M_TEMP/MongoDB"
[ -d "$M_TEMP/MongoDB" ] || install -d "$M_TEMP/MongoDB"

a=`cat "$rpath/mongo_config_servers.list" 2>/dev/null | wc -l`
[[ $a -eq 0 ]] && log "No configuration servers found" && exit 1

confserver=`head -n $((RANDOM%$a+1)) "$rpath/mongo_config_servers.list" 2>/dev/null | tail -1 | cut -sd'|' -f1`
[ -z "$confserver" ] && confserver=`head -1 "$rpath/mongo_config_servers.list" 2>/dev/null | cut -sd'|' -f1`
[ -z "$confserver" ] && log "No configuration servers found" && exit 1

sharded=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.collections.find( {}, { _id : 1 } ).forEach(printjson)" 2>>$LOG | "$M_ROOT"/lib/json2txt | cut -d'|' -f2 | tr -d '"'`

for coll in $sharded ; do

  database=${coll%%.*}
  collection=${coll#*.}
  rm -f "$rpath/data/shards.$coll"
  shards=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.chunks.distinct(\"shard\").forEach( function(c) {print(c + '|' + db.chunks.find({ \"ns\" : \"$coll\" , \"shard\" : c }).count() ) } )" 2>>$LOG`
  collshardinfo=()
  for shard in $shards ; do
    shname=`echo $shard | cut -d'|' -f1`
    shchunks=`echo $shard | cut -d'|' -f2`
    shhost=`grep \|$shname\| "$rpath"/mongo_shards.list 2>/dev/null | grep \|master= | cut -d'|' -f1`
    [ -z "$shhost" ] && continue
    shdatasize=`$MONGO $AUTH "$shhost"/admin --quiet --eval "db = db.getSiblingDB(\"$database\"); db.$collection.dataSize()" 2>>$LOG`
    shindexsize=`$MONGO $AUTH "$shhost"/admin --quiet --eval "db = db.getSiblingDB(\"$database\"); db.$collection.totalIndexSize()" 2>>$LOG`
    collshardinfo+=("$shname|$shhost|$shchunks|$shdatasize|$shindexsize")

    events=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.changelog.find({\"time\" : { \\$gt : $lastping }, \"server\" : \"$shhost\", \"ns\" : \"$coll\"},{\"_id\":0,\"what\":1,\"details.note\":1}).forEach(function(c) { print(c.what + '|' + c.details.note) })"`
    
    if [ "_$SQLITE3" == "_1" ] ; then
      for event in `echo "$events" | sort | uniq -c | grep '|' | sed 's|^\ *||'` ; do
        ev=`echo "$event" | cut -sd' ' -f2 | cut -sd'|' -f1`
        status=`echo "$event" | cut -sd'|' -f2`
        number=`echo "$event" | cut -sd' ' -f1`
        echo "$coll   $shhost   $ev   $status   $number"
        dbquery "$rpath/shards.sql3" "INSERT into changelog (timeindex, day, hostport, database, collection, event, status, number) values (${timeindexnow}, '`date +"%Y%m%d"`', '$shhost', '$database', '$collection', '$ev', '$status', '$number')"
      done    
      dbquery "$rpath/shards.sql3" "INSERT into shards (timeindex, day, hostport, database, collection, chunks, datasize, indexsize) values (${timeindexnow}, '`date +"%Y%m%d"`', '$shhost', '$database', '$collection', '$shchunks', '$shdatasize', '$shindexsize')"
    fi
  done
  echo -e ${collshardinfo[*]} | tr ' ' '\n' > "$rpath/data/shards.$coll"
  
done

unset masters

exit 0

