#!/bin/bash
# Copyright (C) 2012-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"

MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && echo "Mongo client not found, exiting..  " && exit 1

source "$rpath/mongo_servers.conf"
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi
DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting..  " && exit 1
source "$rpath/${rcommand}.conf" 2>/dev/null
[ -z "$depth" ] && depth=5

source "$M_ROOT/conf/mon.conf"

M_TEMP="$M_TEMP/MongoDB"
install -d "$M_TEMP"
timeindexnow=`date +"%s"`

a=`cat "$rpath/mongo_config_servers.list" 2>/dev/null | wc -l`
[[ $a -eq 0 ]] && log "No configuration servers found" && exit 1

confserver=`head -n $((RANDOM%$a+1)) "$rpath/mongo_config_servers.list" 2>/dev/null | tail -1 | cut -d'|' -f1`
[ -z "$confserver" ] && log "No configuration servers found" && exit 1

sharded=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.collections.find( {}, { _id : 1 } ).forEach(printjson)" 2>>$LOG | "$M_ROOT"/lib/json2txt | cut -d'|' -f2 | tr -d '"'`

rm -f "$rpath/sharding.report"

for coll in $sharded ; do

  database=${coll%%.*}
  rm -f "$rpath/data/shards.$coll"
  shards=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.chunks.distinct(\"shard\").forEach( function(c) {print(c + '|' + db.chunks.find({ \"ns\" : \"$coll\" , \"shard\" : c }).count() ) } )" 2>>$LOG`
  collshardinfo=()
  for shard in $shards ; do
    shname=`echo $shard | cut -d'|' -f1`
    shchunks=`echo $shard | cut -d'|' -f2`
    shhost=`grep \|$shname\| "$rpath"/mongo_shards.list 2>/dev/null | grep \|master$ | cut -d'|' -f1`
    [ -z "$shhost" ] && continue
    shdatasize=`$MONGO $AUTH "$shhost"/admin --quiet --eval "db = db.getSiblingDB(\"$database\"); db.${coll#*.}.dataSize()" 2>>$LOG`
    shindexsize=`$MONGO $AUTH "$shhost"/admin --quiet --eval "db = db.getSiblingDB(\"$database\"); db.${coll#*.}.totalIndexSize()" 2>>$LOG`
    collshardinfo+=("$shname|$shhost|$shchunks|$shdatasize|$shindexsize")
    
    if [ "X$SQLITE3" == "X1" ] ; then
      dbquery "$rpath/mongodb.sql3" "INSERT into shards (timeindex, day, hostport, database, collection, chunks, datasize, indexsize) values (${timeindexnow}, '`date +"%Y%m%d"`', '$shhost', '$database', '${coll#*.}', '$shchunks', '$shdatasize', '$shindexsize')"
    fi
  done
  echo -e ${collshardinfo[*]} | tr ' ' '\n' > "$rpath/data/shards.$coll"
  
  [ -f "$rpath/data/sharding.changelog.${coll}.dat" ] && mv "$rpath/data/sharding.changelog.${coll}.dat" "$rpath/data/sharding.changelog.${coll}.dat.prev"
  $MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.changelog.distinct(\"what\").forEach( function(c) {print(c + '|' + db.changelog.find( { \"what\" : c, \"ns\" : \"$coll\" } ).count() ) } )" > "$rpath/data/sharding.changelog.${coll}.dat"
  $MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.changelog.distinct(\"details.note\").forEach( function(c) {print(c + '|' + db.changelog.find( { \"details.note\" : c, \"ns\" : \"$coll\" } ).count() ) } )" >> "$rpath/data/sharding.changelog.${coll}.dat"
  
  cldiff=`$DIFF "$rpath/data/sharding.changelog.${coll}.dat.prev" "$rpath/data/sharding.changelog.${coll}.dat"`
  if [ -n "$cldiff" ] ; then
    timeindex=`date +"%s"`
    
    leftdiff=`echo "$cldiff" | grep ^\< | tr -d '^\< '`
    rightdiff=`echo "$cldiff" | grep ^\> | tr -d '^\> '`
    for metric in `echo -e "$leftdiff\n$rightdiff" | cut -d'|' -f1 | sort | uniq` ; do echo -n "$metric|" ; old=`echo "$leftdiff" | grep ^$metric\| | cut -d'|' -f2` ; new=`echo "$rightdiff" | grep ^$metric\| | cut -d'|' -f2` ; val=`expr $new - $old` ; echo $val ; done | while read line ; do echo "$line" | sed 's_|_:  _g' >> "$rpath/sharding.report" ; [ "X$SQLITE3" == "X1" ] && dbquery "$rpath/mongodb.sql3" "INSERT into changelog (timeindex, database, collection, event, value) values (${timeindex}, '$database', '${coll#*.}', '${line%%|*}', '${line##*|}')" ; done
  fi

  # latest chunks of this collection
  #$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.chunks.find( { ns : \"${coll}\" }, { _id : 0, shard : 1, min : 1, max : 1 } ).sort({_id:-1}).limit(${depth}).forEach(printjson)" | "$M_ROOT"/lib/json2txt > "$M_TEMP/${coll}.chunks"

done &

  # the last split chunk and the server it has been splitted on:
#  lastsplit=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.changelog.find({what:\"split\", ns:\"${coll}\"}, { server:1, _id:0, \"details.right.min._id\":1 }).sort({time:-1}).limit(1).forEach(printjson)" | "$M_ROOT"/lib/json2txt | cut -d'|' -f2`
#  lastsplitserver=`echo "$lastsplit" | head -1`
#  lastsplitchunk=`echo "$lastsplit" | tail -1 | cut -d'"' -f2`
  # chunk could be moved after split:
#  chunkmovedto=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.changelog.find({\"details.min._id\":ObjectId(\"$lastsplitchunk\"), what:\"moveChunk.start\"},{\"details.to\":1, _id:0}).sort({time:1}).forEach(printjson)" | "$M_ROOT"/lib/json2txt | cut -d'|' -f2`
#  if [ -n "$chunkmovedto" ] ; then
#    currshard2=$chunkmovedto
#  else
#    currshard2=`$MONGO $AUTH "$confserver"/config --quiet --eval "db."`
#  fi

### to find chunks size without locking whole db
# mongo "$confserver"/config --quiet --eval "db.chunks.find({\"shard\" : \"${shard}\", \"ns\" : \"${ns}\"}).forEach(function(c) {print('min : ' + tojson(c.min) + ', max : ' + tojson(c.max))})" | sed 's|"|\\"|g;s|\$|\\$|g' | while read MINMAX ; do echo "$MINMAX" ; mongo "${shard}:${shardport}"/$db --quiet --eval "printjson(db.runCommand({ dataSize: \"${ns}\", keyPattern: { \"_id\": 1}, $MINMAX }))" ; sleep 100 ; done
### TODO: keyPattern can be obtained from config.collections

unset masters

# we don't need a report from this monitor
exit 10

