#!/bin/bash
# Copyright (C) 2012-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"
IFSORG=$IFS

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && log "Mongo client not found, exiting..  " && exit 1
source "$rpath/${rcommand%.mon}.conf"
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi
if [ "_$DBENGINE" == "_WT" ]; then
  WT=true
else
  WT=false
fi

source "$M_ROOT/conf/mon.conf"

timeshift=`cat "$M_TEMP/timeshift" 2>/dev/null`
[ -n "$timeshift" ] && period=`expr $FREQ + $timeshift` || period=$FREQ
lastping="ISODate(\"`date -d "-$period sec" +"%Y-%m-%dT%H:%M:%S"`\")"

touch "$rpath/mongo_mongos_servers.list" "$rpath/mongo_config_servers.list" "$rpath/mongo_shards.list" "$rpath/mongo_servers.list"
M_TEMP="$M_TEMP/MongoDB"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

ip_to_name() {
  name=`cat "$M_ROOT/servers.list" 2>/dev/null | cut -d'|' -f1,4 | grep "^${1}|" | cut -d'|' -f2 | tail -1`
  if [ -z "$name" ]; then
    name=`grep -E "^$1\ |\ $1\ " /etc/hosts | tail -1`
    name=`expr "$name" : ".*\s\(.*\)\s*$"`
  fi
  if [ -z "$name" ]; then
    echo "$1"
  else
    echo "$name"
  fi
}

function print_servers() {
  for host in $@ ; do
    echo "$host|||"
  done
}

function find_master() {
  im=`(IFS=$IFSORG ; $MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().primary" 2>>"$LOG" | grep -v arning | tail -1)`
  if [ -z "$im" ] ; then
    im=`(IFS=$IFSORG ; $MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().ismaster" 2>>"$LOG" |tail -1)`
    [ "_$im" == "_true" ] && im=$1
  fi
  [ -n "$im" ] && echo $im || (log "Unable to find master for replica set (asked ${1})" && exit 1)
}

function find_rsmemberrole() {
  rsmemberrole='|slave'
  master=`find_master "$1"`
  members=`(IFS=$IFSORG ; $MONGO $AUTH "$master/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG" | "$M_ROOT/lib/json2txt")`
  membernum=`echo "$members" | grep "$1" | cut -d'/' -f1`
  arbiter=`echo "$members" | grep "^${membernum}\/" | grep arbiterOnly | grep -c true$`
  priority=`echo "$members" | grep "^${membernum}\/" | grep priority | cut -sd'|' -f2`
  votes=`echo "$members" | grep "^${membernum}\/" | grep votes | cut -sd'|' -f2`
  tags=`echo "$members" | grep "^${membernum}\/" | grep tags | cut -sd'|' -f2 | tr '\n' ' '`
  if [ -n "$master" ] && [ "$master" == "$1" ]; then
    rsmemberrole="|master=${priority}=${votes}=${tags}"
  elif [ $arbiter -eq 1 ]; then
    rsmemberrole="|arbiter=${priority}=${votes}=${tags}"
  else
    slavedelay=`echo "$members" | grep "^${membernum}\/" | grep slaveDelay | cut -sd'|' -f2`
    hidden=`echo "$members" | grep "^${membernum}\/" | grep hidden | cut -sd'|' -f2`
    buildindexes=`echo "$members" | grep "^${membernum}\/" | grep buildIndexes | cut -sd'|' -f2`
    rsmemberrole="|slave=${hidden}=${slavedelay}=${buildindexes}=${priority}=${votes}=${tags}"
  fi
}

function collect_hosts() {
  for name in $@ ; do
    port=`echo "$name" | cut -sd':' -f2`
    rname=`ip_to_name ${name%:*}`
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function get_serverstatus() {
  serverstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
  if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
    sed -i "/$cs/d" "$rpath/mongo_servers.list"
    rm "$rpath/data/${cs}.dat.prev" 2>/dev/null
  else
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
    [ -e "$rpath/data/${cs}.dat.prev" ] && sed -i 's|=|_prev=|' "$rpath/data/${cs}.dat.prev"
    echo "$serverstatus" > "$rpath/data/${cs}.dat"
    $WT && wtstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.wt.js" 2>/dev/null | "$M_ROOT/lib"/json2txt)
  fi
  statusreport=`parse_data "$cs"`
  echo "$statusreport" > "$rpath/${cs}.report"
  reporthtml=`"$M_ROOT/lib"/txt2html "$rpath/${cs}.report"`
}

function get_mongosstatus() {
  serverstatus=`$MONGO $AUTH "$cs"/admin --quiet "$rpath/serverstatus.mongos.js" 2>/dev/null`
  if [ $? -ne 0 ] || [ -z "$serverstatus" ]; then
    sed -i "/$cs/d" "$rpath/mongo_mongos_servers.list"
    rm "$rpath/data/${cs}.dat.prev" 2>/dev/null
  else
    mv "$rpath/data/${cs}.dat" "$rpath/data/${cs}.dat.prev" 2>/dev/null
    [ -e "$rpath/data/${cs}.dat.prev" ] && sed -i 's|=|_prev=|' "$rpath/data/${cs}.dat.prev"
    echo "$serverstatus" > "$rpath/data/${cs}.dat"
  fi
  statusreport=`parse_data "$cs"`
  echo "$statusreport" > "$rpath/${cs}.report"
  reporthtml=`"$M_ROOT/lib"/txt2html "$rpath/${cs}.report"`
  echo "$reporthtml" > "$M_ROOT/www/MongoDB/Balancers/${cs}/${cs}_name.html"
}

function parse_data() {
  timeindexnow=`date +"%s"`
  lasttimeindex=`cat "$M_TEMP/${rcommand}.${1}.lasttimeindex" 2>/dev/null | grep -v warning` || lasttimeindex=`expr $timeindexnow - $FREQ` || lasttimeindex=`expr $timeindexnow - 210`
  echo $timeindexnow > "$M_TEMP/${rcommand}.${1}.lasttimeindex"
  timediff=`expr $timeindexnow - $lasttimeindex`
  for d in `cat "$rpath/data/${1}.dat" "$rpath/data/${1}.dat.prev" 2>/dev/null` ; do
    eval "`echo "$d"`"
  done
  echo -e "Server $1 ** `date`\n-----------------------------------------\n\n Status\n"
  echo "Status:   $status" | sed 's|1|OK|;s|0|Error|'
  echo "Uptime:   since `date -d "-$uptime sec"`" | sed 's|  | |g'
  echo -e "\n Memory\n\nResident (MB):   ${memRes-0}\nVirtual (MB):   ${memVir-0}\nMapped (MB):   ${memMapped-0}\nMapped with journal (MB):   ${memMappedWJournal-0}\nHeap usage (MB):   `expr ${infoHeapUsage-0} / 1048576`\n\n Network\n\nCurrent connections:   ${connCurrent-0}\nAvailable connections:   ${connAvailable-0}"
  
  [ -z "$netIn_prev" ] && netIn_prev=$netIn
  [ -z "$netOut_prev" ] && netOut_prev=$netOut
  bw_in=`solve 2 "(${netIn-0} - ${netIn_prev-1}) / $timediff / 1048576"`
  bw_out=`solve 2 "(${netOut-0} - ${netOut_prev-1}) / $timediff / 1048576"`
  echo -e "Bandwidth in (MB/sec):   $bw_in\nBandwidth out (MB/sec):   $bw_out"
  [ -z "$netReqn_prev" ] && netReqn_prev=$netReqn
  net_reqps=`solve 1 "($netReqn - $netReqn_prev) / $timediff"`
  echo "Network requests per second:   $net_reqps"
  
  if [ -n "$lockTime" ]; then
    echo -e "\n Global lock\n"
    [ -z "$lockTime_prev" ] && lockTime_prev=$lockTime
    lockTime=`solve 2 "(${lockTime} - ${lockTime_prev}) / $timediff / 10000"`
    echo -e "Lock time current, percents:   $lockTime\nLock time overall, percents:   `solve 2 "$lockRatio * 100 / 1"`\nLock queue total:   $lockQueueTotal\nLock queue readers:   $lockQueueReaders\nLock queue writers:   $lockQueueWriters\nLock clients total:   $lockClientsTotal\nLock clients readers:   $lockClientsReaders\nLock clients writers:   $lockClientsWriters"
  else
    lockTime=0
    lockRatio=0
  fi
  if $WT && [ -n "$wtstatus" ]; then
    cacheMaxSize=`echo "$wtstatus" | grep '"maximum bytes configured"' | cut -d'|' -f2`
    inTheCache=`echo "$wtstatus" | grep '"bytes currently in the cache"' | cut -d'|' -f2`
    cacheMaxSizeMB=`solve 1 "$cacheMaxSize / 1048576"`
    inTheCacheMB=`solve 1 "$inTheCache / 1048576"`
    echo -e "\n Cache usage\n\nCache configured (MB):   $cacheMaxSizeMB\nCache used (MB):   $inTheCacheMB\nCache used (%):   `solve 1 "$inTheCache / $cacheMaxSize * 100"`"
  else
    [ -z "$accessesNotInMemory_prev" ] && accessesNotInMemory_prev=$accessesNotInMemory
    [ -n "$accessesNotInMemory" ] && recstatsNotInMemory=`solve 1 "($accessesNotInMemory - $accessesNotInMemory_prev) / $timediff"`
    [ -z "$pageFaultExceptionsThrown_prev" ] && pageFaultExceptionsThrown_prev=$pageFaultExceptionsThrown
    [ -n "$pageFaultExceptionsThrown" ] && recstatsPageFaults=`solve 1 "($pageFaultExceptionsThrown - $pageFaultExceptionsThrown_prev) / $timediff"`
    echo -e "\n Access Stats\n\nRecords not found in memory:   $recstatsNotInMemory\nPage fault exceptions:   $recstatsPageFaults\n"
  fi
  echo -e "\n Operations / second\n\nOperation Type         Number"
  
  # Total
  [ -z "$opcountersQuery_prev" ] && opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_queriesps=`solve 1 "($opcountersQuery >= $opcountersQuery_prev) * ($opcountersQuery - $opcountersQuery_prev) / $timediff"`
  
  [ -z "$opcountersInsert_prev" ] && opcountersInsert_prev=$opcountersInsert
  [ -n "$opcountersInsert" ] && ops_insertsps=`solve 1 "($opcountersInsert >= $opcountersInsert_prev) * ($opcountersInsert - $opcountersInsert_prev) / $timediff"`
  
  [ -z "$opcountersUpdate_prev" ] && opcountersUpdate_prev=$opcountersUpdate
  [ -n "$opcountersUpdate" ] && ops_updatesps=`solve 1 "($opcountersUpdate >= $opcountersUpdate_prev) * ($opcountersUpdate - $opcountersUpdate_prev) / $timediff"`
  
  [ -z "$opcountersDelete_prev" ] && opcountersDelete_prev=$opcountersDelete
  [ -n "$opcountersDelete" ] && ops_deletesps=`solve 1 "($opcountersDelete >= $opcountersDelete_prev) * ($opcountersDelete - $opcountersDelete_prev) / $timediff"`
  
  [ -z "$opcountersGetmore_prev" ] && opcountersGetmore_prev=$opcountersGetmore
  [ -n "$opcountersGetmore" ] && ops_getmoresps=`solve 1 "($opcountersGetmore >= $opcountersGetmore_prev) * ($opcountersGetmore - $opcountersGetmore_prev) / $timediff"`
  
  [ -z "$opcountersCommand_prev" ] && opcountersCommand_prev=$opcountersCommand
  [ -n "$opcountersCommand" ] && ops_commandsps=`solve 1 "($opcountersCommand >= $opcountersCommand_prev) * ($opcountersCommand - $opcountersCommand_prev) / $timediff"`
  
  [ -z "$opcountersQuery_prev" ] && opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_totalqps=`solve 1 "$ops_queriesps + $ops_insertsps + $ops_updatesps + $ops_deletesps + $ops_getmoresps + $ops_commandsps"`
  
  echo -e "Query               $ops_queriesps\nInsert              $ops_insertsps\nUpdate              $ops_updatesps\nDelete              $ops_deletesps\nGetmore              $ops_getmoresps\nCommand              $ops_commandsps\nTotal                $ops_totalqps"
  
  if [ "_$SQLITE3" == "_1" ] ; then
    dbquery "$rpath/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, status, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opcountersInsert, opcountersQuery, opcountersUpdate, opcountersDelete, opcountersGetmore, opcountersCommand, opsTotalQPS, lockRatio, lockTime, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters, recstatsPageFaults, recstatsNotInMemory) values ($timeindexnow, '`date +"%Y%m%d"`', '${cs}', '${status}', '$version', '${uptime-0}', '${memRes-0}', '${memVir-0}', '${memMapped-0}', '${memMappedWJournal-0}', '${infoHeapUsage-0}', '${connCurrent-0}', '${connAvailable-0}', '${bw_in-0}', '${bw_out-0}', '${net_reqps-0}', '${ops_insertsps-0}', '${ops_queriesps-0}', '${ops_updatesps-0}', '${ops_deletesps-0}', '${ops_getmoresps-0}', '${ops_commandsps-0}', '${ops_totalqps-0}', '${lockRatio-0}', '${lockTime-0}', '${lockQueueTotal-0}', '${lockQueueReaders-0}', '${lockQueueWriters-0}', '${lockClientsTotal-0}', '${lockClientsReaders-0}', '${lockClientsWriters-0}', '${recstatsPageFaults-0}', '${recstatsNotInMemory-0}')" 2>>"$LOG"
  fi
  if [ "_$ENABLE_CHECKS" == "_1" ]; then
    check_results "memRes|Resident memory (MB)|real,memVir|Virtual memory (MB)|real,memMapped|Mapped memory (MB)|real,memMappedWJournal|Mapped memory incl. journal (MB)|real,infoHeapUsage|Heap usage (MB)|real,connCurrent|Connections used|integer,connAvailable|Connections available|integer,bw_in|Bandwidth inbound (MB/sec)|real,bw_out|Bandwidth outbound (MB/sec)|real,net_reqps|Network requests / sec|integer,ops_insertsps|Inserts / sec|integer,ops_queriesps|Queries / sec|integer,ops_updatesps|Updates / sec|integer,ops_deletesps|Deletes / sec|integer,ops_getmoresps|Getmores / sec|integer,ops_commandsps|Commands / sec|integer,ops_totalqps|QPS total / sec|integer,lockTime|Global lock time (%)|real,lockQueueTotal|Lock queue total|integer,lockQueueReaders|Lock queue readers|integer,lockQueueWriters|Lock queue writers|integer,lockClientsTotal|Lock clients total|integer,lockClientsReaders|Lock clients readers|integer,lockClientsWriters|Lock clients writers|integer,recstatsPageFaults|Page faults|integer,recstatsNotInMemory|Records not in memory|integer"
  fi
  unset status version uptime memRes memVir memMapped memMappedWJournal infoHeapUsage connCurrent connAvailable bw_in bw_out net_reqps ops_insertsps ops_queriesps ops_updatesps ops_deletesps ops_getmoresps ops_commandsps ops_totalqps lockRatio lockTime lockTime_prev lockQueueTotal lockQueueReaders lockQueueWriters lockClientsTotal lockClientsReaders lockClientsWriters recstatsPageFaults recstatsNotInMemory
}

################

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | tr ',' ' '`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^$name\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "_$cluster" == "_1" ] && [ "_$noncluster" == "_1" ] && log "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "_$cluster" == "_1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "$M_TEMP/mongo_config_servers.list"
  if [ -f "$M_TEMP/mongo_config_servers.list" ] && [ -f "$rpath/mongo_config_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list" || mv "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list"
  fi
  
elif [ -z "$MONGO_SERVERS" ] ; then
  log "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else

## Config servers are not defined

  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | tr ',' ' '`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "_$cluster" == "_1" ] && [ "_$noncluster" == "_1" ] && log "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "_$cluster" == "_1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=`echo "$name" | cut -sd':' -f2`
      [ -z "$port" ] && port=$defaultport
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
  
  ## Collecting servers list
  [ -f "$M_TEMP/mongo_servers.list" ] && rm -f "$M_TEMP/mongo_servers.list"
  # For hosts from mongo_servers.conf
  for mongohost in $configips ; do
    mongoport=`echo "$mongohost" | cut -sd':' -f2`
    [ -z "$mongoport" ] && mongoport=$defaultport
    mongohost="${mongohost%:*}"
    # Is it a part of a replica set?
    replicaset=`$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.conf()._id"`
    if [ $? -eq 0 ] ; then
      find_rsmemberrole "${mongohost}:${mongoport}"
    else
      unset replicaset rsmemberrole
    fi
    echo "${mongohost}:${mongoport}||${replicaset}${rsmemberrole}" >> "$M_TEMP/mongo_servers.list"
  done
  
  # Getting hosts list for every replica set found
  for rs in `cat "$M_TEMP/mongo_servers.list" | cut -d'|' -f3 | sort | uniq` ; do
    for rshost in `cat "$M_TEMP/mongo_servers.list" | grep "|$rs|" | cut -d'|' -f1` ; do
      replicahosts=`$MONGO $AUTH "$rshost/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG"`
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/\"host\" | cut -d'|' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break || unset replicahosts
    done
    replicalist=()
    for replicahost in $replicahosts ; do
      [ `grep -c "^${replicahost}|" "$M_TEMP/mongo_servers.list"` -gt 0 ] && continue
      rname=`ip_to_name "$replicahost"`
      [ `grep -c "^${rname}:${replicahost##*:}|" "$M_TEMP/mongo_servers.list"` -gt 0 ] && continue
      find_rsmemberrole "$replicahost"
      replicalist+=("${rname}:${replicahost##*:}||${rs}${rsmemberrole}")
    done
    echo -e ${replicalist[*]} | tr ' ' '\n' >> "$M_TEMP/mongo_servers.list"
  done

  if [ -f "$M_TEMP/mongo_servers.list" ] && [ -f "$rpath/mongo_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list" || mv "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list"
  fi
fi

for configip in $configips ; do
  mongoses=`$MONGO $AUTH "$configip/admin" --quiet --eval "db = db.getSiblingDB(\"config\"); db.mongos.find({\"ping\" : { \\$gt : "$lastping" }}, {_id : 1}).forEach(printjson)"`
  res=$?
  mongoses=`echo "$mongoses" | "$M_ROOT/lib/json2txt" | cut -s -d'|' -f2 | tr -d '"' | grep -v ^$ | sort -n`
  [ $res -eq 0 ] && break || unset mongoses
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "$M_TEMP/mongo_mongos_servers.list"
  if [ -f "$M_TEMP/mongo_mongos_servers.list" ] && [ -f "$rpath/mongo_mongos_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list" || mv "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list"
  fi
else
  echo -n > "$rpath/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`$MONGO $AUTH "$configip"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>>"$LOG"`
  res=$?
  shardhosts=`echo "$shardhosts" | "$M_ROOT"/lib/json2txt | tr -d '"'`
  [ $res -eq 0 ] && break || unset shardhosts
done

if [ -n "$shardhosts" ] ; then
  [ -f "$M_TEMP/mongo_shards.list" ] && rm -f "$M_TEMP/mongo_shards.list"
  IFS='
'
  nmax=`echo "$shardhosts" | tail -1 | cut -d'/' -f1`
  shardlist=()
  for ((n=0; n<=$nmax; n++)) ; do
    shard=`echo "$shardhosts" | grep ^$n\/ | grep _id | cut -s -d'|' -f2`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | cut -s -d'|' -f2`
    [ -z "$shardhost" ] && continue
    shard=`eval "echo $shard"` ; shardhost=`eval "echo $shardhost"`
    #ifreplicaset=${shardhost%%/*}
    shardhost=${shardhost#*/}
    shardhost1=${shardhost%%,*}
    shardport1=${shardhost1#*:}
    shardhost1=${shardhost1%:*}
    replicaset=`$MONGO $AUTH "${shardhost1}:${shardport1}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG"`
    if [ $? -eq 0 ] ; then
      find_rsmemberrole "${shardhost1}:${shardport1}"
    else
      shardhost1=`echo "$shardhost" | cut -sd',' -f2`
      shardport1=${shardhost1#*:}
      shardhost1=${shardhost1%:*}
      replicaset=`$MONGO $AUTH "${shardhost1}:${shardport1}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG"`
      if [ $? -eq 0 ] ; then
        find_rsmemberrole "${shardhost1}:${shardport1}"
      else
        unset replicaset rsmemberrole
      fi
    fi
    shardhost=$shardhost1
    shardport=$shardport1
    rname=`ip_to_name ${shardhost%:*}`
    shardhost="$rname"
    shardlist+=("${shardhost}:${shardport}|$shard|${replicaset}${rsmemberrole}")
  done
  echo -e ${shardlist[*]} | tr ' ' '\n' | sort | uniq > "$M_TEMP/mongo_shards.list"

  for rs in `cat "$M_TEMP/mongo_shards.list" | cut -d'|' -f2,3 | sort | uniq` ; do
  shardlist=()
    for rshost in `cat "$M_TEMP/mongo_shards.list" | grep "|$rs|" | cut -s -d'|' -f1` ; do
      [ -z "$rshost" ] && continue
      replicahosts=`(IFS=$IFSORG ; $MONGO $AUTH "$rshost"/admin --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG")`
      res=$?
      replicahosts=`echo "$replicahosts" | "$M_ROOT/lib/json2txt" | grep ^[0-9]*\/\"host\" | cut -d'|' -f2 | tr -d '"'`
      [ $res -eq 0 ] && break
    done

    for replicahost in $replicahosts ; do
      [ `grep -c "^$replicahost|" "$M_TEMP/mongo_shards.list"` -gt 0 ] && continue
      rname=`ip_to_name "$replicahost"`
      [ `grep -c "^${rname}:${replicahost##*:}|" "$M_TEMP/mongo_shards.list"` -gt 0 ] && continue
      find_rsmemberrole "$replicahost"
      shardlist+=("$replicahost|${rs}${rsmemberrole}")
    done
    echo -e ${shardlist[*]} | tr ' ' '\n' | sort | uniq >> "$M_TEMP/mongo_shards.list"
  done
  
  if [ -f "$M_TEMP/mongo_shards.list" ] && [ -f "$rpath/mongo_shards.list" ]; then
    $DIFF -q "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list" || mv "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list"
  fi
IFS=$IFSORG
else
  echo -n > "$M_TEMP/mongo_shards.list"
fi

# Data processing

if [ -e "$rpath/mongo_config_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_config_servers.list" | cut -s -d'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/Configuration Servers/$cs" ] || install -d "$M_ROOT/www/MongoDB/Configuration Servers/$cs"
    get_serverstatus
  done &
fi

if [ -e "$rpath/mongo_mongos_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_mongos_servers.list" | cut -s -d'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/Balancers/$cs" ] || install -d "$M_ROOT/www/MongoDB/Balancers/$cs"
    get_mongosstatus
  done &
fi

if [ -e "$rpath/mongo_shards.list" ] ; then
  for cs in `cat "$rpath/mongo_shards.list" | cut -s -d'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/Shard Servers/$cs" ] || install -d "$M_ROOT/www/MongoDB/Shard Servers/$cs"
    get_serverstatus
  done &
fi

if [ -e "$rpath/mongo_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_servers.list" | cut -s -d'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs" ] || install -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs"
    get_serverstatus
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/MongoDB Servers/$cs/${cs}_name.html"
  done &
fi

### Cleanup. Note that it removes all old files from data folder, including
### those created by other MongoDB monitors

timeshift=`cat "$M_TEMP/../timeshift" || echo 0`
ccl=`expr $FREQ + $timeshift || echo 200`
mmin=`expr $ccl \* 3 / 60 + 1`
find "$rpath/data/" -mmin +$mmin -exec rm {} \;
exit 0


### mongo localhost:27018/admin --quiet --eval "db.currentOp().inprog.forEach(function(d){ if(d.waitingForLock) print(d.op)})" | sort | uniq -c

