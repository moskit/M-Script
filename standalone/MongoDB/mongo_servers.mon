#!/bin/bash
# Copyright (C) 2012-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/sa.log"
IFSORG=$IFS

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && log "Mongo client not found, exiting..  " && exit 1
source "$rpath/${rcommand%.mon}.conf"
if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi
if [ "_$DBENGINE" == "_WT" ]; then
  WT=true
else
  WT=false
fi

source "$M_ROOT/conf/mon.conf"

timeshift=`cat "$M_TEMP/timeshift" 2>/dev/null`
[ -n "$timeshift" ] && period=`expr $FREQ + $timeshift` || period=$FREQ
lastping="ISODate(\"`date -d "-$period sec" +"%Y-%m-%dT%H:%M:%S"`\")"

touch "$rpath/mongo_mongos_servers.list" "$rpath/mongo_config_servers.list" "$rpath/mongo_shards.list" "$rpath/mongo_servers.list"
M_TEMP="$M_TEMP/MongoDB"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

ip_to_name() {
  name=`cat "$M_ROOT/nodes.list" 2>/dev/null | cut -d'|' -f1,4 | grep "^${1}|" | cut -d'|' -f2 | tail -1`
  if [ -z "$name" ]; then
    name=`grep -E "^$1\ |\ $1\ " /etc/hosts | tail -1`
    name=`expr "$name" : ".*\s\(.*\)\s*$"`
  fi
  if [ -z "$name" ]; then
    echo "$1"
  else
    echo "$name"
  fi
}

function print_servers() {
  for host in $@ ; do
    echo "$host|||"
  done
}

function find_master() {
  im=`(IFS=$IFSORG ; $MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().primary" 2>>"$LOG" | grep -v arning | tail -1)`
  if [ -z "$im" ] ; then
    im=`(IFS=$IFSORG ; $MONGO $AUTH "$1/admin" --quiet --eval "rs.isMaster().ismaster" 2>>"$LOG" |tail -1)`
    [ "_$im" == "_true" ] && im=$1 || unset im
  fi
  [ -n "$im" ] && echo $im || log "Unable to find master for replica set (asked ${1})"
}

function find_rsmemberrole() {
  rsmemberrole='|slave'
  membernum=`echo "$members" | grep "$1" | cut -d'/' -f1`
  arbiter=`echo "$members" | grep "^${membernum}\/" | grep arbiterOnly | grep -c true$`
  priority=`echo "$members" | grep "^${membernum}\/" | grep priority | cut -sd'|' -f2`
  votes=`echo "$members" | grep "^${membernum}\/" | grep votes | cut -sd'|' -f2`
  tags=`echo "$members" | grep "^${membernum}\/" | grep tags | cut -sd'|' -f2 | tr '\n' ' '`
  if [ -n "$master" ] && [ "$master" == "$1" ]; then
    rsmemberrole="|master=${priority}=${votes}=${tags}"
  elif [ $arbiter -eq 1 ]; then
    rsmemberrole="|arbiter=${priority}=${votes}=${tags}"
  else
    slavedelay=`echo "$members" | grep "^${membernum}\/" | grep slaveDelay | cut -sd'|' -f2`
    hidden=`echo "$members" | grep "^${membernum}\/" | grep hidden | cut -sd'|' -f2`
    buildindexes=`echo "$members" | grep "^${membernum}\/" | grep buildIndexes | cut -sd'|' -f2`
    rsmemberrole="|slave=${hidden}=${slavedelay}=${buildindexes}=${priority}=${votes}=${tags}"
  fi
}

function collect_hosts() {
  for name in $@ ; do
    port=`echo "$name" | cut -sd':' -f2`
    rname=`ip_to_name ${name%:*}`
    [ -n "$port" ] || port=$defaultport
    configips="$configips ${rname}:$port"
  done
}

function get_serverstatus() {
  # cs is a non-FQDN hostname plus port (hostname:port)
  serverstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.js" 2>/dev/null)
  [ -e "$rpath/data/${cs}.dat" ] && serverstatusprev=`cat "$rpath/data/${cs}.dat" | sed 's|=|_prev=|'`
  echo "$serverstatus" > "$rpath/data/${cs}.dat"
  echo "$serverstatus" | grep -q '^storageEngine=wiredTiger' && WT=true
  $WT && wtstatus=$($MONGO $AUTH $cs/admin --quiet "$rpath/serverstatus.wt.js" 2>/dev/null | "$M_ROOT/lib"/json2txt)
  if [ -n "$rsstatusraw" ]; then
    n=`echo "$rsstatusraw" | grep name\"\|\"$cs\"$ | cut -d'/' -f1`
    # this works well unless FQDN host names creep into shard names
    if [ -z "$n" ]; then
      if [ -n "$DOMAIN" ]; then
        n=`echo "$rsstatusraw" | grep name\"\|\"${cs%:*}.${DOMAIN}.${cs#*:}\"$ | cut -d'/' -f1`
      fi
    fi
    rshealth=`echo "$rsstatusraw" | grep ^$n\/ | grep \"health\"\| | cut -sd'|' -f2`
    rsstate=`echo "$rsstatusraw" | grep ^$n\/ | grep \"state\"\| | cut -sd'|' -f2`
    rsstateStr=`echo "$rsstatusraw" | grep ^$n\/ | grep \"stateStr\"\| | cut -sd'|' -f2 | tr -d '()'`
    rsoptime=`echo "$rsstatusraw" | grep ^$n\/ | grep \"optime\"\| | cut -sd'|' -f2`
    [ -n "$rsoptime" ] && rsoptime=`expr $rsoptime : ".*(\([0-9]*\)"`
    $ismaster && masteroptime=$rsoptime && rlag=0 || rlag=`expr $masteroptime - $rsoptime 2>/dev/null || unset rlag`
    rspingMs=`echo "$rsstatusraw" | grep ^$n\/ | grep \"pingMs\"\| | cut -sd'|' -f2`
    rsconfigVersion=`echo "$rsstatusraw" | grep ^$n\/ | grep \"configVersion\"\| | cut -sd'|' -f2`
    echo -e "rshealth=$rshealth\nrsstate=$rsstate\nrsstateStr=$rsstateStr\nrlag=$rlag\nrspingMs=$rspingMs\nrsconfigVersion=$rsconfigVersion" >> "$rpath/data/${cs}.dat"
  fi
  statusreport=`parse_data "$cs"`
  echo "$statusreport" > "$rpath/${cs}.report"
  reporthtml=`"$M_ROOT/lib"/txt2html "$rpath/${cs}.report"`
  unset rshealth rsstate rsstateStr rsoptime master rspingMs rsconfigVersion
}

function get_mongosstatus() {
  serverstatus=`$MONGO $AUTH "$cs"/admin --quiet "$rpath/serverstatus.mongos.js" 2>/dev/null`
  [ -e "$rpath/data/${cs}.dat" ] && serverstatusprev=`cat "$rpath/data/${cs}.dat" | sed 's|=|_prev=|'`
  echo "$serverstatus" > "$rpath/data/${cs}.dat"
  statusreport=`parse_data "$cs"`
  echo "$statusreport" > "$rpath/${cs}.report"
  reporthtml=`"$M_ROOT/lib"/txt2html "$rpath/${cs}.report"`
}

function parse_data() {
  timeindexnow=`date +"%s"`
  lasttimeindex=`cat "$M_TEMP/${rcommand}.${1}.lasttimeindex" 2>/dev/null | grep -v warning` || lasttimeindex=`expr $timeindexnow - $FREQ` || lasttimeindex=`expr $timeindexnow - 210`
  echo $timeindexnow > "$M_TEMP/${rcommand}.${1}.lasttimeindex"
  timediff=`expr $timeindexnow - $lasttimeindex`
  IFS='
'
  for d in `echo -e "$serverstatus\n$serverstatusprev"` ; do
    eval "`echo "$d"`"
  done
  IFS=$IFSORG
  echo -e "Server $1 ** `date`\n-----------------------------------------\n\n Status\n"
  echo "Uptime:   since `date -d "-$uptime sec"`" | sed 's|  | |g'
  echo -e "\n Memory\n\nResident (MB):   ${memRes-0}\nVirtual (MB):   ${memVir-0}\nMapped (MB):   ${memMapped-0}\nMapped with journal (MB):   ${memMappedWJournal-0}\nHeap usage (MB):   `expr ${infoHeapUsage-0} / 1048576`\n\n Network\n\nCurrent connections:   ${connCurrent-0}\nAvailable connections:   ${connAvailable-0}"
  
  [ -z "$netIn_prev" ] && netIn_prev=$netIn
  [ -z "$netOut_prev" ] && netOut_prev=$netOut
  bw_in=`solve 2 "(${netIn-0} - ${netIn_prev-1}) / $timediff / 1048576"`
  bw_out=`solve 2 "(${netOut-0} - ${netOut_prev-1}) / $timediff / 1048576"`
  echo -e "Bandwidth in (MB/sec):   $bw_in\nBandwidth out (MB/sec):   $bw_out"
  [ -z "$netReqn_prev" ] && netReqn_prev=$netReqn
  net_reqps=`solve 1 "($netReqn - $netReqn_prev) / $timediff"`
  echo "Network requests per second:   $net_reqps"
  
  if [ -n "$lockTime" ]; then
    echo -e "\n Global lock\n"
    [ -z "$lockTime_prev" ] && lockTime_prev=$lockTime
    lockTime=`solve 2 "(${lockTime} - ${lockTime_prev}) / $timediff / 10000"`
    echo -e "Lock time current, percent:   $lockTime\nLock time overall, percent:   `solve 2 "$lockRatio * 100 / 1"`\nLock queue total:   $lockQueueTotal\nLock queue readers:   $lockQueueReaders\nLock queue writers:   $lockQueueWriters\nLock clients total:   $lockClientsTotal\nLock clients readers:   $lockClientsReaders\nLock clients writers:   $lockClientsWriters"
  else
    lockTime=0
    lockRatio=0
  fi
  if $WT && [ -n "$wtstatus" ]; then
    cacheMaxSize=`echo "$wtstatus" | grep '"maximum bytes configured"' | cut -d'|' -f2`
    inTheCache=`echo "$wtstatus" | grep '"bytes currently in the cache"' | cut -d'|' -f2`
    cacheMaxSizeMB=`solve 1 "$cacheMaxSize / 1048576"`
    inTheCacheMB=`solve 1 "$inTheCache / 1048576"`
    echo -e "\n Cache usage\n\nCache configured (MB):   $cacheMaxSizeMB\nCache used (MB):   $inTheCacheMB\nCache used (%):   `solve 1 "$inTheCache / $cacheMaxSize * 100"`"
  else
    [ -z "$accessesNotInMemory_prev" ] && accessesNotInMemory_prev=$accessesNotInMemory
    [ -n "$accessesNotInMemory" ] && recstatsNotInMemory=`solve 1 "($accessesNotInMemory - $accessesNotInMemory_prev) / $timediff"`
    [ -z "$pageFaultExceptionsThrown_prev" ] && pageFaultExceptionsThrown_prev=$pageFaultExceptionsThrown
    [ -n "$pageFaultExceptionsThrown" ] && recstatsPageFaults=`solve 1 "($pageFaultExceptionsThrown - $pageFaultExceptionsThrown_prev) / $timediff"`
    echo -e "\n Access Stats\n\nRecords not found in memory:   $recstatsNotInMemory\nPage fault exceptions:   $recstatsPageFaults\n"
  fi
  echo -e "\n Operations / second\n\nOperation Type         Number"
  
  # Total
  [ -z "$opcountersQuery_prev" ] && opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_queriesps=`solve 1 "($opcountersQuery >= $opcountersQuery_prev) * ($opcountersQuery - $opcountersQuery_prev) / $timediff"`
  
  [ -z "$opcountersInsert_prev" ] && opcountersInsert_prev=$opcountersInsert
  [ -n "$opcountersInsert" ] && ops_insertsps=`solve 1 "($opcountersInsert >= $opcountersInsert_prev) * ($opcountersInsert - $opcountersInsert_prev) / $timediff"`
  
  [ -z "$opcountersUpdate_prev" ] && opcountersUpdate_prev=$opcountersUpdate
  [ -n "$opcountersUpdate" ] && ops_updatesps=`solve 1 "($opcountersUpdate >= $opcountersUpdate_prev) * ($opcountersUpdate - $opcountersUpdate_prev) / $timediff"`
  
  [ -z "$opcountersDelete_prev" ] && opcountersDelete_prev=$opcountersDelete
  [ -n "$opcountersDelete" ] && ops_deletesps=`solve 1 "($opcountersDelete >= $opcountersDelete_prev) * ($opcountersDelete - $opcountersDelete_prev) / $timediff"`
  
  [ -z "$opcountersGetmore_prev" ] && opcountersGetmore_prev=$opcountersGetmore
  [ -n "$opcountersGetmore" ] && ops_getmoresps=`solve 1 "($opcountersGetmore >= $opcountersGetmore_prev) * ($opcountersGetmore - $opcountersGetmore_prev) / $timediff"`
  
  [ -z "$opcountersCommand_prev" ] && opcountersCommand_prev=$opcountersCommand
  [ -n "$opcountersCommand" ] && ops_commandsps=`solve 1 "($opcountersCommand >= $opcountersCommand_prev) * ($opcountersCommand - $opcountersCommand_prev) / $timediff"`
  
  [ -z "$opcountersQuery_prev" ] && opcountersQuery_prev=$opcountersQuery
  [ -n "$opcountersQuery" ] && ops_totalqps=`solve 1 "$ops_queriesps + $ops_insertsps + $ops_updatesps + $ops_deletesps + $ops_getmoresps + $ops_commandsps"`
  
  echo -e "Query               $ops_queriesps\nInsert              $ops_insertsps\nUpdate              $ops_updatesps\nDelete              $ops_deletesps\nGetmore              $ops_getmoresps\nCommand              $ops_commandsps\nTotal                $ops_totalqps"
  
  dataserver=`cat "$rpath/mongo_shards.list" "$rpath/mongo_servers.list" | grep "^$1|"`
  
  if $RS ; then
    echo -e "\n Replica Set\n\nHealth               $rshealth\nPing (ms)               $rspingMs\nConfig Version               $rsconfigVersion\nState               $rsstate\nState String               $rsstateStr\nReplication Lag               $rlag"
    rdelay=`echo "$dataserver" | cut -sd'|' -f4 | cut -sd'=' -f3`
    [ -n "$rlag" ] && rlag=`expr $rlag - $rdelay 2>/dev/null`
    [ -n "$rsstate_prev" ] && [ "_$rsstate" != "_$rsstate_prev" ] && echo -e "\n<***> Member state changed: was $rsstate_prev now $rsstate\n"
    [ -n "$rsconfigVersion_prev" ] && [ "_$rsconfigVersion" != "_$rsconfigVersion_prev" ] && echo -e "\n<***> Config version changed: was $rsconfigVersion_prev now $rsconfigVersion\n"
    [ -n "$rshealth_prev" ] && [ "_$rshealth" != "_1" ] && echo -e "\n<***> Member failure detected! Health status is $rshealth (should be 1)\n<***> Status string: $rsstateStr\n\n"
  fi
  
  if [ "_$SQLITE3" == "_1" ] ; then
    dbquery "$rpath/mongodb.sql3" "INSERT INTO servers (timeindex, day, hostport, version, uptime, memRes, memVir, memMapped, memMappedWJournal, infoHeapUsage, connCurrent, connAvailable, netIn, netOut, netReqn, opcountersInsert, opcountersQuery, opcountersUpdate, opcountersDelete, opcountersGetmore, opcountersCommand, opsTotalQPS, lockRatio, lockTime, lockQueueTotal, lockQueueReaders, lockQueueWriters, lockClientsTotal, lockClientsReaders, lockClientsWriters, recstatsPageFaults, recstatsNotInMemory, rsstate, rsconfigVersion, rlag, cacheMaxSizeMB, inTheCacheMB) values ($timeindexnow, '`date +"%Y%m%d"`', '${cs}', '$version', '${uptime-0}', '${memRes-0}', '${memVir-0}', '${memMapped-0}', '${memMappedWJournal-0}', '${infoHeapUsage-0}', '${connCurrent-0}', '${connAvailable-0}', '${bw_in-0}', '${bw_out-0}', '${net_reqps-0}', '${ops_insertsps-0}', '${ops_queriesps-0}', '${ops_updatesps-0}', '${ops_deletesps-0}', '${ops_getmoresps-0}', '${ops_commandsps-0}', '${ops_totalqps-0}', '${lockRatio-0}', '${lockTime-0}', '${lockQueueTotal-0}', '${lockQueueReaders-0}', '${lockQueueWriters-0}', '${lockClientsTotal-0}', '${lockClientsReaders-0}', '${lockClientsWriters-0}', '${recstatsPageFaults-0}', '${recstatsNotInMemory-0}', '${rsstate-0}', '${rsconfigVersion-0}', '${rlag-0}', '${cacheMaxSizeMB-0}', '${inTheCacheMB-0}')" 2>>"$LOG"
  fi
  if [ "_$ENABLE_CHECKS" == "_1" ] && [ -n "$dataserver" ] ; then
    [ -e "$rpath/mongo_servers_var.conf" ] && source "$rpath/mongo_servers_var.conf"
    check_results "memRes|$1 Resident memory (MB)|real|ao,memVir|$1 Virtual memory (MB)|real|ao,memMapped|$1 Mapped memory (MB)|real|ao,memMappedWJournal|$1 Mapped memory incl. journal (MB)|real|ao,infoHeapUsage|$1 Heap usage (MB)|real|ao,connCurrent|$1 Connections used|integer|ao,connAvailable|$1 Connections available|integer|ao,bw_in|$1 Bandwidth inbound (MB/sec)|real|ao,bw_out|$1 Bandwidth outbound (MB/sec)|real|ao,net_reqps|$1 Network requests / sec|integer|ao,ops_insertsps|$1 Inserts / sec|integer|ao,ops_queriesps|$1 Queries / sec|integer|ao,ops_updatesps|$1 Updates / sec|integer|ao,ops_deletesps|$1 Deletes / sec|integer|ao,ops_getmoresps|$1 Getmores / sec|integer|ao,ops_commandsps|$1 Commands / sec|integer|ao,ops_totalqps|$1 QPS total / sec|integer|ao,lockTime|$1 Global lock time (%)|real|ao,lockQueueTotal|$1 Lock queue total|integer|ao,lockQueueReaders|$1 Lock queue readers|integer|ao,lockQueueWriters|$1 Lock queue writers|integer|ao,lockClientsTotal|$1 Lock clients total|integer|ao,lockClientsReaders|$1 Lock clients readers|integer|ao,lockClientsWriters|$1 Lock clients writers|integer|ao,recstatsPageFaults|$1 Page faults|integer|ao,recstatsNotInMemory|$1 Records not in memory|integer|ao,rlag|$1 Replication Lag|integer|ao,cacheMaxSizeMB|$1 Cache Size Configured (MB)|integer|ao,inTheCacheMB|$1 Cache Used (MB)|integer|ao"
  fi

  unset status version uptime memRes memVir memMapped memMappedWJournal infoHeapUsage connCurrent connAvailable bw_in bw_out net_reqps ops_insertsps ops_queriesps ops_updatesps ops_deletesps ops_getmoresps ops_commandsps ops_totalqps lockRatio lockTime lockTime_prev lockQueueTotal lockQueueReaders lockQueueWriters lockClientsTotal lockClientsReaders lockClientsWriters recstatsPageFaults recstatsNotInMemory rlag cacheMaxSizeMB inTheCacheMB
}

################

if [ -n "$MONGO_CONFIG_SERVERS" ] ; then
  defaultport=27019
  MONGO_CONFIG_SERVERS=`echo $MONGO_CONFIG_SERVERS | tr ',' ' '`
  for name in $MONGO_CONFIG_SERVERS ; do
    if [ `grep -c ^$name\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "_$cluster" == "_1" ] && [ "_$noncluster" == "_1" ] && log "Wrong cluster name in MONGO_CONFIG_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "_$cluster" == "_1" ] ; then
    for name in $MONGO_CONFIG_SERVERS ; do
      port=${name#*:}
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_CONFIG_SERVERS
  fi

  print_servers $configips > "$M_TEMP/mongo_config_servers.list"
  if [ -f "$M_TEMP/mongo_config_servers.list" ] && [ -f "$rpath/mongo_config_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list" || mv "$M_TEMP/mongo_config_servers.list" "$rpath/mongo_config_servers.list"
  fi
  
elif [ -z "$MONGO_SERVERS" ] ; then
  log "Neither of MONGO_CONFIG_SERVERS and MONGO_SERVERS is defined, exiting"
  exit 1
else

## Config servers are not defined

  defaultport=27017
  MONGO_SERVERS=`echo $MONGO_SERVERS | tr ',' ' '`
  for name in $MONGO_SERVERS ; do
    if [ `grep -c ^${name%:*}\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] ; then
      noncluster=1
    else
      cluster=1
    fi
  done
  [ "_$cluster" == "_1" ] && [ "_$noncluster" == "_1" ] && log "Wrong cluster name in MONGO_SERVERS or both cluster and server names are present which is not supported" && exit 1
  if [ "_$cluster" == "_1" ] ; then
    for name in $MONGO_SERVERS ; do
      port=`echo "$name" | cut -sd':' -f2`
      [ -z "$port" ] && port=$defaultport
      clusterips="$clusterips `"$M_ROOT/cloud/common/get_ips" --cluster="${name%:*}"|sed "s|$|$port|g"`"
    done
    collect_hosts $clusterips
  else
    collect_hosts $MONGO_SERVERS
  fi
  
  ## Collecting servers list
  [ -f "$M_TEMP/mongo_servers.list" ] && rm -f "$M_TEMP/mongo_servers.list"

  for mongohost in $configips ; do
    mongoport=`echo "$mongohost" | cut -sd':' -f2`
    [ -z "$mongoport" ] && mongoport=$defaultport
    mongohost="${mongohost%:*}"
    isrs=`$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.status().ok"`
    if [ "_$isrs" == "_1" ]; then
      mongohosts1=( `$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.conf().members.forEach(function(m){ print(m.host) })"` )
      
      for ((i=0; i<${#mongohosts1[*]}; i++)); do
        mongohost1=${mongohosts1[$i]}
        mongoport=${mongohost1#*:}
        mongohost=${mongohost1%%:*}
        # if you use FQDN host names, set DOMAIN in conf/mon.conf
        if [ -n "$DOMAIN" ]; then
          # you could use FQDN to list nodes in nodes.list, theoretically
          if [ `grep -c "|$mongohost|" "$M_ROOT/nodes.list"` -eq 0 ]; then
            mongohost=${mongohost1%%.*}
          fi
        fi
        replicaset=`$MONGO $AUTH "${mongohost}:${mongoport}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG"`  # replicaset name for this mongo
        [ -z "$master" ] && master=`find_master "${mongohost}:${mongoport}"`
        [ -z "$master" ] && mongoerror+=("RS member ${mongohost}:${mongoport} has lost its master\n") && continue
        # RS members
        [ -z "$members" ] && members=`(IFS=$IFSORG ; $MONGO $AUTH "$master/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG" | "$M_ROOT/lib/json2txt")`
      done
      if [ -n "$members" ]; then
        for member in `echo "$members" | grep \/\"host\"\| | cut -sd'|' -f2 | tr -d '"'`; do
          find_rsmemberrole "$member"
          memberhost=`ip_to_name ${member%%:*}`
          memberport=${member#*:}
          mongolist+=("${memberhost}:${memberport}||${replicaset}${rsmemberrole}")
        done
      else
        mongoerror+=("Replicaset members not found")
        mongolist+=("${mongohost}:${mongoport}||${replicaset}${rsmemberrole}")
        continue
      fi
    else
      mongolist+=("${mongohost}:${mongoport}|")
    fi
    unset master members isrs
  done
  echo -e ${mongolist[*]} | tr ' ' '\n' | sort | uniq > "$M_TEMP/mongo_servers.list"
  
  if [ -f "$M_TEMP/mongo_servers.list" ] && [ -f "$rpath/mongo_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list" || mv "$M_TEMP/mongo_servers.list" "$rpath/mongo_servers.list"
  fi

fi

for configip in $configips ; do
  mongoses=`$MONGO $AUTH "$configip/admin" --quiet --eval "db = db.getSiblingDB(\"config\"); db.mongos.find({\"ping\" : { \\$gt : "$lastping" }}, {_id : 1}).forEach(printjson)"`
  res=$?
  mongoses=`echo "$mongoses" | "$M_ROOT/lib/json2txt" | cut -s -d'|' -f2 | tr -d '"' | grep -v ^$ | sort -n`
  [ $res -eq 0 ] && break || unset mongoses
done

if [ -n "$mongoses" ] ; then
  print_servers $mongoses > "$M_TEMP/mongo_mongos_servers.list"
  if [ -f "$M_TEMP/mongo_mongos_servers.list" ] && [ -f "$rpath/mongo_mongos_servers.list" ]; then
    $DIFF -q "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list" || mv "$M_TEMP/mongo_mongos_servers.list" "$rpath/mongo_mongos_servers.list"
  fi
else
  echo -n > "$rpath/mongo_mongos_servers.list"
fi

for configip in $configips ; do
  shardhosts=`$MONGO $AUTH "$configip"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.shards.find({}, {_id:1,host:1}).forEach(printjson)" 2>>"$LOG"`
  res=$?
  shardhosts=`echo "$shardhosts" | "$M_ROOT"/lib/json2txt | tr -d '"'`
  [ $res -eq 0 ] && break || unset shardhosts
done

if [ -n "$shardhosts" ] ; then
  [ -f "$M_TEMP/mongo_shards.list" ] && rm -f "$M_TEMP/mongo_shards.list"

  shardlist=()
  for shardid in `echo "$shardhosts" | grep '/_id'` ; do
    shard=`echo "$shardid" | cut -sd'|' -f2`
    n=`echo "$shardid" | cut -sd'/' -f1`
    shardhost=`echo "$shardhosts" | grep ^$n\/ | grep host | cut -s -d'|' -f2`
    [ -z "$shardhost" ] && continue
    shardhost=${shardhost#*/}
    shardhosts1=( `echo -e "$shardhost" | tr ',' '\n'` )
    isrs=`$MONGO $AUTH "${shardhosts1[0]}/admin" --quiet --eval "rs.status().ok"`
    if [ "_$isrs" == "_1" ]; then
      for ((i=0; i<${#shardhosts1[*]}; i++)); do
        shardhost1=${shardhosts1[$i]}
        shardport=${shardhost1#*:}
        shardhost=${shardhost1%%:*}
        # if you use FQDN host names, set DOMAIN in conf/mon.conf
        if [ -n "$DOMAIN" ]; then
          # if it's a non-FQDN in nodes.list (which is strongly recommended)
          if [ `grep -c "|$shardhost|" "$M_ROOT/nodes.list"` -eq 0 ]; then
            shardhost=`echo "$shardhost" | cut -sd'.' -f-2`
          fi
        fi
        replicaset=`$MONGO $AUTH "${shardhost}:${shardport}/admin" --quiet --eval "rs.conf()._id" 2>>"$LOG"`  # replicaset name for this shard
        [ -z "$master" ] && master=`find_master "${shardhost}:${shardport}"`
        [ -z "$master" ] && sharderror+=("RS member ${shardhost}:${shardport} has lost its master\n") && continue
        # RS members
        [ -z "$members" ] && members=`(IFS=$IFSORG ; $MONGO $AUTH "$master/admin" --quiet --eval "rs.conf().members.forEach(printjson)" 2>>"$LOG" | "$M_ROOT/lib/json2txt")`
      done
      if [ -n "$members" ]; then
        for member in `echo "$members" | grep \/\"host\"\| | cut -sd'|' -f2 | tr -d '"'`; do
          find_rsmemberrole "$member"
          memberhost=`ip_to_name ${member%%:*}`
          memberport=${member#*:}
          shardlist+=("${memberhost}:${memberport}|$shard|${replicaset}${rsmemberrole}")
        done
      else
        sharderror+=("Replicaset members not found")
        continue
      fi
      unset master members
    else
      shardlist+=("${memberhost}:${memberport}|$shard")
    fi
  done
  echo -e ${shardlist[*]} | tr ' ' '\n' | sort | uniq > "$M_TEMP/mongo_shards.list"
  
  if [ -f "$M_TEMP/mongo_shards.list" ] && [ -f "$rpath/mongo_shards.list" ]; then
    $DIFF -q "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list" || mv "$M_TEMP/mongo_shards.list" "$rpath/mongo_shards.list"
  fi

else
  echo -n > "$M_TEMP/mongo_shards.list"
fi

# Data processing

RS=false

if [ -e "$rpath/mongo_config_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_config_servers.list" | cut -sd'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/Configuration Servers/$cs" ] || install -d "$M_ROOT/www/MongoDB/Configuration Servers/$cs"
    get_serverstatus
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/Configuration Servers/$cs/${cs}_name.html"
  done &
fi

if [ -e "$rpath/mongo_mongos_servers.list" ] ; then
  for cs in `cat "$rpath/mongo_mongos_servers.list" | cut -sd'|' -f1` ; do
    [ -d "$M_ROOT/www/MongoDB/Balancers/$cs" ] || install -d "$M_ROOT/www/MongoDB/Balancers/$cs"
    get_mongosstatus
    echo "$reporthtml" > "$M_ROOT/www/MongoDB/Balancers/$cs/${cs}_name.html"
  done &
fi

if [ -e "$rpath/mongo_shards.list" ] ; then
  ismaster=false
  masters=`cat "$rpath/mongo_shards.list" | grep \|master= | cut -sd'|' -f1,3`
  if [ -n "$masters" ]; then
    RS=true
    for csm in $masters ; do
      cs=${csm%|*}
      csrs=${csm#*|}
      # cs is always non-FQDN, so it's reliably resolveable via hosts file
      rsstatusraw=`(IFS=$IFSORG ; $MONGO $AUTH "$cs/admin" --quiet --eval "rs.status().members.forEach(printjson)" 2>>"$LOG" | "$M_ROOT"/lib/json2txt)`
      ismaster=true
      if [ -d "$M_ROOT/www/MongoDB/Shard Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/Shard Servers/$cs"; fi
      get_serverstatus
      echo "$reporthtml" > "$M_ROOT/www/MongoDB/Shard Servers/$cs/${cs}_name.html"
      ismaster=false
      for cs in `cat "$rpath/mongo_shards.list" | grep -v \|master= | cut -sd'|' -f1,3 | grep \|$csrs$ | cut -sd'|' -f1`; do
        if [ -d "$M_ROOT/www/MongoDB/Shard Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/Shard Servers/$cs"; fi
        get_serverstatus
        echo "$reporthtml" > "$M_ROOT/www/MongoDB/Shard Servers/$cs/${cs}_name.html"
      done
    done &
    RS=false
  else
    RS=false
    for cs in `cat "$rpath/mongo_shards.list" | cut -sd'|' -f1`; do
      if [ -d "$M_ROOT/www/MongoDB/Shard Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/Shard Servers/$cs"; fi
      get_serverstatus
      echo "$reporthtml" > "$M_ROOT/www/MongoDB/Shard Servers/$cs/${cs}_name.html"
    done &
  fi
fi

if [ -e "$rpath/mongo_servers.list" ] ; then
  ismaster=false
  masters=`cat "$rpath/mongo_servers.list" | grep \|master= | cut -sd'|' -f1,3`
  if [ -n "$masters" ]; then
    RS=true
    for csm in $masters ; do
      cs=${csm%|*}
      csrs=${csm#*|}
      cshost=$cs
      if [ -n "$DOMAIN" ]; then
        if [ `grep -c "|$cs|" "$M_ROOT/nodes.list"` -eq 0 ]; then
          cshost=${cs%%.*}
        fi
      fi
      rsstatusraw=`(IFS=$IFSORG ; $MONGO $AUTH "$cs/admin" --quiet --eval "rs.status().members.forEach(printjson)" 2>>"$LOG" | lib/json2txt)`
      ismaster=true
      if [ -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs"; fi
      get_serverstatus
      echo "$reporthtml" > "$M_ROOT/www/MongoDB/MongoDB Servers/$cs/${cs}_name.html"
      ismaster=false
      for cs in `cat "$rpath/mongo_servers.list" | grep -v \|master= | cut -sd'|' -f1,3 | grep \|$csrs$`; do
        if [ -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs"; fi
        get_serverstatus
        echo "$reporthtml" > "$M_ROOT/www/MongoDB/MongoDB Servers/$cs/${cs}_name.html"
      done
    done &
    RS=false
  else
    RS=false
    for cs in `cat "$rpath/mongo_servers.list" | cut -sd'|' -f1`; do
      if [ -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs" ]; then install -d "$M_ROOT/www/MongoDB/MongoDB Servers/$cs"; fi
      get_serverstatus
      echo "$reporthtml" > "$M_ROOT/www/MongoDB/MongoDB Servers/$cs/${cs}_name.html"
    done &
  fi
fi

### Cleanup. Note that it removes all old files from data folder, including
### those created by other MongoDB monitors

timeshift=`cat "$M_TEMP/../timeshift" || echo 0`
ccl=`expr $FREQ + $timeshift || echo 200`
mmin=`expr $ccl \* 3 / 60 + 1`
find "$rpath/data/" -mmin +$mmin -exec rm {} \;

exit 10


### mongo localhost:27018/admin --quiet --eval "db.currentOp().inprog.forEach(function(d){ if(d.waitingForLock) print(d.op)})" | sort | uniq -c

