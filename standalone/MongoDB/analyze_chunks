#!/bin/bash
# Copyright (C) 2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
echo_usage() {
  echo -e "\n  Usage: $rcommand <database.collection> <shard name>\n\n         With shard omitted all shards will be analyzed\n         With database.collection omitted all sharded collections will be amalyzed\n\n  Reports are written to file(s) in $rpath with names <shard>.<ns>.chunks\n\n  Environment variables for advanced usage:\n    MERGE_EMPTY_CHUNKS (true|false)\n    SPLIT_LARGE_CHUNKS (true|false)\n    LARGE_CHUNK_DEF (% of max chunk size)\n    SLEEP (seconds between chunk size calculations - to avoid locking of the collection for the full time of this analysis)\n"
}
if [ -n "$1" ]; then
  if [ "$1" == "--help" ]; then
    echo_usage && exit 0
  else
    [ `expr "$1" : "^.*\."` -eq 0 ] && echo_usage && exit 1
  fi
fi
source "$M_ROOT/lib/functions.sh"
[ -e "$rpath/mongo_servers.conf" ] && source "$rpath/mongo_servers.conf"
[ -e "$rpath/${rcommand}.conf" ] && source "$rpath/${rcommand}.conf"
LOG="$M_ROOT/logs/sa.log"
[ -z "$SLEEP" ] && SLEEP=20
DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && log "Diff utility not found, exiting..  " && exit 1
MONGO=`which mongo 2>/dev/null`
[ -z "$MONGO" ] && log "Mongo client not found, exiting..  " && exit 1

if [ -n "$AUTH_LOGIN" ]; then
  if [ -n "$AUTH_PASSWD" ]; then
    AUTH="-u $AUTH_LOGIN -p $AUTH_PASSWD"
  else
    echo "Password is not set for user $AUTH_LOGIN"
  fi
fi

# put these vars to analyze_chunks.conf or export them if needed
if [ -n "$MERGE_EMPTY_CHUNKS" ]; then
  MERGE_EMPTY_CHUNKS=true
else
  MERGE_EMPTY_CHUNKS=false
fi
if [ -n "$SPLIT_LARGE_CHUNKS" ]; then
  SPLIT_LARGE_CHUNKS=true
else
  SPLIT_LARGE_CHUNKS=false
fi
# in percents of max size
[ -z "$LARGE_CHUNK_DEF" ] && LARGE_CHUNK_DEF=90

a=`cat "$rpath/mongo_config_servers.list" 2>/dev/null | wc -l`
[[ $a -eq 0 ]] && log "No configuration servers found" && exit 1

confserver=`head -n $((RANDOM%$a+1)) "$rpath/mongo_config_servers.list" 2>/dev/null | tail -1 | cut -sd'|' -f1`
[ -z "$confserver" ] && confserver=`head -1 "$rpath/mongo_config_servers.list" 2>/dev/null | cut -sd'|' -f1`
[ -z "$confserver" ] && log "No configuration servers found" && exit 1

sharded=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.collections.find( {}, { _id : 1 } ).forEach(printjson)" 2>>$LOG | "$M_ROOT"/lib/json2txt | cut -d'|' -f2 | tr -d '"'`
shards=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.chunks.distinct(\"shard\").forEach( function(c) {print(c)} )" 2>>$LOG`

$SPLIT_LARGE_CHUNKS && maxsize=`$MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.settings.find({ \"_id\" : \"chunksize\"}).forEach(printjson)" | "$M_ROOT"/lib/json2txt | grep \"value\" | cut -d'|' -f2`

if [ -n "$MONGOS" ]; then
  mongos=$MONGOS
else
  mongos=`head -n $((RANDOM%$a+1)) "$rpath/mongo_mongos_servers.list" 2>/dev/null | tail -1 | cut -sd'|' -f1`
fi

for ns in $sharded ; do
  if [ -n "$1" ]; then [ "$1" != "$ns" ] && continue ; fi
  keypattern=`$MONGO $AUTH "$confserver"/config --quiet --eval "db.collections.find({\"_id\":\"${ns}\"}).forEach(function(c) {printjson(c.key)})"`
  for shard in $shards ; do
    if [ -n "$2" ]; then [ "$2" != "$shard" ] && continue ; fi
    rm "$rpath/${shard}.${ns}.chunks" 2>/dev/null
    shardhost=`cat "$rpath/mongo_shards.list" 2>/dev/null | grep "|$shard|.*|master$" | cut -sd'|' -f1`
    [ -z "$shardhost" ] && shardhost=`cat "$rpath/mongo_shards.list" 2>/dev/null | grep "|$shard|" | cut -sd'|' -f1 | head -1`
    [ -z "$shardhost" ] && echo "Host not found for shard $shard" && continue

    $MONGO $AUTH "$confserver"/admin --quiet --eval "db = db.getSiblingDB(\"config\"); db.chunks.find({\"shard\" : \"$shard\", \"ns\" : \"$ns\"}).forEach(function(c) {print('min : ' + tojson(c.min) + ', max : ' + tojson(c.max))})" | while read MINMAX ; do
      #echo "$MINMAX" >&2
      MIN=`expr "$MINMAX" : "^min\ :\ \(\{.*\}\),"`
      MAX=`expr "$MINMAX" : ".*max\ :\ \(\{.*\}\)"`
      #MIN=`echo "$MIN" | sed 's|"|\\\"|g'`
      #MAX=`echo "$MAX" | sed 's|"|\\\"|g'`
      SIZE=`$MONGO $AUTH "$shardhost/admin" --quiet --eval "printjson(db.runCommand({ dataSize: \"${ns}\", keyPattern: ${keypattern}, $MINMAX }))" | "$M_ROOT"/lib/json2txt | grep '"size"|' | cut -sd'|' -f2`
      echo "$ns|$MIN|$MAX|$SIZE" >> "$rpath/${shard}.${ns}.chunks"
      if $MERGE_EMPTY_CHUNKS ; then
        if [ -n "$mongos" ]; then
          if [ "_$MIN" == "_$max" ] && ([ $size -eq 0 ] || [ $SIZE -eq 0 ]); then
            log "merging chunks ($shard/$ns): << $min , $max >> + << $MIN , $MAX >> using mongos: $mongos"
            for ((i=0; i<10; i++)); do
              mergeres=`$MONGO $AUTH "$mongos"/admin --quiet --eval "printjson(db.runCommand( { mergeChunks : \"$ns\" , bounds : [ $min , $MAX ] } ))"`
              log "$mergeres"
              if `echo "$mergeres" | grep -q \"errmsg\"` ; then
                if `echo "$mergeres" | grep -q ' lock '` ; then
                  log "waiting for lock"
                  sleep 10
                else
                  break
                fi
              else
                break
              fi
            done
            size=`expr $size + $SIZE`
          else
            min=$MIN
            size=$SIZE
          fi
          max=$MAX
        fi
      fi
      if $SPLIT_LARGE_CHUNKS ; then
        sizepercent=`echo "scale=2; $SIZE / 1048576 / $maxsize * 100" | bc`
        if [ `echo "$sizepercent > $LARGE_CHUNK_DEF" | bc` -eq 1 ]; then
          if [ -n "$mongos" ]; then
            log "splitting chunk ($shard/$ns): << $MIN , $MAX >> (size: ${SIZE}, ${sizepercent}% of max) using mongos: $mongos"
            for ((i=0; i<10; i++)); do
              splitres=`$MONGO $AUTH "$mongos"/admin --quiet --eval "printjson(db.runCommand( { split : \"$ns\" , bounds : [ $MIN , $MAX ] } ))"`
              log "$splitres"
              if `echo "$splitres" | grep -q \"errmsg\"` ; then
                if `echo "$splitres" | grep -q ' lock '` ; then
                  log "waiting for lock"
                  sleep 10
                else
                  break
                fi
              else
                break
              fi
            done
          fi
        fi
      fi
      sleep $SLEEP
    done
  done
done




