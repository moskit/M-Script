#!/bin/bash

rpath=$(readlink -m "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/                                              ^^^^^ adjust this
source "$M_ROOT/lib/functions.sh"  # conf/mon.conf is sourced there
conf="$rpath/${rcommand%.mon}.conf"
[ -f "$conf" ] && source "$conf"

# LOG=<path/to/log/file>  # defaults to $M_ROOT/monitoring.log

### locking is recommended if you are not 100% sure that your monitor won't hang
### or take longer than FREQ
# get_lock

### time since the last run, if needed (timeshift is the average time needed
### for main process execution, it depends on the system speed and RUNDELAY
### setting
# timeshift=`cat /tmp/m_script/timeshift 2>/dev/null`
# [ -n "$FREQ" ] && [ -n "$timeshift" ] && interval=$(($FREQ + $timeshift))
# [ -z $interval ] && [ -n "$FREQ" ] && interval=$FREQ

### in case this monitor needs longer interval between runs
### interval can be anything that the 'date' utility can recognize
### (see 'man date' section DATE STRING)
### in case you need time since the last run:
# interval=`cat "$rpath/${rcommand%.mon}.interval.tmp"`
# check_interval "5 min" || exit 0

### or, if you use get_lock function:
# check_interval "5 min" || unlock_exit 0

### prints date header to the report file
# date_header



### Here goes the monitor's logic

### results are in e.g. var1 (integer) and var2 (real)
# check_results var1|integer,var2|real # compares results with threshold in
                                       # $conf (see above) which should be of
                                       # form var1_1=<level1 threshold>
                                       # 3 levels are supported, from var1_1 to
                                       # var1_3
                                       
# store_results var1|integer,var2|real # stores results in database if needed
                                       # (it is not necessary but it's good
                                       # to have historic data, generate graphs
                                       # and so on)
### if you locked it, release now
# release_lock
### or you can use
# unlock_exit 0

# unset period timeshift # and other vars

