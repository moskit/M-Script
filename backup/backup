#!/bin/bash

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")

source "$M_ROOT/lib/functions.sh"
source "$M_ROOT/lib/backup_functions.sh"

trap 'errorexit "Backup process interrupted"' QUIT INT TERM ABRT

# variable command1
possible_commands="run show list"
# variable command2
possible_subcommands=""
possible_options="id operation o t s c u h k key targetpath sourcepath targetuser targethost conf"

get_opts "$@"

[ -z "$operation" ] && operation=$o
[ -z "$targetpath" ] && targetpath=$t
[ -z "$sourcepath" ] && sourcepath=$s
[ -z "$targetuser" ] && targetuser=$u
[ -z "$targethost" ] && targethost=$h
[ -z "$key" ] && key=$k
[ -z "$conf" ] && conf=$c

if [ -n "$conf" ]; then
  if [ ! -e "$conf" ]; then
    if [ -e "${conf}.conf" ]; then
      conf="${conf}.conf"
    elif [ -e "$M_ROOT/conf/$conf" ]; then
      conf="$M_ROOT/conf/$conf"
    elif [ -e "$M_ROOT/conf/${conf}.conf" ]; then
      conf="$M_ROOT/conf/${conf}.conf"
    else
      errorexit "Backup configuration $conf does not exist"
    fi
  fi
  source "$conf"
fi

[ -z "$targetpath" ] && errorexit "Target path not specified"
[ -z "$id" ] && id="$(hostname -f)$(date +".%Y.%m.%d_%H.%M")"


[ -z "$LOG" ] && LOG="$M_ROOT/logs/backup.log"

case $command1 in
run)
  if [ -e "$rpath/${operation}.backup.sh" ]; then
    export targetpath sourcepath targetuser targethost
    do_backup "$rpath/${operation}.backup.sh" "$id" "$conf" >>"$LOG" 2>&1 || errorexit "Backup failed"
  else
    starttime=`date +"%s"`
    case $operation in
      tar)
        [ "_$followlinks" == "_yes" ] && OPTIONS="$OPTIONS -h"
        [ "_$numericids" == "_yes" ] && OPTIONS="$OPTIONS --numeric-owner"
        [ "_$preserveperm" == "_yes" ] && OPTIONS="$OPTIONS -p"
        [ "_$samefs" == "_yes" ] && OPTIONS="$OPTIONS --one-file-system"
        [ -d "$targetpath" ] || install -d "$targetpath"
        if [ -f "${conf}.exclude" ]; then
          OPTIONS="$OPTIONS --totals -X ${conf}.exclude"
        else
          OPTIONS="$OPTIONS --totals"
        fi
        if [ -e "${conf}.list" ]; then
          tar_files "${conf}.list" | grep -vE 'Removing leading|as we read' >>"$LOG" 2>&1
          res=$?
        fi
        finishtime=`date +"%s"`
        timespent `expr $finishtime - $starttime`
        if [ $res -eq 0 ]; then
          log "$operation : operation finished in $timetotal"
        fi
        ;;
      scp)
        [ -z "$targetuser" ] && targetuser=$USER
        [ -z "$targethost" ] && errorexit "Target host is not specified"
        SCP=`which scp 2>/dev/null`
        [ -z "$SCP" ] && errorexit "scp not found!"
        [ "_$preserveperm" != "_yes" ] || OPTIONS="$OPTIONS -p"
        [ -n "$bwlimit" ] && OPTIONS="$OPTIONS -l $bwlimit"
        [ "_$xfercompression" != "_yes" ] || OPTIONS="$OPTIONS -C"
        starttime=`date +"%s"`
        $SCP $OPTIONS "$sourcepath"/* "$targetuser"@"${targethost}:${targetpath}" >>"$LOG" 2>&1
        res=$?
        totalsize=`du -k -s "$sourcepath" | cut -f1`
        finishtime=`date +"%s"`
        timespent `expr $finishtime - $starttime`
        if [ $res -eq 0 ]; then
          log "scp backup: success, files size $totalsize"
        else
          log "scp backup: failure"
        fi
        log "scp backup: operation finished in $timetotal"
        ;;
      rsync)
        [ -z "$targetuser" ] && targetuser=$USER
        [ -z "$targethost" ] && errorexit "Target host is not specified"
        RSYNC=`which scp 2>/dev/null`
        [ -z "$RSYNC" ] && errorexit "rsync not found!"
        [ "_$followlinks" == "_yes" ] || OPTIONS="$OPTIONS -l"
        [ "_$numericids" != "_yes" ] || OPTIONS="$OPTIONS --numeric-owner"
        [ "_$preserveperm" != "_yes" ] || OPTIONS="$OPTIONS -Ago"
        [ "_$samefs" != "_yes" ] || OPTIONS="$OPTIONS --safe-links"
        [ -n "_$bwlimit" ] && OPTIONS="$OPTIONS --bwlimit=`expr $bwlimit / 8`"
        [ "_$xfercompression" != "_yes" ] || OPTIONS="$OPTIONS -z"
        OPTIONS="$OPTIONS -rt"
        starttime=`date +"%s"`
        # if either remote host or remote user is not specified, it's a local transfer
        if [ -z "$targetuser" ] || [ -z "$targethost" ]; then
          $RSYNC $OPTIONS "$sourcepath"/ "$targetpath" >>"$LOG" 2>&1
        else
          $RSYNC $OPTIONS "$sourcepath"/ "$targetuser"@"${targethost}:${targetpath}" >>"$LOG" 2>&1
        fi
        res=$?
        totalsize=`du -k -s "$sourcepath" | cut -f1`
        finishtime=`date +"%s"`
        timespent `expr $finishtime - $starttime`
        if [ $res -eq 0 ]; then
          log "rsync backup: success, files size $totalsize"
        else
          log "rsync backup: failure"
        fi
        log "rsync backup: operation finished in $timetotal"
        ;;
      s3cmd)
        [ -z "$targethost" ] && errorexit "Please specify bucket name as targethost"
        S3=`which s3cmd 2>/dev/null`
        [ -z "$S3" ] && errorexit "s3cmd not found!"
        [ "_$preserveperm" != "_yes" ] && OPTIONS="$OPTIONS --no-preserve"
        targetpath=${targetpath#/}
        s3target="s3://`echo "${targethost%/}/${targetpath%/}/" | sed 's|s3://||;s|//|/|g'`"
        starttime=`date +"%s"`
        $S3 $OPTIONS sync $sourcepath/ "$s3target" >>"$LOG" 2>&1
        res=$?
        totalsize=`du -k -s "$sourcepath" | cut -f1`
        finishtime=`date +"%s"`
        timespent `expr $finishtime - $starttime`
        if [ $res -eq 0 ]; then
          log "S3 backup: success, files size $totalsize"
        else
          log "S3 backup: failure"
        fi
        log "S3 backup: operation finished in $timetotal"
        ;;
      *)
        errorexit "Unknown operation: $operation"
        ;;
    esac
  fi
  ;;
show)
  echo
  ;;
list)
  echo
  ;;
esac




