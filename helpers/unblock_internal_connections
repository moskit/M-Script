#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")
#*/ (this is needed to fix vi syntax highlighting)

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "Ssh utility not found, exiting" && exit 1
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
[ -f "/sbin/iptables" ] && IPT=/sbin/iptables || IPT=`which iptables 2>/dev/null`
[ -f "/sbin/iptables-save" ] && IPTS=/sbin/iptables-save || IPTS=`which iptables-save 2>/dev/null`
[ -n "$CONNECT_TIMEOUT" ] && TIMEOUT="-o ConnectTimeout=$CONNECT_TIMEOUT"

possible_options="cluster help region cloud verbose ip fromregion fromcluster fromip"
commflag=0
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  cat <<"EOF"
Usage: ${0##*/} <options>

Installs firewall rules allowing connections from one servers to another. 

Options:

  specifying target servers:
  
  --cluster=clustername   - installs rules to all servers from this cluster.
                            Multiple clusters are not allowed.
                            MUST be defined. To specify all servers, use 
                            --cluster=all. If you run this command from msh
                            while cr'ed into a role, this role cluster is used
                            by default (M_CLUSTER environment variable).
  --ip=IP                 - target ip for a single server operation.
                            If ip is defined, cluster and region are ignored.
  --region=region         - installs rules to all servers from this region.
  
  specifying source servers:
  
  --fromcluster           - allows connections from all servers in this cluster.
  --fromregion            - allows connections from all servers in this region.
  --fromip                - allows connections from this IP. This IP doesn't 
                            have to be present in nodes.list
                            
                            If none of "from" options is defined, source IPs
                            default to all servers from nodes.list.
  
  --verbose               - verbose output.

EOF
  exit 0
fi

[ -z "$ip" -a -z "$cluster" ] && echo "Neither target cluster nor target IP is defined! If you want to specify all clusters, use --cluster=all." && exit 1

source "$M_ROOT/conf/mon.conf"
[ -n "$cloud" ] && CLOUD=$cloud
[ -n "$CLOUD" ] && source "$M_ROOT/conf/clouds/${CLOUD}.conf"
[ -z "$SSHPORT" ] && SSHPORT=22

localips=`"$M_ROOT"/helpers/localips`

IFS1=$IFS
IFS='
'

findchain_local() {
  upperchain=`$IPT -L $1 -n | grep -v ^Chain | grep -v ^target | grep -vE "^ACCEPT|^REJECT|^DROP|^LOG|^[[:space:]]" | head -1 | awk '{print $1}'`
  if [ -n "$upperchain" ] ; then
    $IPT -L $upperchain -n >/dev/null && echo $upperchain || echo $1
  else
    echo $1
  fi
}

findchain_remote() {
  upperchain=`$SSH -i "$3" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $2 "\`which iptables 2>/dev/null\` -L $1 -n | grep -v ^Chain | grep -v ^target | grep -vE \"^ACCEPT|^REJECT|^DROP|^LOG|^[[:space:]]\" | head -1 | awk '{print \\$1}'"`
  if [ -n "$upperchain" ] ; then
    $SSH -i "$3" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $2 "$IPT -L $upperchain -n" >/dev/null && echo $upperchain  || echo $1
  else
    echo $1
  fi
}

unblock_ip() {
  mainchain="INPUT"
  if [ `echo "$localip" | grep -c "^$IP$"` -ne 0 ] ; then
    [ -n "$IPT" ] || continue
    rchain=`findchain_local $mainchain`
    [ -n "$rchain" ] || continue
    [ "_$verbose" == "_yes" ] && echo "Chain: $rchain  Unblocking $IP2UB"
    existing=`$IPTS | grep -E "\-A $rchain \-s $IP2UB \-j ACCEPT|\-A $rchain \-s $IP2UB/[0-9]* \-j ACCEPT" | wc -l`
    if [[ $existing -eq 0 ]] ; then
      $IPT -I "$rchain" -s $IP2UB -j ACCEPT
    else
      dupes=`expr $existing - 1`
      if [[ $dupes -gt 0 ]] ; then
        echo -n "  $existing existing rules found, removing duplicates"
        for ((n=0; n<$dupes; n++)) ; do
          printf "."
          $IPT -D "$rchain" -s $IP2UB -j ACCEPT
        done
        echo
      fi
    fi
  else
    rchain=`findchain_remote $mainchain $IP "$KEY"`
    [ -n "$rchain" ] || continue
    [ "_$verbose" == "_yes" ] && echo "Chain: $rchain  Unblocking $IP2UB"
    command="\`which iptables-save 2>/dev/null\` | grep -E \"\-A $rchain \-s $IP2UB \-j ACCEPT|\-A $rchain \-s $IP2UB/[0-9]* \-j ACCEPT\" | wc -l"
    existing=`$SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"`
    if [[ $existing -eq 0 ]] ; then
      command="\`which iptables 2>/dev/null\` -I \"$rchain\" -s $IP2UB -j ACCEPT"
      $SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"
    else
      dupes=`expr $existing - 1`
      if [[ $dupes -gt 0 ]] ; then
        echo -n "  $existing existing rules found, removing duplicates"
        for ((n=0; n<$dupes; n++)) ; do
          printf "."
          command="\`which iptables 2>/dev/null\` -D \"$rchain\" -s $IP2UB -j ACCEPT"
          $SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"
        done
        echo
      fi
    fi
  fi
  unset rchain
  mainchain="OUTPUT"
  if [ `echo "$localip" | grep -c "^$IP$"` -ne 0 ] ; then
    [ -n "$IPT" ] || continue
    rchain=`findchain_local $mainchain`
    [ -n "$rchain" ] || continue
    [ "_$verbose" == "_yes" ] && echo "Chain: $rchain  Unblocking $IP2UB"
    existing=`$IPTS | grep -E "\-A $rchain \-d $IP2UB \-j ACCEPT|\-A $rchain \-d $IP2UB/[0-9]* \-j ACCEPT" | wc -l`
    if [[ $existing -eq 0 ]] ; then
      $IPT -I "$rchain" -d $IP2UB -j ACCEPT
    else
      dupes=`expr $existing - 1`
      if [[ $dupes -gt 0 ]] ; then
        echo -n "  $existing existing rules found, removing duplicates"
        for ((n=0; n<$dupes; n++)) ; do
          printf "."
          $IPT -D "$rchain" -d $IP2UB -j ACCEPT
        done
        echo
      fi
    fi
  else
    rchain=`findchain_remote $mainchain $IP "$KEY"`
    [ -n "$rchain" ] || continue
    [ "_$verbose" == "_yes" ] && echo "Chain: $rchain  Unblocking $IP2UB"
    command="\`which iptables-save 2>/dev/null\` | grep -E \"\-A $rchain \-d $IP2UB \-j ACCEPT|\-A $rchain \-d $IP2UB/[0-9]* \-j ACCEPT\" | wc -l"
    existing=`$SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"`
    if [[ $existing -eq 0 ]] ; then
      command="\`which iptables 2>/dev/null\` -I \"$rchain\" -d $IP2UB -j ACCEPT"
      $SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"
    else
      dupes=`expr $existing - 1`
      if [[ $dupes -gt 0 ]] ; then
        echo -n "  $existing existing rules found, removing duplicates"
        for ((n=0; n<$dupes; n++)) ; do
          printf "."
          command="\`which iptables 2>/dev/null\` -D \"$rchain\" -d $IP2UB -j ACCEPT"
          $SSH -i "$KEY" -p $SSHPORT $TIMEOUT -o StrictHostKeyChecking=no $IP "$command"
        done
        echo
      fi
    fi
  fi
  unset rchain

}

for IP in `get_ips --cloud=$cloud --cluster=$cluster --region=$region` ; do
  [ -n "$ip" ] && [ "_$IP" != "_$ip" ] && continue
  KEY=`"$rpath"/find_key node $IP` || continue
  if [ "_$verbose" == "_yes" ] ; then
    echo -e "\n--- Node: $IP\n"
  fi

  if [ -n "$fromip" ]; then
    IP2UB=$fromip
    unblock_ip
  else
    for IP2UB in `get_ips --cluster=$fromcluster --region=$fromregion` ; do
      if [ "_$fromcluster" == "_$SUPER_CLUSTER" ]; then
        [ "_$cluster" != "_$SUPER_CLUSTER" ] && [ `echo "$localips" | grep -c "^$IP2UB$"` -eq 0 ] && continue
      fi
      echo "$localips" | grep -q "^$IP2UB$" && continue
      unblock_ip
    done &
  fi
done

IFS=$IFS1


