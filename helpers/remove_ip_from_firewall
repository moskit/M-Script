#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
[ -n "$M_ROOT" ] || M_ROOT="${rpath%/*}"
#*/

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "Ssh utility not found, exiting" && exit 1
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
[ -f "/sbin/iptables" ] && IPT=/sbin/iptables || IPT=`which iptables 2>/dev/null`
[ -f "/sbin/iptables-save" ] && IPTS=/sbin/iptables-save || IPTS=`which iptables-save 2>/dev/null`

possible_options="cluster help region verbose ip fromregion fromcluster"
commflag=0
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,/ /g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  cat <<"EOF"
Usage: ${0##*/} <options> IP

Removes IP from multiple servers' firewalls. 

Useful for cleanup: when a server is terminated in a cloud environment, its IP
should be removed from other servers' firewall rules, otherwise the number of
existing rules may grow fast. 

Options:

  specifying target servers:
  
  --cluster=clustername   - installs rules to all servers from this cluster.
                            Multiple clusters are not allowed.
                            MUST be defined. To specify all servers, use 
                            --cluster=all. Accepts also M_CLUSTER environment
                            variable (used by msh).
  --all                   - alias for --cluster=all.
  --ip=IP                 - ip for a single server operation.
                            If ip is defined, cluster and region are ignored.
  --region=region         - installs rules to all servers from this region.
  
  specifying source servers:
  
  --fromcluster           - allows connections from all servers in this cluster.
  --fromregion            - allows connections from all servers in this region.
                            Both these options are not mandatory, they default
                            to all servers from servers.list.
  
  --verbose               - verbose output.

EOF
  exit 0
fi

[ -z "$s_param" ] && echo "Usage: ${0##*/} <options> IP" || IP=$s_param

[ -z "$cluster" -a -z $ip ] && echo "Target cluster or a single IP must be defined! Use --cluster=all to specify all clusters." && exit 1

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"

source "$M_ROOT/conf/mon.conf"

IFS1=$IFS
IFS='
'

for dserver in `cat "$rpath/../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*#` ; do
  dip=${dserver%%|*}
  if [ -n "$ip" ]; then
    [ "X$dip" != "X$ip" ] && continue
  else
    if [ -n "$region" ] ; then
      DREGION=`echo $dserver | cut -d'|' -f3`
      [ "X$DREGION" == "X$region" ] || continue
    fi
    DCLUSTER=`echo $dserver | cut -d'|' -f5`
    if [ "x$cluster" != "xall" ] ; then
      [ "X$DCLUSTER" == "X$cluster" ] || continue
    fi
  fi
  [ "X$verbose" == "Xyes" ] && echo -e "\n--- Server: $dserver\n"
  
  if [ `echo $localip | grep -c $dip` -ne 0 ]; then
    lines=`$IPTS | grep -E " $IP | $IP/[0-9]*" | sed "s|^-A|$IPT -D|g"`
    for line in $lines ; do
      echo -n "$line    "
      $line && echo "OK" || echo "Error"
    done
  else
    lines=`"$rpath"/mssh "$dip" "$IPTS \\| grep -E \\"\\ $IP\\ \\|\\ $IP/[0-9]\\*\\" | sed \"s\|^-A\|$IPT -D\|g\"`
    for line in $lines ; do
      echo -n "$line    "
      "$rpath"/mssh $dip $line && echo "OK" || echo "Error"
    done
  fi
done

IFS=$IFS1

