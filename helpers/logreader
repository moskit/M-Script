#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

possible_options="file maxlines period timeformat help verbose resolution"
necessary_options="file"
ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
  found=0
done
IFS=$IFS1

source "${rpath}/../conf/mon.conf"
# defaults
[ -z "$maxlines" ] && maxlines=1000
[ -z "$period" ] && period="$FREQ sec"
[ -z "$timeformat" ] && timeformat='%b %e %H:%M'
if [ -n "$resolution" ]; then
  case $resolution in
    min|minute|minutes)
      res="1 min"
      ;;
    sec|second|seconds)
      res="1 sec"
      ;;
  esac
fi
if [ -z "$res" ]; then
  lastletter=`echo ${timeformat##*%} | cut -b 1`
  [ "X$lastletter" == "XM" ] && res="1 min"
  [ "X$lastletter" == "XS" ] && res="1 sec"
fi

timepattern=`date -d "-${period}" +"$timeformat"`
timecurrent=`date +"$timeformat"`

ln=`tail -n $maxlines "$file" | grep -n -m 1 -h "$timepattern" | cut -d':' -f1`
if [ -z "$ln" ] ; then
  badpattern=false
  declare -i i ; i=0 ; ilimit=20 # safety limit
  while [[ "$timepattern" != "$timecurrent" ]]; do
    dd=`date -d "$timepattern" 2>/dev/null`
    [ -z "$dd" ] && echo "Unable to restore date/time using pattern: $timepattern" >> "$rpath/../monitoring.log" && break
    timepattern=`date -d "$dd +$res" +"$timeformat" 2>/dev/null || badpattern=true`
    $badpattern && break
    i+=1
    [ $i -gt $ilimit ] && break
    ln=`tail -n $maxlines "$file" | grep -n -m 1 -h "$timepattern" | cut -d':' -f1`
    [ -n "$verbose" ] && echo "Datetime pattern: $timepattern Number of lines back: $ln"
    [[ $ln -gt 0 ]] && break
  done
fi

[[ $ln -gt 0 ]] && tail -n $maxlines "$file" | tail -n +$ln || echo "Logreader: was unable to find the number of lines to process. Command was: $0 $@" >> "$rpath/../monitoring.log"

exit 0



