#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")

source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/block_ip.log"

ips=`cat $1 | grep -v ^$ | sort | uniq`

cleanup() {

$IPT -F M_IPBLOCK_TMP
$IPT -F M_IPBLOCK_CONST
$IPT -D INPUT -j M_IPBLOCK_TMP
$IPT -D INPUT -j M_IPBLOCK_CONST
$IPT -X M_IPBLOCK_TMP
$IPT -X M_IPBLOCK_CONST

}

[ -f "/sbin/iptables" ] && IPT=/sbin/iptables || IPT=`which iptables 2>/dev/null`
[ "X$IPT" == "X" ] && echo "No iptables found" && exit 1

possible_options="method cleanup block_forever_after rate burst"
necessary_options=""
for s_option in $2 $3
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param="$s_option $s_param"
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
found=0

source "$M_ROOT/conf/mon.conf"

[ -n "$cleanup" ] && cleanup && exit $?

[ -z "$method" ] && method=REJECT
if [ "$method" == "limit" ]; then
  [ -z "$rate" ] && rate="1/s"
  [ -z "$burst" ] && burst="1/s"
  method="-m limit --limit $rate --limit-burst $burst -j ACCEPT"
else
  method="-j $method"
fi

$IPT -L M_IPBLOCK_CONST -n >/dev/null 2>&1
[[ $? -eq 1 ]] && $IPT -N M_IPBLOCK_CONST && $IPT -A INPUT -j M_IPBLOCK_CONST
$IPT -L M_IPBLOCK_TMP -n >/dev/null 2>&1
if [[ $? -eq 1 ]] ; then
  $IPT -N M_IPBLOCK_TMP
  $IPT -A INPUT -j M_IPBLOCK_TMP
else
  $IPT -F M_IPBLOCK_TMP
fi
[ -z "$block_forever_after" ] && block_forever_after=99999
if [ -n "$ips" ] ; then
  for ip in $ips ; do
  echo $ip >> "$M_TEMP/ip_block.tmp"
    # Never block own IPs! :)
    if [[ `grep -c ^$ip\| "$M_ROOT/servers.list"` -eq 0 ]] ; then
      ipincl=`grep -c "^${ip}$" "$M_TEMP/ip_block.tmp"` || ipincl=0
      log "$ip :: logged: $ipincl times, forever after: $block_forever_after times"
      if [[ $ipincl -gt $block_forever_after ]] ; then
        if [[ `grep -c "^${ip}$" "$M_TEMP/ip_block.const"` -eq 0 ]] ; then
          echo $ip >> "$M_TEMP/ip_block.const"
          $IPT -A M_IPBLOCK_CONST -s $ip $method
          log "$ip blocked for ever"
        else
          log "$ip found in $M_TEMP/ip_block.const, pls check your firewall"
        fi
      else
        log "$ip :: blocking temporarily"
        $IPT -A M_IPBLOCK_TMP -s $ip $method
      fi
    fi
  done
fi


