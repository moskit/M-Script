#!/bin/bash

# Copyright (C) 2008-2012 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### BEGIN INIT INFO
# Provides:          wrapper
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Required-Start:
# Required-Stop:
### END INIT INFO

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/

wrapper_options="config command logfile errlogfile pidfile fg user group help wait kill chdir"
# All possible options for the wrapped command must be listed here
# (only long options are supported: --option=value)
command_options=""
# This list is for those options (both command and wrapper) that must be
# present, otherwise it won't run
necessary_options="command"
[ $# -eq 0 ] && $0 --help && exit 0
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  case $s_option in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *)
    s_param="$s_option"
    s_optname=''
    s_optarg=''
    ;;
  esac
  possible_options="$command_options $wrapper_options"
  
  for option in `echo $possible_options | sed 's/ /-/g'`; do 
    [ -n "$s_optname" ] && [ "_$s_optname" == "_$option" ] && eval "$option=\"${s_optarg}\"" && found=true
  done
  [ "_$s_option" == "_$s_param" ] && found=true
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "_$help" == "_yes" ] ; then
  echo "Usage: ${0##*/} <options> start|stop|restart|status"
  echo 
  echo "Options: $possible_options"
  echo
  exit 0
fi

exitproper() {
  # to be nice to children
  $rpath/$rcommand stop
  rm $pidfile
  exit 0
}

trap 'exitproper' 3
trap 'exitproper' 15

[ -n "$config" ] || config="$rpath/${rcommand##*/}.conf"
[ -e "$config" ] || config="/etc/${rcommand##*/}.conf"
if [ -e "$config" ] ; then
  source "$config"
fi
[ -n "$logfile" ] || logfile="/var/log/${rcommand##*/}.log"
[ -n "$errlogfile" ] || errlogfile=$logfile
[ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"

if [ -n "$necessary_options" ]; then
  found=false
  for option in $necessary_options ; do
    [ -z "$(eval echo \$$option)" ] && missing_options="$missing_options --${option}," && found=true
  done
  if $found ; then
    echo "Necessary options: ${missing_options/%,/} not found"
    exit 1
  fi
fi

[ -n "$chdir" ] && cdback=$PWD

if [ -n "$user" ] ; then
  touch "$logfile" "$pidfile" && chown $user "$logfile" "$pidfile" || (echo "Unable to write to either $logfile or $pidfile or both" && rm -f "$logfile" "$pidfile" 2>/dev/null && exit 1)
fi
if [ -n "$group" ] ; then
  touch "$logfile" "$pidfile" && chgrp $group "$logfile" "$pidfile" || (echo "Unable to write to either $logfile or $pidfile or both" && rm -f "$logfile" "$pidfile" 2>/dev/null && exit 1)
fi
[ -n "$wait" ] || wait=0
case $s_param in
  start)
    [ -f "$pidfile" ] && [ -n "`cat "$pidfile"|grep -v ^$|tail -1`" ] && [ -d "/proc/`cat "$pidfile"|grep -v ^$|tail -1`" ] &&  echo "Already running (PID `cat "$pidfile"|grep -v ^$|tail -1`, file $pidfile)." && exit 0
    printf "Starting ${0##*/}...   " | tee -a $logfile
    if [ -e "$config" ] ; then
      echo "Using configuration file $config" >>"$logfile"
    else
      echo "No configuration file" >>"$logfile"
    fi
    [ -n "$chdir" ] && cd "$chdir"
    if [ -n "$user" ] && [ "$UID" == "0" ] ; then
      fullcommand="$command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done)"
      fullcommand="$fullcommand 1>>\"$logfile\" 2>>\"$errlogfile\" </dev/null & { echo \$!; }"
      pid=`su -m $user -c "$fullcommand"`
      succ=$?
      if [ -n "$pid" ]; then
        echo $pid > "$pidfile"
      else
        succ=1
      fi
    elif [ -n "$group" ] && [ "$UID" == "0" ] ; then
      fullcommand="$command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done)"
      fullcommand="$fullcommand 1>>\"$logfile\" 2>>\"$errlogfile\" </dev/null & { echo \$!; }"
      pid=`sg -m $group -c "$fullcommand"`
      succ=$?
      if [ -n "$pid" ]; then
        echo $pid > "$pidfile"
      else
        succ=1
      fi
    else
      exec -a $rcommand $command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done) 1>>"$logfile" 2>>$errlogfile </dev/null &
      succ=$?
      pid=$!
      echo $pid > "$pidfile"
    fi

    if [ $succ -eq 0 ]; then
      [ -d /proc/$pid ] && echo "done (PID `cat "$pidfile"|grep -v ^$|tail -1`)" || echo "error" | tee -a "$logfile"
    else
      [ -d /proc/$pid ] && echo "started (PID `cat "$pidfile"|grep -v ^$|tail -1`) but init exited with error" || echo "error: not started"
    fi

    [ -n "$cdback" ] && cd "$cdback"
    ;;
  stop)
    if [ -z "$config" ] ; then
      echo "Configuration file is not defined, guessing PID file... "
      [ -e "$pidfile" ] || pidfile="$rpath/${rcommand##*/}.pid"
      if [ -e "$pidfile" ] ; then
        echo "Using PID file $pidfile"
      else
        echo "Unable to stop ${rcommand}, PID file not found"
        exit 1
      fi
    else
      [ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"
      [ -e "$pidfile" ] || pidfile="$rpath/${rcommand##*/}.pid"
    fi
    if [ -f "$pidfile" ]; then
      pid=`cat "$pidfile"|grep -v ^$|tail -1`
      if [ -n "$pid" ] ; then
        printf "Stopping $rcommand (pid $pid)...      "
        kill -15 $pid
        sleep 1
        if [ -d "/proc/$pid" ] ; then
          wait=`expr $wait / 2`
          for ((i=1; i<=$wait; i++)) ; do
            [ -d "/proc/$pid" ] || break
            sleep 2
          done
        fi
        if [ -d "/proc/$pid" ] ; then
          if [ -n "$kill" ] ; then
            kill -9 $pid
          else
            echo "error"
          fi
        else
          rm -f "$pidfile"
          echo "done"
        fi
      else
        echo "Unable to stop ${rcommand}, PID file is empty"
      fi
    else
      echo "$pidfile not found!"
    fi
    ;;
  restart)
    $0 $wrapper_options stop
    sleep 3
    $0 $wrapper_options $command_options start
    ;;
  status)
    [ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"
    [ -e "$pidfile" ] || pidfile="$rpath/${rcommand##*/}.pid"
    if [ -e "$pidfile" ]; then
      pid=`cat "$pidfile"|grep -v ^$|tail -1`
      if [ -n "$pid" ] ; then
        [ -d "/proc/$pid" ] && echo "${0##*/} is running (pid $pid)" || echo "pidfile exists, but process $pid is not running"
      else
        echo "pidfile exists, but is empty"
      fi
    else
      echo "${0##*/} is not running (no pidfile)"
    fi
    ;;
  *)
    $0 --help && exit 0
    ;;
esac
