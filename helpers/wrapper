#!/bin/bash

[ -h $0 ] && xcommand=`readlink $0` || xcommand=$0
rpath=$(cd ${xcommand%/*}/ && pwd)
rcommand=${xcommand##*/}
#*/
wrapper_options="config command logfile pidfile fg user group help"
# All possible options for the wrapped command must be listed here
# (only long options are supported: --option=value)
command_options=""
# This list is for those options (both command and wrapper) that must be
# present, otherwise it won't start
necessary_options="command"
[ $# -eq 0 ] && ${0} --help && exit 0
IFS1=$IFS
IFS='--'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  possible_options="$command_options $wrapper_options"
  
  for option in `echo $possible_options | sed 's/ /--/g'`; do 
    [ -n "$s_optname" ] && [ "X$s_optname" == "X$option" ] && eval "$option=\"${s_optarg}\"" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options> start|stop|restart|status"
  echo 
  echo "Options: $possible_options"
  echo
  exit 0
fi

trap 'exit' 0
trap 'exit' 3
trap 'exit' 15

[ -n "$config" ] || config="${rpath}/${rcommand##*/}.conf"
[ -e "$config" ] || config="/etc/${rcommand##*/}.conf"
if [ -e "$config" ] ; then
  source $config
fi
[ -n "$logfile" ] || logfile="/var/log/${rcommand##*/}.log"
[ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"

if [ -n "$user" ] ; then
  touch "$logfile" "$pidfile" && chown $user "$logfile" "$pidfile" || (echo "Unable to write to either $logfile or $pidfile or both" && rm -f "$logfile" "$pidfile" 2>/dev/null && exit 1)
fi
if [ -n "$group" ] ; then
  touch "$logfile" "$pidfile" && chown $group "$logfile" "$pidfile" || (echo "Unable to write to either $logfile or $pidfile or both" && rm -f "$logfile" "$pidfile" 2>/dev/null && exit 1)
fi

case $s_param in
  start)
    [ -f "$pidfile" ] && [ -n "`cat $pidfile`" ] && echo "Already running (PID `cat $pidfile`, file $pidfile)" && rm "$pidfile" && exit 0
    printf "Starting ${0##*/}...   " | tee -a $logfile
    if [ -e "$config" ] ; then
      echo "Using configuration file $config" >>"$logfile"
    else
      echo "No configuration file" >>"$logfile"
    fi
    if [ -n "$user" ] ; then
      su -l $user -c "exec $command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done) >>$logfile 2>&1 </dev/null" &
      succ=$?
      echo $! > $pidfile
    elif [ -n "$group" ] ; then
      sg -l $group -c "exec $command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done) >>$logfile 2>&1 </dev/null" &
      succ=$?
      echo $! > $pidfile
    else
      exec $command $(for po in $command_options ; do printf " --${po}=`eval "echo \\$\${po}"`" ; done) >>$logfile 2>&1 </dev/null &
      succ=$?
      echo $! > $pidfile
    fi

    [[ $succ -eq 0 ]] && [ -n "`cat $pidfile`" ] && echo "done (PID `cat $pidfile`)" || echo "error" | tee -a $logfile
    ;;
  stop)
    if [ -z "$config" ] ; then
      echo "Configuration file is not defined, guessing PID file... "
      config="${rpath}/${rcommand##*/}.conf"
      [ -e "$config" ] || config="/etc/${rcommand##*/}.conf"
      [ -e "$config" ] && echo "Using configuration file $config" && source $config
      [ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"
      [ -e "$pidfile" ] || pidfile="${rpath}/${rcommand##*/}.pid"
      if [ -e "$pidfile" ] ; then
        echo "Using PID file $pidfile"
      else
        echo "Unable to stop ${rcommand}, PID file not found"
      fi
    else
      [ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"
      [ -e "$pidfile" ] || pidfile="${rpath}/${rcommand##*/}.pid"
      if [ -f ${pidfile} ]; then
        pid=`cat ${pidfile}|tail -1`
        if [ -n "$pid" ] ; then
          printf "Stopping $rcommand (pid $pid)...      "
          rm -f $pidfile
          kill -15 $pid && echo "done"
        else
          echo "Unable to stop ${rcommand}, PID file is empty"
        fi
      else
        echo "${pidfile} not found!"
      fi
    fi
    ;;
  restart)
    
    $0 $wrapper_options stop
    sleep 3
    $0 $wrapper_options $command_options start
    ;;
  status)
    [ -n "$pidfile" ] || pidfile="/var/run/${rcommand##*/}.pid"
    [ -e "$pidfile" ] || pidfile="${rpath}/${rcommand##*/}.pid"
    if [ -f ${pidfile} ]; then
      pid=`cat ${pidfile}|tail -1`
      if [ -n "$pid" ] ; then
        echo "${0##*/} is running (pid $pid)"
      else
        echo "${0##*/} is not running"
      fi
    else
      echo "${0##*/} is not running"
    fi
    ;;
  *)
    ${0} --help && exit 0
    ;;
esac
