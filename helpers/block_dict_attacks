#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand=${rpath##*/}
rpath=${rpath%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../")

source "$M_ROOT/lib/functions.sh"
LOG="$M_ROOT/logs/block_ip.log"

possible_options="file period intervalmaxlines maxinvalid method maxfail maxfailroot timeformat"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -z "$file" ] && echo "file is not defined" >&2 && exit 1
timeshift=`cat "$M_TEMP"/timeshift 2>/dev/null` || timeshift=10
freqdef=`expr $FREQ + $timeshift` || freqdef=210
[ -n "$interval" ] && period="$interval"
[ -z "$period" ] && period="$freqdef sec"
if ! expr "$period" : ".*[^[0-9]]*" >/dev/null; then period="$period sec" ; fi
[ -z "$maxlines" ] && maxlines=500
[ -z "$maxfail" ] && maxfail=5
[ -z "$maxfailroot" ] && maxfailroot=3
[ -z "$timeformat" ] && timeformat="%b %d %H:%M:%S"
[ -z "$method" ] && method="REJECT"
export BLOCK_CALLER="$rcommand"

logged=`"$M_ROOT"/helpers/logreader --file=$file --timeformat="$timeformat" --maxlines=$maxlines --period="$period"`

invalidusers=`echo "$logged" | grep "Invalid\\ user"`
rootfails=`echo "$logged" | grep "Failed\\ password\\ for\\ root"`
userfails=`echo "$logged" | grep "Failed\\ password\\ for\\ " | grep -v "Failed\\ password\\ for\\ root" | grep -v "Failed\\ password\\ for\\ invalid"`
loginbykey=`echo "$logged" | grep "Accepted\\ publickey\\ for"`
loginbypass=`echo "$logged" | grep "Accepted\\ password\\ for"`

if [ -n "$loginbykey" ]; then
  echo -e "\n<OK> Successful logins using key authentication:\n-------------------------------------------------\n"
  echo "$loginbykey" | grep -oE "for\ .*\ from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2,3,4 | sed 's|^|<OK> |'
fi
if [ -n "$loginbypass" ]; then
  echo -e "\n<OK> Successful logins using password authentication:\n------------------------------------------------------\n"
  echo "$loginbypass" | grep -oE "for\ .*\ from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2,3,4 | sed 's|^|<OK> |'
fi

if [ -n "$rootfails" ]; then
  echo -e "\n<**> Failed attempts to login as root:\n---------------------------------------\n"
  rootfails=`echo "$rootfails" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  echo "$rootfails" | sed "s_$_|$BLOCK_CALLER" >> "$M_TEMP/ip_block.tmp"
  for ipaddr in `echo "$rootfails" | sort | uniq` ; do
    invalid=`echo "$rootfails" | grep -c "^${ipaddr}$"`
    echo "<**> ${ipaddr}: $invalid attempts"
    echo "$ipaddr" | "$M_ROOT"/helpers/block_ip - --method="$method" --block_forever_after=$maxfailroot
  done
fi

if [ -n "$invalidusers" ]; then
  echo -e "\n<**> Attempts to login as non-existing user:\n---------------------------------------------\n"
  invalidusers=`echo "$invalidusers" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  echo "$invalidusers" | sed "s_$_|$BLOCK_CALLER" >> "$M_TEMP/ip_block.tmp"
  for ipaddr in `echo "$invalidusers" | sort | uniq` ; do
    invalid=`echo "$invalidusers" | grep -c "^${ipaddr}$"`
    echo "<**> ${ipaddr}: $invalid attempts"
    echo "$ipaddr" | "$M_ROOT"/helpers/block_ip - --method="$method" --block_forever_after=$maxfail
  done
fi

if [ -n "$userfails" ]; then
  echo -e "\n<**> Failed attempts to login as non-root user:\n------------------------------------------------\n"
  userfails=`echo "$userfails" | grep -oE "from\ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}" | cut -d ' ' -f2`
  echo "$userfails" | sed "s_$_|$BLOCK_CALLER" >> "$M_TEMP/ip_block.tmp"
  for ipaddr in `echo "$userfails" | sort | uniq` ; do
    invalid=`echo "$userfails" | grep -c "^${ipaddr}$"`
    echo "<**> ${ipaddr}: $invalid attempts"
    echo "$ipaddr" | "$M_ROOT"/helpers/block_ip - --method="$method" --block_forever_after=$maxfail
  done
fi

