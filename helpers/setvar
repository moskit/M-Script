#!/bin/bash
rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/..")

possible_options="help add uncomment table"
necessary_options=""

IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  case $s_option in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *)
    [ -z "$ARG" ] && ARG="$s_option" && found=true && unset s_optname
    ;;
  esac
  if [ -n "$s_optname" ]; then
    for option in `echo $possible_options | sed 's/ /-/g'`; do
      if [ "X$s_optname" == "X$option" ]; then
        if [ -n "$s_optarg" ]; then
          eval "$s_optname=\"$s_optarg\""
        else
          [ -z "$(eval echo \$$option)" ] && eval "$option="
        fi
        found=true
      fi
    done
  fi
  if ! $found; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ "X$help" == "Xyes" ] ; then
  echo -e -n "Usage: ${0##*/}"" <options> <positional parameters>\n\n"
  if [ -n "$possible_options" ] ; then
    echo -e " <options> <positional parameters>\n\n  Possible options: $possible_options"
    [ -n "$necessary_options" ] && echo "  Necessary options: $necessary_options"
  else
    echo -e " <positional parameters>\n\n"
  fi
  exit 0
fi

s_var=`expr "X$ARG" : 'X\([^=]*\)'`
s_value=`expr "X$ARG" : 'X[^=]*=\(.*\)'`

set_var() {
  if [ -n "$uncomment" ] ; then
    sed -i "s|^[[:space:]]*#*[[:space:]]*${s_var}=\(.*\)|${s_var}=&|g" "$conf" && echo "uncommented" && return 0
  fi
  if [ -n "$add" ] ; then
    sed -i "s|^[[:space:]]*${s_var}=\(.*\)|${s_var}=&,${s_val}|g" "$conf" && echo "added" && return 0
  else
    sed -i "s|^[[:space:]]*${s_var}=.*|${s_var}=${s_val}|g" "$conf" && echo "changed" && return 0
  fi
  return 1
}

set_var_table() {
  [ -z "$table" ] && echo "It's a table config, so it requires the option --table to be set" && exit 1
  [ `expr "$table" : ".*[^0-9]"` -ne 0 ] && echo "Option --table requires a number" && exit 1
  [ $table -le 1 ] && echo "Option --table can't be less than 2" && exit 1
  columns=$(for ((i=1; i<$table; i++)); do echo -n "${i},"; done)
  columns="-f${columns%,}"
  confline=`grep "^$s_var|" "$conf" | tail -1`
  varline=`echo "$confline" | cut -d'|' $columns`
  valline=$(for val in `echo "$s_value" | tr ',' ' '`; do echo -n "$val|"; done)
  valline=${valline%|}
  sed -i "/^$s_var|/s/$varline|.*/$varline|$valline/" "$conf" && echo "changed" && return 0
  return 1
}

commonvar=false
if [ `expr "$s_var" : ".*_[0-9]$"` -eq 0 ]; then
  s_value3=`echo "$s_value" | cut -s -d',' -f3`
  if [ -z "$s_value3" -o -n "$table" ]; then
    commonvar=true
  else
    s_value1=`echo "$s_value" | cut -d',' -f1`
    s_value2=`echo "$s_value" | cut -d',' -f2`
    nivar=$s_var
  fi
  if $commonvar ; then
    for conf in `grep -l "${s_var}=" "$M_ROOT/conf"/*.conf` ; do
      echo -n "Found in $conf ...   "
      set_var || exit 1
    done
    for conf in `grep -l "${s_var}=" "$M_ROOT/tests"/*.conf` ; do
      echo -n "Found in $conf ...   "
      set_var || exit 1
    done
    for conf in `grep -l "^${s_var}|" "$M_ROOT/tests"/*.conf` ; do
      echo -n "Found in $conf ...   "
      set_var_table || exit 1
    done
  else
    for ((i=1; i<=3; i++)) ; do
      s_var=${nivar}_$i
      s_val=`eval "echo \\$s_value$i"`
      for conf in `grep -l "${s_var}=" "$M_ROOT/conf"/*.conf` ; do
        echo -n "Found in $conf ...   "
        set_var || exit 1
      done
      for conf in `grep -l "${s_var}=" "$M_ROOT/tests"/*.conf` ; do
        echo -n "Found in $conf ...   "
        set_var || exit 1
      done
    done
  fi

else
  s_val=$s_value
  for conf in `grep -l "${s_var}=" "$M_ROOT/conf"/*.conf` ; do
    echo -n "Found in $conf ...   "
    set_var || exit 1
  done
  for conf in `grep -l "${s_var}=" "$M_ROOT/tests"/*.conf` ; do
    echo -n "Found in $conf ...   "
    set_var || exit 1
  done
fi

exit 0


