#!/bin/bash

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
LOG="$M_ROOT/logs/cloud.log"

debug=false

possible_options="cloud id name ip return verbose cluster help updatelist onlyid log_request"
necessary_options=""

if [ -n "$help" ]; then
  echo "Possible options: $possible_options"
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/functions.sh"
source "$M_ROOT/lib/cloud_functions.sh"
source "$rpath/functions.sh"
LOG="$M_ROOT/logs/cloud.log"
keep_response=true
[ -n "$name_source" ] && NAME_SOURCE=$name_source
[ -z "$NAME_SOURCE_FALLBACK" ] && NAME_SOURCE_FALLBACK=metadata
[ -z "$CLUSTER_TAG" ] && CLUSTER_TAG="cluster"
get_opts "$@"

export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

declare -i icount
[ -n "$all" ] && cluster=all
[ -n "$forceupdate" ] && unset noupdate # for compatibility
if [ -n "$cluster" ]; then
  if [ "$cluster" == "all" ]; then
    unset M_CLUSTER
  fi
else
  [ -n "$M_CLUSTER" ] && cluster=$M_CLUSTER
fi

if [ -z "$id" ]; then
  if [ -n "$name" ]; then
    id=`find_id_by_name $name`
  elif [ -n "$ip" ]; then
    id=`find_id_by_ip $ip`
  fi
fi
[ -z "$id" ] && log "node ID not found" && proper_exit 1 71

HTTPMETHOD=GET
SERVICE="droplets/$id"
AUTHMETHOD=header

[ -n "$verbose" ] && log "sending request"
reqparsed=`do_api_request $SERVICE $VERSION $AUTHMETHOD $HTTPMETHOD "" $qparams`
echo "$reqparsed" > "$M_TEMP/cloud/$CLOUD/${rcommand}.resp"
[ `echo "$reqparsed" | grep -v ^$ | wc -l` -eq 0 ] && log "parsed response to $rcommand is empty" && proper_exit 1 79
[ `echo "$reqparsed" | grep -cvE "\/\"droplet\"\/"` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep -cvE "\/\"droplet\"\/"`" && proper_exit 1 80
echo "$reqparsed"
proper_exit 0 82




