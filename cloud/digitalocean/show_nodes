#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
LOG="$M_ROOT/logs/cloud.log"

debug=false

possible_options="cloud help region verbose cluster tag noupdate view update_nodes_list forceupdate all count resolveids name_source log_request"
necessary_options=""

if [ -n "$help" ]; then
  echo "Possible options: $possible_options"
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/functions.sh"
source "$M_ROOT/lib/cloud_functions.sh"
source "$rpath/functions.sh"
LOG="$M_ROOT/logs/cloud.log"
keep_response=true
[ -n "$name_source" ] && NAME_SOURCE=$name_source
[ -z "$NAME_SOURCE_FALLBACK" ] && NAME_SOURCE_FALLBACK=metadata
[ -z "$CLUSTER_TAG" ] && CLUSTER_TAG="cluster"
get_opts "$@"

export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

declare -i icount
[ -n "$all" ] && cluster=all
[ -n "$forceupdate" ] && unset noupdate # for compatibility
if [ -n "$cluster" ]; then
  if [ "$cluster" == "all" ]; then
    unset M_CLUSTER
  fi
else
  [ -n "$M_CLUSTER" ] && cluster=$M_CLUSTER
fi

HTTPMETHOD=GET
SERVICE=droplets
AUTHMETHOD=header

list_nodes() {
  [ "_$view" == "_raw" ] && echo "$reqparsed" && return
  declare -a nodelist
  IFSORIG=$IFS; IFS='
'
  nodes=`echo "$reqparsed" | grep -v "\/\"meta\"\/" | cut -sd'/' -f3-`
  for nodesn in `echo "$nodes" | cut -d'/' -f1 | sort -n | uniq` ; do
    nodeObj=`echo "$nodes" | grep "^$nodesn/"`
    if [ "_$NETWORK" == "_external" ]; then
      nodeIP=`echo "$nodeObj" | readpath - $nodesn/networks/v4 "type|public" "ip_address"`
    else
      nodeIP=`echo "$nodeObj" | readpath - $nodesn/networks/v4 "type|private" "ip_address"`
    fi
    [ -z "$nodeIP" ] && nodeIP=`echo "$nodeObj" | readpath - $nodesn/networks/v4/0/ip_address`
    nodeName=`echo "$nodeObj" | readpath - $nodesn/name`
    nodeRegion=`echo "$nodeObj" | readpath - $nodesn/region/slug`
    if [ -n "$CLUSTER_TAG" ]; then
      nodeCluster=`echo "$nodeObj" | readpath - $nodesn/tags "${CLUSTER_TAG}:" | cut -sd':' -f2 | tail -1`
    elif [ -n "$CLUSTER_TAG_REGEXP" ]; then
      nodeCluster=`expr "$nodeName" : "$CLUSTER_TAG_REGEXP"`
    fi
    if [ -n "$nodeCluster" ]; then
      confClusterObj=`grep ^$nodeCluster\| "$M_ROOT/conf/clusters.conf"`
      if [ -n "$confClusterObj" ] ; then
        key=`echo "$confClusterObj" | cut -d'|' -f2`
        confRegion=`echo "$confClusterObj" | cut -d'|' -f3`
        [ "_$confRegion" != "_$nodeRegion" ] && log "Cluster of node $nodeName is ${nodeCluster}, but region of $nodeCluster must be $confRegion" && continue
        check_super_cluster $ip "$nodeCluster" && continue
        nodelist+=("$nodeIP|$key|$nodeRegion|$nodeName|$nodeCluster|$CLOUD")
      elif [ -n "$all" ]; then
        nodelist+=("$nodeIP||$nodeRegion|$nodeName||$CLOUD")
      fi
    elif [ -n "$all" ]; then
      nodelist+=("$nodeIP||$nodeRegion|$nodeName||$CLOUD")
    fi
  done
  if [ -n "$cluster" ] && [ -z "$update_nodes_list" ]; then
    case $view in
    nodelist)
      if [ "$cluster" == "all" ]; then
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done
      else
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done | grep "|$cluster|$CLOUD$"
      fi
      ;;
    *)
      if [ "$cluster" == "all" ]; then
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done
      else
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done | grep "|$cluster|$CLOUD$"
      fi
      ;;
    esac
  fi
  if [ -n "$update_nodes_list" ]; then
    if [ ${#nodelist[*]} -eq 0 ]; then
      log "generated list is empty"
      echo -n > "$M_ROOT/cloud"/nodes.list.${CLOUD}
    else
      log "saving generated list (${#nodelist[*]} nodes)"
      for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done > "$M_ROOT/cloud/nodes.list.${CLOUD}"
    fi
  fi
  IFS=$IFSORIG
}

qparams="per_page=100"
if [ -z "$noupdate" ]; then
  [ -n "$verbose" ] && log "sending request"
  reqparsed=`do_api_request $SERVICE $VERSION $AUTHMETHOD $HTTPMETHOD "" $qparams`
  echo "$reqparsed" > "$M_TEMP/cloud/$CLOUD/${rcommand}.resp"
  [ `echo "$reqparsed" | grep -v ^$ | wc -l` -eq 0 ] && log "parsed response to $rcommand is empty" && proper_exit 1 138
  [ `echo "$reqparsed" | grep -cvE "\/\"droplets\"\/|\/\"meta\"\/"` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 139
else
  # force update if the tmp file is older than FORCE_LIST_UPDATE_AFTER
  # if no setting, force update is disabled
  if [ -n "$FORCE_LIST_UPDATE_AFTER" ]; then
    tmpfileage=$(expr `date +"%s"` - `stat -c "%Z" "$M_TEMP/cloud/$CLOUD/${rcommand}.resp" || echo 0`)
    [ $tmpfileage -gt $FORCE_LIST_UPDATE_AFTER ] && unset noupdate
  fi
  [ -n "$verbose" ] && log "not sending request: noupdate is set, using existing data"
  [ ! -e "$M_TEMP/cloud/$CLOUD/${rcommand}.resp" ] && echo "No existing data found, run without --noupdate" && log "file $M_TEMP/cloud/$CLOUD/${rcommand}.resp not found" && proper_exit 1 148
  [ `cat "$M_TEMP/cloud/$CLOUD/${rcommand}.resp" | wc -l` -eq 0 ] && echo "No existing data found, run without --noupdate" && log "file $M_TEMP/cloud/$CLOUD/${rcommand}.resp is empty" && proper_exit 1 149
  reqparsed=`cat "$M_TEMP/cloud/$CLOUD/${rcommand}.resp"`
fi

list_nodes

[ -n "$count" ] && echo $icount
proper_exit 0 156




