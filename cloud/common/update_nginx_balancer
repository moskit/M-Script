#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting" && exit 1
possible_options="cluster application cloud help"
necessary_options="cloud cluster"
#[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "$@"
do
  found=0
  case $s_option in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=$s_option
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  cat << "EOF"
Usage: ${0##*/} <options>

Options:

  --cloud=[name]                   - defines cloud to work with.

  --cluster=[name]                 - defines cluster for which balancers
                                     will be updated.
                                     Port number is not needed here!
                                     Port(s) will be taken from
                                     conf/balancers/[clustername].conf.

  --application=[name]             - updates balancer for this application only.
                                     Application name must be present in
                                     conf/balancers/[clustername].conf.

EOF
fi
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

source "$M_ROOT/conf/balancers/${cluster}.conf"
source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/lib/cloud_functions.sh"

for var in BALANCER_PORTS NGINX_PROXY_CLUSTER_CONF_DIR NGINX_RC_SCRIPT NGINX_RELOAD_COMMAND ; do
  [ -z "`eval echo \\$\$var`" ] && echo "$var is not defined! Define it in conf/balancers/[clustername].conf please." && exit 1
done

M_TEMP="$M_TEMP/cloud/$cloud"
[ -d "$NGINX_PROXY_CLUSTER_CONF_DIR" ] && install -d "$NGINX_PROXY_CLUSTER_CONF_DIR"

for appport in `echo "$BALANCER_PORTS" | tr ',' ' '` ; do

  app=`echo "$appport" | cut -s -d':' -f1`
  PORT=`echo "$appport" | cut -s -d':' -f2`
  [ -z "$app" ] && log "application name is empty in BALANCER_PORTS=$appport for cluster $cluster" && continue
  [ -z "$port" ] && log "port number is empty in BALANCER_PORTS=$appport for cluster $cluster" && continue

  ips=`get_ips --cloud=$cloud --cluster=$cluster`
  if [ -n "$ips" ]; then
    case $BALANCE_METHOD in
      sticky|ip_hash|hash)
        balance_method="ip_hash"
        ;;
      *)
        unset balance_method
        ;;
    esac
    echo "upstream $app {" > "$NGINX_PROXY_CLUSTER_CONF_DIR/${app}.conf"
    [ -n "$balance_method" ] && echo "  ${balance_method};" >> "$NGINX_PROXY_CLUSTER_CONF_DIR/${app}.conf"
    for IP in `echo "$ips"` ; do
      echo "  server ${IP}:${port};" >> "$NGINX_PROXY_CLUSTER_CONF_DIR/${app}.conf"
    done
    echo "}">> "$NGINX_PROXY_CLUSTER_CONF_DIR/${app}.conf"
  fi

done

$NGINX_RC_SCRIPT $NGINX_RELOAD_COMMAND

