#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting" && exit 1
possible_options="cloud cluster application help"
necessary_options=""

for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  cat << "EOF"
Usage: ${0##*/} <options>

Options:

  --cloud=[name1<,name2,...>]      - defines cloud(s) to work with. Balancers
                                     for the clusters in those clouds not
                                     defined here will not be updated.

  --cluster=[name1<,name2,...>]    - defines cluster(s) for which balancers
                                     will be updated.
                                     Port number is not needed here!
                                     Port(s) will be taken from
                                     conf/balancers/[clustername].conf.
                                     Use --cluster=all to update balancers for
                                     all available clusters for the defined
                                     cloud(s).

  --application=[application name] - updates balancer for this application only.
                                     Application name must be present in
                                     conf/balancers/[clustername].conf.
EOF
  exit 0
fi
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -z "$cluster" ] && cluster=$M_CLUSTER
[ -z "$cluster" ] && echo "cluster is not defined" && exit 1

source "$M_ROOT/conf/balancers/${cluster}.conf"
source "$M_ROOT/conf/mon.conf"

[ -z "$BALANCER_PORTS" ] && echo "BALANCER_PORTS is empty" && exit 1

M_TEMP="$M_TEMP/cloud/$cloud"
install -d $M_TEMP

IFS='
'

case $BALANCER_TYPE in
nginx)
  "$rpath"/update_nginx_balancer --cloud=$cloud --cluster="$cluster"
  [ $? -ne 0 ] && log "error updating balancer" && exit 1
  ;;
*)
  echo "balancer type $BALANCER_TYPE is not supported" && exit 1
  ;;
esac

exit 0

done
