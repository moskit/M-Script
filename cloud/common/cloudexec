#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/

[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
source "$M_ROOT/conf/mon.conf" || exit 99
if [ -n "$CLOUD" ]; then
  source "$M_ROOT/conf/clouds/${CLOUD}.conf" || exit 99
fi

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "ssh utility not found, exiting" && exit 1
[ -n "$SSHPORT" ] || SSHPORT=22
[ -n "$CONNECT_TIMEOUT" ] && TIMEOUT="-o ConnectTimeout=$CONNECT_TIMEOUT"
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`

cleanup() {
  if [ "_$threaded" == "_yes" ]; then
    for ((i=0; i<$n; i++)) ; do
      if [ -n "${pid[$n]}" ]; then
        [ -d /proc/${pid[$n]} ] && kill ${pid[$n]}
        sleep 1
        if [ -d /proc/${pid[$n]} ]; then
          sleep 10
          kill -6 ${pid[$n]} 2>/dev/null
        fi
        if [ -d /proc/${pid[$n]} ]; then
          sleep 3
          kill -9 ${pid[$n]} 2>/dev/null
        fi
        unset pid[$n] res[$n]
      fi
      [ -f "$M_TEMP/$$.$i" ] && cat "$M_TEMP/$$.$i" && rm -f "$M_TEMP/$$.$i"
    done
  fi
}

remote_exec() {
  if [ "_$verbose" == "_yes" ] ; then
    echo -e "\n=  Node: $nodename ($IP)  Cluster: $CLUSTER"
  fi
  if [ `echo "$localip" | grep -c "^$IP$"` -ne 0 ] ; then
    [ -z "$nolocalhost" ] && eval "$command"
  else
    KEY=`$M_ROOT/helpers/find_key node $IP`
    [ $? -ne 0 ] && echo "Key not found for IP $IP" && continue
    if [ "_$nosudo" == "_yes" ]; then
      $SSH $TIMEOUT -i "$KEY" -p $SSHPORT "$SSH_REMOTE_USER"@"$IP" \(test -e "$M_ROOT_REMOTE/m.rc" \&\& source "$M_ROOT_REMOTE/m.rc" \; export ip=$IP \; "$command"\)
    else
      $SSH $TIMEOUT -i "$KEY" -p $SSHPORT "$SSH_REMOTE_USER"@"$IP" sudo bash -c \"test -e \\\"$M_ROOT_REMOTE/m.rc\\\" \&\& source \\\"$M_ROOT_REMOTE/m.rc\\\" \; export ip=$IP \; "$command"\"
    fi
  fi
}

possible_options="cluster help region verbose limit ip nolocalhost user nosudo cloud threaded"
commflag=0
for s_option in "$@"
do
  case $s_option in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command $s_option"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command $s_option"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    commflag=1
    command="$command $s_option"
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command $s_option"
    else
      commflag=1
      command="$s_option"
    fi
    ;;
  esac
  for option in $possible_options; do 
    [ "_$s_optname" == "_$option" ] && eval "$option=$s_optarg"
  done
  found=false
  for option in $possible_options; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "_$help" == "_yes" ] ; then
  cat <<"EOF"
Usage: ${0##*/} <options> command

Executes command on remote nodes. The list of nodes is defined by either
command-line arguments or environment variables.

Any option can be passed as environment variable of the same name.

Options:

  --cloud=[cloud name]     - limits operations by this cloud. Multiple clouds
                             are allowed, separated by comma.
  --cluster=[cluster name] - the command will be executed on all nodes
                             from this cluster. Multiple clusters are
                             allowed, separated by comma.
                             MUST be defined. To execute the command on all
                             nodes, use --cluster=all. Accepts also M_CLUSTER
                             environment variable (used by msh).
  --all                    - shortcut for --cluster=all.
  --region=[region]        - the command will be executed on all nodes from
                             this region.
  --ip=IP                  - executes the command on a single node. This
                             allows other scripts to include this one the
                             way that makes possible to apply it to a single
                             node or multiple nodes depending on which
                             variables are defined. With this option non-empty,
                             cluster and region are ignored.
  --verbose                - shows each node details before running the
                             command.
  --limit=N                - executes the command on first N nodes of each
                             cluster defined by the --cluster option
  --user=[username]        - connects to remote nodes as user [username] and
                             executes all commands via sudo. Default user is
                             root.
  --nosudo                 - if user is defined, executes commands without sudo.
                             If user is not defined, does nothing.
  --threaded               - executes commands on multiple nodes in parallel.

EOF
  exit 0
fi

trap cleanup EXIT

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && CLOUD=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
declare -i result
result=0

for cld in $CLOUD ; do

  localip=`"$M_ROOT/helpers"/localips 2>/dev/null`
  if [ -n "$ip" ] ; then
    cluster= ; region=
    if [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] ; then
      # if name passed as ip
      if [ `cat "$M_ROOT/nodes.list" | cut -d'|' -f4 | grep -c "$ip"` -ne 1 ] ; then
        "$rpath"/find_node --cloud=$cld --ip=$ip --updatelist
        [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] && "$rpath"/find_node --cloud=$cld --name=$name --updatelist
      fi
    fi
    # again
    if [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] ; then
      # maybe name passed as ip
      if [ `cat "$M_ROOT/nodes.list" | cut -d'|' -f4 | grep -c "$ip"` -ne 1 ] ; then
        echo "Unable to find $ip in cloud $cld"
        exit 1
      else
        ip=`cat "$M_ROOT/nodes.list" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | grep "|${cld}$" | cut -d'|' -f1,4 | grep "|${ip}$" | cut -d'|' -f1`
        [ -z "$ip" ] && echo "Was unable to find IP by node name." && exit 1
      fi
    else
      # cluster is still needed in some cases
      node=`grep "|${cld}$" "$M_ROOT/nodes.list" | grep "^$ip|"`
      cluster=`echo "$node" | cut -d'|' -f5`
      region=`echo "$node" | cut -d'|' -f3`
    fi
  fi

  [ -n "$all" ] && cluster=all
  [ -z "$cluster" ] && cluster=$M_CLUSTER
  [ -z "$cluster" ] && echo -e "No clusters found.\n$rcommand uses environment variable M_CLUSTER, use command-line option --cluster to override it.\nUse --cluster=all to address all clusters in the cloud (or in all clouds if cloud is not set)." && exit 1

  [ "$cluster" == "all" ] && clusters=`cat "$M_ROOT/nodes.list" | grep "|${cld}$" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | cut -d'|' -f5 | sort | uniq | grep -v "^${SUPER_CLUSTER}$"` || clusters=$cluster

  declare -i n
  IFS1=$IFS
  IFS='
  '
  [ -n "$verbose" ] && echo -e "### Cloud $cld\n    Command: $command"
  if [ -n "$command" ] ; then
    for icluster in `echo -e "${clusters}\n"|sed 's|,|\n|g'` ; do
      [ `cat "$M_ROOT/conf/clusters.conf" | cut -sd'|' -f1,12 | grep "|${cld}$" | cut -d'|' -f1 | grep -c "^${icluster}$"` -eq 0 ] && echo "Cluster $icluster not found" && continue
      unset SSH_REMOTE_USER nosudo
      [ -n "$user" ] && SSH_REMOTE_USER="$user"
      [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^[[:space:]]*$|^[[:space:]]*#" | grep "^$icluster|" | cut -s -d'|' -f13`
      [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root" && nosudo="yes"
      n=0
      unset CLUSTER KEY REGION NAME M_ROOT_REMOTE
      M_ROOT_REMOTE=`grep ^$icluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f8`
      
      nodelist=`cat "$M_ROOT/nodes.list" | grep "|${cld}$" | grep -vE "^[[:space:]]*$|^[[:space:]]*#"`
      for nodename in `echo "$nodelist" | cut -d'|' -f4 | sort | uniq` ; do
        node=`echo "$nodelist" | grep "|$nodename|"`
        if [ `echo "$node" | wc -l` -gt 1 ]; then
          echo "more than one node named $nodename is found:"
          for s in `echo "$node"` ; do
            echo "$s"
          done
        fi
        for s in `echo "$node"` ; do
          [ -n "$limit" ] && [[ $n -ge $limit ]] && break
          IP=${s%%|*}
          if [ -n "$ip" ] ; then
            [ "_$ip" == "_$IP" ] || continue
          fi
          if [ -n "$region" ] ; then
            REGION=`echo $s | cut -d'|' -f3`
            [ "_$REGION" == "_$region" ] || continue
          fi
          CLUSTER=`echo $s | cut -d'|' -f5`
          # if node's cluster is not found, it's a bug, but it's a good idea to
          # still show it in the output when --cluster=all
          if [ -z "$CLUSTER" ]; then
            [ "$cluster" == "all" ] || continue
          else
            [ "$CLUSTER" == "$icluster" ] || continue
          fi
          if [ "_$threaded" == "_yes" ]; then
            #res[$n]=$(remote_exec) 2>&1 </dev/null &
            (remote_exec > "$M_TEMP/$$.$n" 2>&1 || echo "ERROR") &
            pid[$n]=$!
          else
            remote_exec
            result+=$?
          fi
          n+=1
        done
      done
      if [ "_$threaded" == "_yes" ]; then
        for ((i=0; i<$n; i++)); do
          while true ; do
            # always waiting here, for forced exit see cleanup()
            while [ -d /proc/${pid[$i]} ]; do
              sleep 1
            done
            cat "$M_TEMP/$$.$i" && rm -f "$M_TEMP/$$.$i"
            unset pid[$i]
            break
          done
        done
      fi
    done
  fi
  IFS=$IFS1

done

exit $result

