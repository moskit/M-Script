#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
source "$M_ROOT/conf/mon.conf" || exit 99
if [ -n "$CLOUD" ]; then
  source "$M_ROOT/conf/clouds/${CLOUD}.conf" || exit 99
fi

RSYNC=`which rsync 2>/dev/null`
SCP=`which scp 2>/dev/null`
if [ -z "$RSYNC" ] ; then
  echo "Rsync utility not found, trying scp"
  if [ -n "$SCP" ] ; then
    echo "Using scp"
  else
    echo "Neither rsync nor scp is found. Exiting" && exit 1
  fi
fi

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "SSH utility not found, exiting" && exit 1
[ -n "$SSHPORT" ] || SSHPORT=22
[ -n "$CONNECT_TIMEOUT" ] && TIMEOUT="-o ConnectTimeout=$CONNECT_TIMEOUT"
declare -i RETVAL
RETVAL=0

cleanup() {
  if [ "_$threaded" == "_yes" ]; then
    for ((i=0; i<$n; i++)) ; do
      if [ -n "${pid[$n]}" ]; then
        [ -d /proc/${pid[$n]} ] && kill ${pid[$n]}
        sleep 1
        if [ -d /proc/${pid[$n]} ]; then
          sleep 10
          kill -6 ${pid[$n]} 2>/dev/null
        fi
        if [ -d /proc/${pid[$n]} ]; then
          sleep 3
          kill -9 ${pid[$n]} 2>/dev/null
        fi
        unset pid[$n] res[$n]
      fi
      [ -f "$M_TEMP/$$.$i" ] && cat "$M_TEMP/$$.$i" && rm -f "$M_TEMP/$$.$i"
    done
  fi
}

remote_sync() {
  if [ "_$verbose" == "_yes" ] ; then
    NAME=`echo $node | cut -d'|' -f4`
    echo
    echo "=  Node: $NAME ($IP)  Cluster: $CLUSTER"
  fi
  if [ `echo "$localip" | grep -c "^$IP$"` -ne 0 ] ; then
    if [ -z "$nolocalhost" ]; then
      [ "$from" != "$to" ] && cp -up $from $to || echo "Same file, skipping"
    fi
  else
    KEY=`$M_ROOT/helpers/find_key node $IP` || continue
    if [ -n "$RSYNC" ] ; then
      $RSYNC -l $recursive -e "$SSH $TIMEOUT -i \"$KEY\" -p $SSHPORT" "${from%/}" "$SSH_REMOTE_USER"@"${IP}:${to}"
      [ $? -eq 0 ] && echo "Success" && continue
    fi
    printf "Rsync failed or not found, trying scp ...  "
    $SCP $TIMEOUT -i "$KEY" -P $SSHPORT -p $recursive "$from" "$SSH_REMOTE_USER"@"${IP}:${to}"
    if [ $? -eq 0 ] ; then
      echo "Success"
    else
      echo "ERROR: Unable to cloudsync"
      RETVAL+=1
    fi
  fi
}

possible_options="cluster help region verbose recursive ip nolocalhost user cloud threaded"
commflag=0
for s_option in "${@}"
do
  case $s_option in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    command="$command ${s_option}"
    exit 1
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      commflag=1
      command="${s_option}"
    fi
    ;;
  esac
  for option in `echo $possible_options`; do 
    [ "_$s_optname" == "_$option" ] && eval "$option=${s_optarg}"
  done
  found=false
  for option in $possible_options; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "_$help" == "_yes" ] ; then
  cat <<"EOF"
Usage: ${0##*/} <options> <local path> <remote path>

Rsyncs (or copies over if rsync not found) local path to remote path on remote nodes. The list of target nodes is defined by either command-line arguments or environment variables.

Options:

  --recursive              - recursive sync of directories, implies --delete
  --cluster=clustername    - syncs to all nodes from this cluster.
                             Multiple clusters are allowed, separated by comma.
                             MUST be defined. To sync to all nodes, use 
                             --cluster=all. Accepts also M_CLUSTER environment
                             variable (from msh environment).
  --all                    - shortcut for --cluster=all.
  --ip=IP                  - ip for a single node operation.
                             If ip is defined, cluster and region are ignored.
  --region=region          - syncs to all nodes from this region.
  --verbose                - shows each node details before running
                             the command.
  --user=[username]        - connects to remote nodes as user [username].
                             Default user is root.

EOF
  exit 0
fi

trap cleanup EXIT

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && CLOUD=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^#|^[[:space:]]#|^$" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
localip=`"$M_ROOT/helpers"/localips 2>/dev/null`
  
for cld in $CLOUD ; do

  [ -n "$recursive" ] && recursive="-r"

  if [ -n "$ip" ] ; then
    cluster= ; region=
    if [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] ; then
      # maybe name passed as ip
      if [ `grep "|${cld}$" "$M_ROOT/nodes.list" | cut -d'|' -f4 | grep -c "^${ip}$"` -eq 0 ] ; then
        "$rpath"/find_node --cloud=$cld --ip=$ip --updatelist
        [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] && "$rpath"/find_node --cloud=$cld --name=$name --updatelist
      fi
    fi
    # again
    if [ `grep "|${cld}$" "$M_ROOT/nodes.list" | grep -c "^$ip|"` -eq 0 ] ; then
      # maybe name passed as ip
      if [ `cat "$M_ROOT/nodes.list" | cut -d'|' -f4 | grep -c "$ip"` -ne 1 ] ; then
        echo "Unable to find $ip in cloud $cld"
        exit 1
      else
        ip=`cat "$M_ROOT/nodes.list" | grep -vE "^#|^[[:space:]]#|^$" | grep "|${cld}$" | cut -d'|' -f1,4 | grep "|${ip}$" | cut -d'|' -f1`
        [ -z "$ip" ] && echo "Was unable to find IP by node name." && exit 1
      fi
    else
      # cluster is still needed in some cases
      node=`grep "|${cld}$" "$M_ROOT/nodes.list" | grep "^$ip|"`
      cluster=`echo "$node" | cut -d'|' -f5`
      region=`echo "$node" | cut -d'|' -f3`
    fi
  fi

  [ -n "$all" ] && cluster=all
  [ -z "$cluster" ] && cluster=$M_CLUSTER
  [ -z "$cluster" ] && echo "No clusters found" && exit 1

  [ "_$cluster" == "_all" ] && clusters=`cat "$M_ROOT/nodes.list" | grep "|${cld}$" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*# | cut -d'|' -f5 | sort | uniq | grep -v "^${SUPER_CLUSTER}$"` || clusters=$cluster

  declare -i n
  IFS1=$IFS
  IFS='
  '
  if [ -n "$command" ] ; then
    from=${command%% *}
    ## Deployment system integration ##
    if [ ! -e "$from" ]; then
      source "$M_ROOT/conf/deployment.conf"
      for r in $role $ROLEINCL common ; do
        for f in $flavor common ; do
          from1=`find "$ROLES_ROOT/roles/$r/$f/files/" -maxdepth 1 -name "${from##*/}" \( -type f -o -type l \)`
          [ -e "$from1" ] && break 2
        done
      done
      [ ! -e "$from1" ] && echo "File $from not found" && exit 1
      from=$from1
    fi
    ##
    [ -h "$from" ] && from=`readlink -f "$from"`
    to=${command#* }
    [ -n "$verbose" ] && echo "### Syncing $from to $to"
    for cluster in `printf "${clusters}\n"|sed 's|,|\n|g'` ; do
      n=0
      [ -n "$user" ] && SSH_REMOTE_USER="$user"
      [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^#|^[[:space:]]#|^$" | grep "^$cluster|" | cut -s -d'|' -f13`
      [ -z "$SSH_REMOTE_USER" ] && SSH_REMOTE_USER="root"

      nodelist=`cat "$M_ROOT/nodes.list" | grep "|${cld}$" | grep -vE "^$|^#|^[[:space:]]*#"`
      for nodename in `echo "$nodelist" | cut -d'|' -f4 | sort | uniq` ; do
        node=`echo "$nodelist" | grep "|$nodename|"`
        if [ `echo "$node" | wc -l` -gt 1 ]; then
          echo "more than one node named $nodename is found:"
          for s in `echo "$node"` ; do
            echo "$s"
          done
        fi
        for s in `echo "$node"` ; do
          IP=${s%%|*}
          if [ -n "$ip" ] ; then
            [ "_$IP" == "_$ip" ] || continue
          fi
          if [ -n "$region" ] ; then
            REGION=`echo $s | cut -d'|' -f3`
            [ "_$REGION" == "_$region" ] || continue
          fi
          if [ -n "$cluster" ] ; then
            CLUSTER=`echo $s | cut -d'|' -f5`
            [ "_$CLUSTER" == "_$cluster" ] || continue
          fi
          if [ "_$threaded" == "_yes" ]; then
            #res[$n]=$(remote_exec) 2>&1 </dev/null &
            (remote_sync > "$M_TEMP/$$.$n" 2>&1 || echo "ERROR") &
            pid[$n]=$!
          else
            remote_sync
          fi
          n+=1
        done
      done
      if [ "_$threaded" == "_yes" ]; then
        for ((i=0; i<$n; i++)); do
          while true ; do
            # always waiting here, for forced exit see cleanup()
            while [ -d /proc/${pid[$i]} ]; do
              sleep 1
            done
            cat "$M_TEMP/$$.$i" && rm -f "$M_TEMP/$$.$i"
            unset pid[$i]
            break
          done
        done
      fi
    done
  fi
  IFS=$IFS1
  
done

exit $RETVAL

