#!/bin/bash
# Copyright (C) 2015 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rpath=$(readlink -f "$BASH_SOURCE")
rcommand="${rpath##*/}"
rpath="${rpath%/*}"
[ -n "$M_ROOT" ] || M_ROOT=$(readlink -f "$rpath/../../")
#*/

source "$M_ROOT/lib/functions.sh"

find_clust() {
  clust=`echo -e "$cluster" | tr ',' '\n'`
  [ -z "$clust" ] && clust=$M_CLUSTER
  if [ -z "$clust" ] || [ "_$cluster" == "_all" ]; then
    clust=`cat "$M_ROOT/nodes.list" | grep "|${cld}$" | grep -vE '^$|^#|^[[:space:]]*#' | cut -d'|' -f5 | sort | uniq | grep -v "^${SUPER_CLUSTER}$"`
  fi
  [ -z "$clust" ] && echo "No clusters found" >&2 && return 1
  return 0
}

possible_commands="help list clone create save destroy show stop shutdown start boot reboot restart"
possible_subcommands="list:short,long,name,ip show:short,full"
possible_options="ip name role cluster flavor cloud"

declare -i ppn
ppn=1

commfound=false
subcommfound=false

get_opts $@

if [ -n "$cloud" ]; then
  cloud=`echo -e "$cloud" | tr ',' '\n'`
  if [ "$cloud" == "all" ]; then
    cloud=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
  fi
elif [ -n "$CLOUD" ]; then
  cloud=$CLOUD
else
  cloud=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
fi

[ -z "$command1" ] && command1=help

IFS='
'
case $command1 in
  list)
    if [ "_$command2" == "_long" ]; then
      COL=`tput cols`
      [ -n "$COL" ] && col=$((COL/4)) || col=20
      printcol "Node"
      printcol "IP"
      printcol "Cluster"
      echo "Cloud"
      printf "%${COL}s\n" | tr ' ' '-'
      
      for cld in $cloud ; do
        
        find_clust || continue

        for cl in `echo -e "$clust"` ; do
        
          nodes=`grep -E "\|$cl\|$cld$|\|$cl\|$cld\|$" "$M_ROOT"/nodes.list`
          
          for node in $nodes ; do
            nodeip=`echo "$node" | cut -d'|' -f1`
            nodename=`echo "$node" | cut -d'|' -f4`
            printcol "$nodename"
            printcol "$nodeip"
            printcol "$cl"
            echo "$cld"
          done
          
        done
        
      done
    else
      for cld in $cloud ; do
        
        find_clust || continue
        
        for cl in `echo -e "$clust"` ; do
          nodes=`grep -E "\|$cl\|$cld$|\|$cl\|$cld\|$" "$M_ROOT"/nodes.list`
          if [ -z "$command2" ] || [ "_$command2" == "_name" ]; then
            echo "$nodes" | cut -d'|' -f4 | grep -v ^$
          fi
          if [ "_$command2" == "_ip" ]; then
            echo "$nodes" | cut -d'|' -f1 | grep -v ^$
          fi
        done
      done
    fi
    ;;
  show)
    "$rpath"/get_node_details $dashoptions $@
    ;;
  create)
    "$rpath"/create_node $dashoptions $@
    ;;
  destroy)
    "$rpath"/destroy_node $dashoptions $@
    ;;
  save)
    "$rpath"/save_node $dashoptions $@
    ;;
  stop|shutdown)
    if [ -n "$ip" ]; then
      "$M_ROOT"/helpers/mssh $ip poweroff
      stopres=$?
    elif [ -n "$name" ]; then
      "$M_ROOT"/helpers/mssh $name poweroff
      stopres=$?
    else
      stopres=1
    fi
    if [ $stopres -eq 1 ]; then
      "$M_ROOT"/cloud/common/stop_node $dashoptions && exit 0
    fi
    ;;
  start|boot)
    "$M_ROOT"/cloud/common/start_node $dashoptions && exit 0
    # TODO find_by_id
    if [ -n "$ip" ] || [ -n "$name" ]; then
      sleep 10
      log "Waiting for node ${ip}${name} up..."
      waittimeout=1200
      waitperiod=10
      checks=`expr $waittimeout / $waitperiod`
      for ((i=1; i<$checks; i++)) ; do
        sleep $waitperiod
        "$M_ROOT"/helpers/mssh ${ip}${name} true && break
      done
    fi
    ;;
  restart|reboot)
    if [ -n "$ip" ]; then
      "$M_ROOT"/helpers/mssh $ip reboot
      restartres=$?
    elif [ -n "$name" ]; then
      "$M_ROOT"/helpers/mssh $name reboot
      restartres=$?
    else
      restartres=1
    fi
    if [ $restartres -eq 1 ]; then
      if [ -n "$id" ]; then
        "$M_ROOT"/cloud/common/restart_node --id=$id && exit 0
      elif [ -n "$ip" ]; then
        "$M_ROOT"/cloud/common/restart_node --id=$ip && exit 0
      elif [ -n "$name" ]; then
        "$M_ROOT"/cloud/common/restart_node --id=$name && exit 0
      fi
    fi
    if [ -n "$ip" ] || [ -n "$name" ]; then
      sleep 10
      waittimeout=1200
      waitperiod=10
      checks=`expr $waittimeout / $waitperiod`
      for ((i=1; i<$checks; i++)) ; do
        sleep $waitperiod
        "$M_ROOT"/helpers/mssh ${ip}${name} && break
      done
    fi
    ;;
  *)
    echo "Command $command1 is not supported"
    ;;
esac

