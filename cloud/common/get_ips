#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

SSH=`which ssh 2>/dev/null`
possible_options="cluster help region delimiter limit names quoted spaces thishost private public local nolocal cloud"
IFS1=$IFS
IFS='-'
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /-/g'`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"
  echo 
  echo "Without options all found clusters will be synced"
  echo
  echo "Options:"
  echo
  echo "  --region=region          - syncs only servers in this region."
  exit 0
fi

source "$M_ROOT/lib/cloud_functions.sh"

[ -n "$public" -a -n "$private" ] && unset public private
[ -n "$thishost" ] && local="yes"

if [ -n "$local" -o -n "$nolocal" ] ; then
  IFCFG=`which ifconfig 2>/dev/null`
  if [ -n "$IFCFG" ] ; then
    localips=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'`
  else
    IFCFG=`which ip 2>/dev/null`
    [ -n "$IFCFG" ] && localips=`$IFCFG addr list | grep 'inet.*scope\ global' | while read L ; do expr "$L" : 'inet \(.*\)/' ; done`
  fi
fi

if [ -n "$cloud" ]; then
  cloud=`echo -e "$cloud" | tr ',' '\n'`
elif [ -n "$CLOUD" ]; then
  cloud=$CLOUD
else
  cloud=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
fi

for cld in $cloud ; do

  if [ -n "$local" ] ; then
    unset cluster
    IPS=$localips
  else
    IPS=`cat "$M_ROOT/servers.list" | grep -vE "^$|^#|^[[:space:]]*#" | grep "|${cld}$"`
    [ -n "$nolocal" ] && localgrep=`echo -n "$localips" | tr '\n' '|'` && IPS=`echo "$IPS" | grep -vE "$localgrep"`
    cluster=`echo -e $cluster | tr ',' '\n'`
    [ -n "$all" ] && cluster=all
    [ "x$cluster" == "xall" ] && cluster=`cat "$M_ROOT/servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*# | cut -d'|' -f5 | sort | uniq | grep -v "^${SUPER_CLUSTER}$"`
    [ -z "$cluster" ] && cluster=$M_CLUSTER
    [ -z "$cluster" ] && echo "No clusters found" && exit 1
  fi

  IFSORIG=$IFS
  IFS='
'
  declare -i n
  n=1
  [ -n "$delimiter" ] && [ -n "$spaces" ] && delimiter="$delimiter "
  for server in $IPS ; do
    list=false
    IP=${server%%|*}
    if [ -n "$public" -o -n "$private" ]; then
      ipchk=`expr "$IP" : '\(10\..*\..*\..*\|192\.168\..*\..*\|172\.1[6-9]\..*\..*\|172\.2[0-9]\..*\..*\|172\.3[0-1]\..*\..*\)'`
      [ -n "$private" ] && [ -z "$ipchk" ] && continue
      [ -n "$public" ] && [ -n "$ipchk" ] && continue
    fi
    if [ -n "$region" ] ; then
      REGION=`echo $server | cut -d'|' -f3`
      [ "X$REGION" == "X$region" ] || continue
    fi
    if [ -n "$cluster" ] ; then
      for cl in $cluster ; do
        CLUSTER=`echo $server | cut -d'|' -f5`
        [ "X$CLUSTER" == "X$cl" ] && list=true && break
      done
      $list || continue
    fi
    if [ -n "$names" ] ; then
      find_name $IP
      if [ -z "$rname" ] ; then
        KEY=`find server $IP`
        [ -n "$SSH" ] && rname=`$SSH -i "$KEY" -o ConnectionAttempts=1 -o ConnectTimeout=5 $IP hostname 2>/dev/null`
      fi
      [ -n "$rname" ] && IP=$rname
    fi
    if [ -n "$delimiter" ] ; then
      if [ -n "$quoted" ] ; then
        ips="${ips}`printf "\\"${IP}\\"$delimiter"`"
      else
        ips="${ips}`printf "${IP}${delimiter}"`"
      fi
    else
      echo $IP
    fi
    n+=1
    [ -n "$limit" ] && [ $n -gt $limit ] && break
  done
  IFS=$IFSORIG

done

[ -n "$ips" ] && echo "$ips" | sed "s|${delimiter}$||" || exit 0

