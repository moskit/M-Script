#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

SSH=`which ssh 2>/dev/null`
possible_options="cluster help region delimiter limit names quoted spaces thishost private public local nolocal cloud verbose"
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /-/g'`; do
    if [ "_$s_optname" == "_$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "_$s_option" == "_$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1
if [ "_$help" == "_yes" ] ; then
  echo "Usage: ${0##*/} <options>"
  echo 
  echo "Without options all found clusters will be synced"
  echo
  echo "Options:"
  echo
  echo "  --region=region          - syncs only servers in this region."
  exit 0
fi

printip() {
  if [ -n "$delimiter" ] ; then
    if [ -n "$quoted" ] ; then
      ips="${ips}`printf "\\"${1}\\"$delimiter"`"
    else
      ips="${ips}`printf "${1}${delimiter}"`"
    fi
  else
    $verbose && echo "    $1" || echo $1
  fi
}

source "$M_ROOT/lib/cloud_functions.sh"

[ -n "$public" -a -n "$private" ] && unset public private
[ -n "$thishost" ] && local="yes"

if [ -n "$local" -o -n "$nolocal" ] ; then
  localips=`localips`
fi

if [ -n "$cloud" ]; then
  cloud=`echo -e "$cloud" | tr ',' '\n'`
  if [ "$cloud" == "all" ]; then
    cloud=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
  fi
elif [ -n "$CLOUD" ]; then
  cloud=$CLOUD
else
  cloud=`cat "$M_ROOT/conf/clusters.conf" | grep -vE "^$|^#|^[[:space:]]*#" | cut -d'|' -f12 | sort | uniq | grep -v ^$`
fi

[ -n "$verbose" ] && [ -z "$delimiter" ] && verbose=true || verbose=false

if [ -n "$local" ] ; then
  unset cluster
  IPS=$localips
  for IP in `echo "$IPS"`; do
    printip "$1"
  done
else
  for cld in $cloud ; do
    $verbose && echo "Cloud: $cld"
    
    cluster=`echo -e "$cluster" | tr ',' '\n'`

    [ "_$cluster" == "_all" ] && cluster=`cat "$M_ROOT/servers.list" | grep "|${cld}$" | grep -vE '^$|^#|^[[:space:]]*#' | cut -d'|' -f5 | sort | uniq | grep -v "^${SUPER_CLUSTER}$"`
    [ -z "$cluster" ] && cluster=$M_CLUSTER
    [ -z "$cluster" ] && echo "No clusters found" && continue

    IFSORIG=$IFS
    IFS='
  '
    declare -i n
    n=1
    [ -n "$delimiter" ] && [ -n "$spaces" ] && delimiter="$delimiter "
    for cl in `echo -e "$cluster"` ; do
      $verbose && echo "  Cluster: $cl"
      IPS=`cat "$M_ROOT/servers.list" | grep -vE "^$|^#|^[[:space:]]*#" | cut -sd'|' -f1,5 | grep "|${cl}$" | cut -sd'|' -f1`
      [ -n "$nolocal" ] && localgrep=`echo -n "$localips" | sed 's_^_\^_;s_$_\$_' | tr '\n' '|'` && IPS=`echo "$IPS" | grep -vE "$localgrep"`
      
      for IP in `echo "$IPS"`; do
      
      if [ -n "$public" -o -n "$private" ]; then
        ipchk=`expr "$IP" : '\(10\..*\..*\..*\|192\.168\..*\..*\|172\.1[6-9]\..*\..*\|172\.2[0-9]\..*\..*\|172\.3[0-1]\..*\..*\)'`
        [ -n "$private" ] && [ -z "$ipchk" ] && continue
        [ -n "$public" ] && [ -n "$ipchk" ] && continue
      fi

      if [ -n "$names" ] ; then
        rname=`find_name $IP`
        if [ -z "$rname" ] ; then
          KEY=`find_key server $IP`
          [ -n "$SSH" ] && [ -f "$KEY" ] && rname=`$SSH -i "$KEY" -o ConnectionAttempts=1 -o ConnectTimeout=5 $IP hostname 2>/dev/null`
        fi
        [ -n "$rname" ] && IP=$rname
      fi

      printip "$IP"

      n+=1
      [ -n "$limit" ] && [ $n -gt $limit ] && break
    done
    IFS=$IFSORIG

  done
fi
[ -n "$ips" ] && echo "$ips" | sed "s|${delimiter}$||" || exit 0

