#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

possible_options="id name ip return verbose"
necessary_options=""

GNTI=`which gnt-instance 2>/dev/null`
ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

source "$M_ROOT/conf/cloud.conf"
source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP/cloud/ganeti"
install -d "$M_TEMP"

source "$M_ROOT/lib/cloud_functions.sh"

request() {
rm -f "$M_TEMP/${rcommand}.resp"
IFS1=$IFS
IFS='
'
for L in `$GNTI info "$name" 2>/dev/null` ; do
#echo "    sect: $sect   subsect: $subsect"
  e1=`expr "$L" : '^[[:space:]]*[A-Z]'`
  e2=`expr "$L" : '^[[:space:]]*-\ [a-zA-Z]'`
  e3=`expr "$L" : '^[[:space:]]*[a-z]'`
#echo "=== $e1 $e2 $e3 ::: \"$L\""
  [ $e1 -lt 7 -a $e1 -gt 0 ] && unset subvar
  [ $e2 -eq 3 ] && sect=`echo "$L" | cut -d: -f1 | sed 's|^- ||'` && subvalue=`echo $L | cut -sd: -f2 | sed 's|^ *||'` # && echo "    e33 :: $sect :: $subvalue"
  [ $e1 -eq 1 ] && sect=`echo "$L" | cut -d: -f1` && subvalue=`echo $L | cut -sd: -f2 | sed 's|^ *||'` # && echo "    e11 :: $sect :: $subvalue"
  [ $e1 -eq 3 ] && subsect=`echo "$L" | cut -d: -f1 | sed 's|^ *||'` && subvalue=`echo $L | cut -sd: -f2 | sed 's|^ *||'` # && echo "    e13 :: $sect :: $subvalue"
  if [ -n "$subsect" ]; then
    [ -n "$subvalue" ] && echo "\"${sect}\"/\"${subsect}\"|\"$subvalue\"" && unset subvalue && continue
  else
    [ -n "$subvalue" ] && echo "\"${sect}\"|\"$subvalue\"" && unset subvalue && continue
  fi
  if [ -n "$all" -o "x$subsect" != "xHypervisor" ]; then
    [ $e2 -gt 3 ] && var=${L%%:*} && var=`expr "$var" : '^[ -]*\([a-z]*.*\)$'` && value="${L#*: }"
    [ "x$value" == "x$L" ] && unset value
    [ $e2 -eq 7 ] && subvar=$var
    [ -n "$value" -a $e2 -eq 7 ] && echo "\"${sect}\"/\"${subsect}\"/\"$var\"|\"$value\"" && unset var value && continue
    if [ -n "$subvar" ]; then
      [ $e2 -eq 9 ] && (for v in `echo "$value" | sed 's|, |\n|g;s|^[[:space:]]||g;s|\[||g;s|\]||g' | sed "s|'||g"`; do vvar="${v%%:*}"; vval="${v#*: }"; [ "x$vval" != "x$v" ] && echo "\"${sect}\"/\"${subsect}\"/\"$subvar\"/\"$var\"/\"$vvar\"|\"$vval\"" || echo "\"${sect}\"/\"${subsect}\"/\"$subvar\"/\"$var\"|\"$v\""; unset vvar vval; done) && unset var value && continue
     [ $e3 -gt 3 ] && var="${L%%:*}" && var=`expr "$var" : '^[ -]*\([a-z]*.*\)$'` && value="${L#*: }" && (for v in `echo "$value" | sed 's|, |\n|g;s|^[[:space:]]||g;s|\[||g;s|\]||g' | sed "s|'||g"`; do vvar="${v%%:*}"; vval="${v#*: }"; [ "x$vval" != "x$v" ] && echo "\"${sect}\"/\"${subsect}\"/\"$subvar\"/\"$var\"/\"$vvar\"|\"$vval\"" || echo "\"${sect}\"/\"${subsect}\"/\"$subvar\"/\"$var\"|\"$v\""; unset vvar vval; done) && unset var value
    else
     [ $e2 -eq 9 ] && (for v in `echo "$value" | sed 's|, |\n|g;s|^[[:space:]]||g;s|\[||g;s|\]||g' | sed "s|'||g"`; do vvar="${v%%:*}"; vval="${v#*: }"; [ "x$vval" != "x$v" ] && echo "\"${sect}\"/\"${subsect}\"/\"$var\"/\"$vvar\"|\"$vval\"" || echo "\"${sect}\"/\"${subsect}\"/\"$var\"|\"$v\""; unset vvar vval; done) && unset var value && continue
     [ $e3 -gt 3 ] && var="${L%%:*}" && var=`expr "$var" : '^[ -]*\([a-z]*.*\)$'` && value="${L#*: }" && (for v in `echo "$value" | sed 's|, |\n|g;s|^[[:space:]]||g;s|\[||g;s|\]||g' | sed "s|'||g"`; do vvar="${v%%:*}"; vval="${v#*: }"; [ "x$vval" != "x$v" ] && echo "\"${sect}\"/\"${subsect}\"/\"$var\"/\"$vvar\"|\"$vval\"" || echo "\"${sect}\"/\"${subsect}\"/\"$var\"|\"$v\""; unset vvar vval; done) && unset var value
    fi
  fi
done  > "$M_TEMP/${rcommand}.resp"

IFS=$IFS1

}
lock_cloudops || exit 10
if [ -z "$name" ]; then
  if [ -n "$id" ]; then
    name=`$GNTI list --separator='|' --no-headers -o uuid,name | grep "^${id}|" | cut -d'|' -f2`
  elif [ -n "$ip" ]; then
    name=`$GNTI list --separator='|' --no-headers -o nic.ip/0,name | grep "^${ip}|" | cut -d'|' -f2`
  else
    echo "One of --ip, --id or --name is required to identify the instance"
    proper_exit 1 95
  fi
fi

request
if [ -z "$return" ]; then
  cat "$M_TEMP/${rcommand}.resp" || proper_exit 1 101
else
  case $return in
  os)
    pattern="State/Operating system|"
    ;;
  cpu|cpus)
    pattern="State/Hardware/VCPUs|"
    ;;
  memory)
    pattern="State/Hardware/memory|"
    ;;
  nic|nics)
    pattern="State/Hardware/NICs/nic/"
    ;;
  disk|disks)
    pattern="State/Disks/disk/"
    ;;
  *)
    pattern="$return|"
    ;;
  esac
  cat "$M_TEMP/${rcommand}.resp" | grep "^${pattern}" | sed "s_^${pattern}__g" || proper_exit 1 123
fi

proper_exit 0 126

