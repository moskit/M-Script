#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

QEMU_IMG=`which qemu-img 2>/dev/null`
[ -z "$QEMU_IMG" ] && echo "qemu-img utility is not found" >&2 && exit 1

LOSETUP=`which losetup 2>/dev/null`
GI=`which gnt-instance 2>/dev/null`
[ -z "$LOSETUP" ] && echo "no losetup found" && exit 1
[ -z "$GI" ] && echo "no gnt-instance found" && exit 1

possible_options="cloud name ip id imagename help verbose"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=0
  case $s_option in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=$s_option
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/ /-/g'`; do
    if [ "X$s_optname" == "X$option" ]; then
      if [ -n "$s_optarg" ]; then
        eval "$s_optname=\"$s_optarg\""
      else
        [ -z "$(eval echo \$$option)" ] && eval "$option="
      fi
      found=1
    fi
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
  if [ -n "$s_param" ]; then
    if [ -n "$params" ]; then
      params="$params $s_param"
    else
      params="$s_param"
    fi
    unset s_param
  fi
done
IFS=$IFS1
if [ "X$help" == "Xyes" ] ; then
  cat <<"EOF"
Usage: save_server <options> or save_server <options> [image name]

Image name can be defined as a long-option --imagename or as a positional parameter

Options:

  --name=NAME              - name of the source instance
  --ip=IP                  - ip of the source instance
  --id=NAME                - for compatibility; same as name in Ganeti
  --cluster=CLUSTER        - save under name of the base image of this cluster
                             (as defined in conf/clusters.conf)
  --verbose                - shows some additional details
  --help                   - this help
  
EOF
  exit 0
fi

source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/lib/functions.sh"
source "$M_ROOT/cloud/$CLOUD_PROVIDER/functions.sh"

[ -z "$M_TEMP" ] && M_TEMP="/tmp/m_script"
M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

if [ -z "$imagename" ]; then
  if [ -n "$cluster" ]; then
    imagename=`cat "$M_ROOT/conf/clusters.conf" | grep ^${cluster}\| | cut -d'|' -f5 | cut -d'+' -f1`
  else
    [ -z "$imagename" ] && imagename="$params"
  fi
fi
[ -z "$imagename" ] && log "image name is mandatory, not saving" && exit 1

vm="$name"
vmini=`$GI list --no-header --separator='|' -o oper_state,disk_template,disk.size/0 "$vm" 2>/dev/null`

vmstate=`echo "$vmini" | cut -d'|' -f1`

[ -z "$vmstate" ] && echo "Instance $vm not found" && exit 1

[ "$vmstate" != "N" ] && echo "Instance must be stopped" && exit 1

disktype="`echo "$vmini" | cut -d'|' -f2`"
disksize="`echo "$vmini" | cut -d'|' -f3`"

[ `expr "$disksize" : ".*[^[0-9]]*.*"` -ne 0 ] && echo "No disk found" && exit 1

# now when we know that disk does exist, we can use a heavier tool to find its
# file or device

disk=`"$M_ROOT/cloud/$CLOUD_PROVIDER"/get_server_details --name="$vm" | grep '/"Disks"/"disk/0"/"on primary"|' | cut -d'|' -f2 | tail -1 | tr -d '"'`
disk=`expr "$disk" : "\(.*\) ("`

if [ ! -b "$disk" ]; then
  blockdev=$($LOSETUP -f --show "$disk")
  CLEANUP+=("$LOSETUP -d $blockdev")
else
  blockdev="$disk"
fi

$QEMU_IMG convert $blockdev -O qcow2 "$M_ROOT/cloud/ganeti/os-images/${imagename}.img"

cleanup
trap - EXIT

exit 0
