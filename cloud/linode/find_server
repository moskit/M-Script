#!/bin/bash
# Copyright (C) 2008-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"

possible_options="cloud id name ip return verbose cluster help updatelist quick slow"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

find_by_ip() {
  [ -z "$1" ] && return 1
  res=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list" | "$M_ROOT/lib/json2txt"`
  sn=`echo "$res" | grep '"IPADDRESS"|' | grep "\"$1\"" | cut -sd'/' -f3`
  id=`echo "$res" | grep \/$sn\/ | grep \/\"LINODEID\" | cut -sd'|' -f2`
  if [ -z "$id" ]; then
    log "`echo "$res" | grep \/\"ERRORARRAY\" | cut -sd'|' -f2`"
    return 1
  fi
}

find_by_name() {
  [ -z "$1" ] && return 1
  id=`IAMACHILD=1 "$rpath"/show_servers --cloud=$CLOUD --forceupdate --view=table | cut -d'|' -f1,2 | grep "|${1}$" | cut -d'|' -f1`
  # falling back to the local list
  [ -z "$id" ] && [ -f "$M_ROOT/cloud/${CLOUD}.list" ] && id=`cat "$M_ROOT/cloud/${CLOUD}.list" | cut -d'|' -f1,4 | grep "|${1}$" | cut -d'|' -f1`
  if [ -z "$id" ]; then
    log "unable to find server ID by its name"
    sed -i "/|${1}|.*${CLOUD}$/d" "$M_ROOT/servers.list"
  fi
}

list_the_cluster() {

  ips1=`cat "$M_ROOT/servers.list" | grep \|${CLOUD}$ | cut -d'|' -f1,5 | grep \|${cluster}$ | cut -d'|' -f1`
  if [ "_$NETWORK" == "_external" ]; then
    ips2=`cat "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$" | cut -d'|' -f6 | tr -d '"'`
  else
    ips2=`cat "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$" | cut -d'|' -f7 | tr -d '"'`
  fi
  ips=`echo -e "$ips1\n$ips2" | grep -v ^$ | sort | uniq`

  $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list" | "$M_ROOT/lib/json2txt" > "$M_TEMP/ips.list"
  allips=`cat "$M_TEMP/ips.list"`
  
  # "$newid|$imageid|$flavorid|$name|$regionid|$extIP|$intIP|$cluster"
  for ip in `echo "$ips"` ; do
    sn=`echo "$allips" | grep "|\"${ip}\"$" | cut -sd'/' -f3`
    
    if [ -z "$sn" ]; then
      sed -i "/^${ip}.*${CLOUD}$/d" "$M_ROOT/servers.list"
      sed -i "/|\"${ip}\"|/d" "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null
    else
      thisip=`echo "$allips" | grep \/$sn\/`
      thisid=`echo "$thisip" | grep /\"LINODEID\" | cut -sd'|' -f2`
      if ! grep -q "|${ip}|" "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null ; then
        serverdetails=`IAMACHILD=1 "$rpath"/get_server_details --ip=$ip 2>/dev/null`
        [ -z "$serverdetails" ] && continue
        icluster=`echo "$serverdetails" | grep ^LPM_DISPLAYGROUP\| | cut -sd'|' -f2`
        key="`grep "^$icluster|" "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f2 | tr -d '"'`"
        [ -z "$key" ] && key="`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f2 | tr -d '"'`"
        if=`echo "$serverdetails" | grep ^LABEL\| | cut -sd'|' -f2`
        name=`echo "$serverdetails" | grep ^LABEL\| | cut -sd'|' -f2`
        flavorid=`echo "$serverdetails" | grep ^PLANID\| | cut -sd'|' -f2`
        regionid=`echo "$serverdetails" | grep ^DATACENTERID\| | cut -sd'|' -f2`
        extIP=`echo "$serverdetails" | grep ^extIP\| | cut -sd'|' -f2`
        intIP=`echo "$serverdetails" | grep ^intIP\| | cut -sd'|' -f2`
        if ! `grep -q "^${ip}|" "$M_ROOT/servers.list"` ; then
          echo "$ip|$key||$name|$cluster|$CLOUD" >> "$M_ROOT/servers.list"
        fi
        
      fi
    fi

  done
  cat "$M_ROOT/cloud/${CLOUD}.list" | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$"
}

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$help" ] && cat << "EOF"

Finds and lists server(s) in Rackspace-based clouds

Usage: $rcommand <options>

Options:

  --id=[id]                     - finds a server by its ID
  
  --ip=[ip]                     - finds a server by its IP
  
  --name=[server name]          - finds server(s) by name
  
  --cluster=[cluster name]      - finds all servers in this cluster
                                  (see also --fast and --slow below).
                                  If either of ip/name/id is provided, this
                                  option is ignored, and the search becomes
                                  non-cluster one
  
  --cloud=[cloud name]          - must be provided for any of the searches
                                  above; can be provided either via command-line
                                  option or via environment variable CLOUD;
                                  command-line option has higher priority
                                  
  --fast                        - for cluster search, checks only provider-
                                  specific list (cloud/rackspace.list)
                                  
  --slow                        - for cluster search, gets details for each
                                  server in this cloud listed in servers.list
                                  and cloud/rackspace.list from the cloud API
                                  and does its best to fix any inconsistencies
                                  found
                                  
  --updatelist                  - updates servers.list with servers found
                                  (applicable only to single server search)
  
                                  
EOF

[ -n "$cloud" ] && CLOUD=$cloud
export CLOUD
[ -n "$fast" -a -n "$slow" ] && echo "both --fast and --slow options are set, not sure what to do" && exit 1

source "$rpath/../../conf/mon.conf"
[ -n "$CLOUD" ] && source "$rpath/../../conf/clouds/${CLOUD}.conf"
source "$rpath/../../lib/cloud_functions.sh"
M_TEMP="$M_TEMP/cloud/$CLOUD"

if [ -z "$IAMACHILD" ]; then
  lock_cloudops || exit 10
fi

if [ -z "$id" ]; then
  if [ -z "$ip" ]; then
    if [ -z "$name" ]; then
      if [ -z "$cluster" ]; then
        echo "One of id, ip, name or cluster is required to identify the server"
        proper_exit 1 202
      else
        list_the_cluster
        proper_exit 0 205
      fi
    else
      # ip must be present in servers.list, so it's simple
      ip=`cat "$rpath/../../servers.list" | grep -vE "^#|^[[:space:]]#" | cut -d'|' -f1,4,6 | grep -v ^$ | grep "|${CLOUD}$" | grep "|${name}|" | cut -d'|' -f1`
      if [ -n "$ip" ]; then
        find_by_ip $ip
      else
      # if it is not present for some reason, complex and slow procedure starts
        find_by_name $name
      fi
    fi
  else
    find_by_ip $ip
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && proper_exit 1 198
echo "ID found: $id"

$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.list&LinodeID=${id}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/${rcommand}.resp"

if ! `grep -q \/\"LINODEID\"\|${id}$ "$M_TEMP/${rcommand}.resp"` ; then
  echo "No server found with ID $id"
  sed -i "/|${id}|.*${CLOUD}$/d" "$M_ROOT/servers.list"
  sed -i "/^${id}|/d" "$M_ROOT/cloud/${CLOUD}.list"
  proper_exit 1 177
fi

if [ -n "$updatelist" ]; then
  serverdetails=`IAMACHILD=1 "$rpath"/get_server_details --id=$id 2>/dev/null`
  if [[ "$NETWORK" == "external" ]]; then
    ip="`echo "$serverdetails" | grep 'extIP|' | cut -s -d'|' -f2 | tr -d '"'`"
  else
    ip="`echo "$serverdetails" | grep 'intIP|' | cut -s -d'|' -f2 | tr -d '"'`"
  fi
  if ! `grep -q "^${ip}|" "$M_ROOT/servers.list"` ; then
    name="`echo "$serverdetails" | grep '^LABEL|' | cut -s -d'|' -f2`"
    icluster="`echo "$serverdetails" | grep ^LPM_DISPLAYGROUP\| | cut -s -d'|' -f2`"
    key="`grep "^$icluster|" "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f2`"
    echo "$ip|$key||$name|$icluster|$CLOUD" >> "$M_ROOT/servers.list"
  fi
else
  cat "$M_TEMP/${rcommand}.resp"
fi

proper_exit 0 228

