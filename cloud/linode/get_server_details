#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`

CURL="$CURL -s -k"

possible_options="cloud id name ip return verbose"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && echo "Server details? Which server?" && exit 1
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

find_by_ip() {
  [ -z "$1" ] && return 1
  res=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list" | "$M_ROOT/lib/json2txt"`
  id=`echo "$res" | grep \/\"LinodeID\" | cut -sd'|' -f2`
  if [ -z "$id" ]; then
    log "`echo "$res" | grep \/\"ERRORARRAY\" | cut -sd'|' -f2`"
    return 1
  fi
}

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "X$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$cloud" ] && CLOUD=$cloud
export CLOUD

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
M_TEMP="$M_TEMP/cloud/$CLOUD"

if [ -z "$IAMACHILD" ]; then
  lock_cloudops || exit 10
fi

if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the server"
      proper_exit 1 83
    else
      ip=`cat "$rpath/../../servers.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      else
        id=`IAMACHILD=1 $rpath/show_servers --forceupdate --view=table | cut -d'|' -f1,2 | grep \|${name}$ | cut -d'|' -f1`
      fi
    fi
  else
    find_by_ip $ip
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && proper_exit 1 99

# a minimum required for find_server
# "$newid|$imageid|$flavorid|$name|$regionid|$extIP|$intIP|$cluster"

request() {
  resips=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list&LinodeID=$id" | "$M_ROOT/lib/json2txt"` || return 1
  resdetails=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.list&LinodeID=$id" | "$M_ROOT/lib/json2txt"` || return 1
  return 0
}

if ! request ; then
  err="`echo "$resips" | grep '"ERRORMESSAGE"|'``echo "$resdetails"| grep '"ERRORMESSAGE"|'`"
  log "$err"
  echo "$err" >&2
  proper_exit 1 113
else
  out="LinodeID|$id"
  for sn in `echo "$resips" | cut -sd'/' -f3 | sort | uniq` ; do
    if [ "_`echo "$resips" | grep \/$sn\/ | grep \/\"ISPUBLIC\" | cut -sd'|' -f2`" == "_1" ]; then
      out="${out}\nextIP|`echo -n "$resips" | grep \/\"IPADDRESS\" | cut -sd'|' -f2`"
    else
      out="${out}\nintIP|`echo -n "$resips" | grep \/\"IPADDRESS\" | cut -sd'|' -f2`"
    fi
  done
  out="${out}\n`echo "$resdetails" | cut -sd'/' -f 4- | tr -d '"'`"
  echo -e "$out"
fi

proper_exit 0 116

