#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1

#debug=1

[ -n "$debug" ] && debug=true || debug=false
$debug && LOG="$M_ROOT/logs/show_servers.log"

possible_options="cluster state filter region short noupdate view update_servers_list forceupdate all status count resolveids cloud"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

[ -n "$update_servers_list" -a -n "$filter" ] && echo "Impossible options combination" && exit 1
M_TEMP="$M_TEMP/cloud/$CLOUD"
install -d "$M_TEMP"
export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

CURL="$CURL -s -k"
declare -i icount

[ -n "$forceupdate" ] && unset noupdate # for compatibility
[ -z "$status" -a -n "$state" ] && status=$state
[ -z "$status" ] && status="1"
[ -n "$filter" ] && filter="${filter},addresses,cluster"

flavorid() {
  grep ^$1\| "$M_TEMP/flavors.list" | cut -sd'|' -f2
}

imageid() {
  grep ^$1\| "$M_TEMP/images.list" | cut -sd'|' -f2
}

regionid() {
  grep ^$1\| "$M_TEMP/regions.list" | cut -sd'|' -f2
}

kernelid() {
  grep ^$1\| "$M_TEMP/kernels.list" | cut -sd'|' -f2
}

request() {
  local updateflavors updateimages
  updateflavors=false
  updateimages=false
  updateregions=false
  
  log "calling API"
  $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.list" | "$rpath/../../lib/json2txt" > "$M_TEMP/${rcommand}.resp"
  if [ ! -n "`find "$M_TEMP" -mtime -1 -name flavors.resp`" ]; then
    updateflavors=true
  fi
  if [ ! -n "`find "$M_TEMP" -mtime -1 -name images.resp`" ]; then
    updateimages=true
  fi
  if [ ! -n "`find "$M_TEMP" -mtime -1 -name regions.resp`" ]; then
    updateregions=true
  fi
  if [ ! -n "`find "$M_TEMP" -mtime -1 -name kernels.resp`" ]; then
    updatekernels=true
  fi
  # IPs of all nodes
  $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list" | "$M_ROOT/lib/json2txt" > "$M_TEMP/ips.list"
  
  if $updateflavors ; then
    flavors=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.LinodePlans" | "$M_ROOT/lib/json2txt"` 
    echo "$flavors" > "$M_TEMP/flavors.resp"
    rm "$M_TEMP/flavors.list"
    echo "$flavors" | cut -sd'/' -f3 | sort | uniq | while read sn ; do echo "`echo "$flavors" | grep \/$sn\/ | grep \"PLANID\" | cut -sd'|' -f2`|`echo "$flavors" | grep \/$sn\/ | grep \"LABEL\" | cut -sd'|' -f2`" >> "$M_TEMP/flavors.list" ; done
  fi
  
  if $updateimages ; then
    images=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.distributions" | "$M_ROOT/lib/json2txt"` 
    echo "$images" > "$M_TEMP/images.resp"
    rm "$M_TEMP/images.list"
    echo "$images" | cut -sd'/' -f3 | sort | uniq | while read sn ; do echo "`echo "$images" | grep \/$sn\/ | grep \"DISTRIBUTIONID\" | cut -sd'|' -f2`|`echo "$images" | grep \/$sn\/ | grep \"LABEL\" | cut -sd'|' -f2`" >> "$M_TEMP/images.list" ; done
  fi

  if $updateregions ; then
    regions=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.datacenters" | "$M_ROOT/lib/json2txt"` 
    echo "$regions" > "$M_TEMP/regions.resp"
    rm "$M_TEMP/regions.list"
    echo "$regions" | cut -sd'/' -f3 | sort | uniq | while read sn ; do echo "`echo "$regions" | grep \/$sn\/ | grep \"DATACENTERID\" | cut -sd'|' -f2`|`echo "$regions" | grep \/$sn\/ | grep \"LOCATION\" | cut -sd'|' -f2`" >> "$M_TEMP/regions.list" ; done
  fi
  
  if $updatekernels ; then
    kernels=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.kernels" | "$M_ROOT/lib/json2txt"` 
    echo "$kernels" > "$M_TEMP/kernels.resp"
    rm "$M_TEMP/kernels.list"
    echo "$kernels" | cut -sd'/' -f3 | sort | uniq | while read sn ; do echo "`echo "$kernels" | grep \/$sn\/ | grep \"KERNELID\" | cut -sd'|' -f2`|`echo "$images" | grep \/$sn\/ | grep \"LABEL\" | cut -sd'|' -f2`" >> "$M_TEMP/kernels.list" ; done
  fi
}

list_servers() {
  $debug && [ -n "$update_servers_list" ] && echo -e "\n`date`\n=====================\n" >> $LOG
  IFS1=$IFS
  IFS='
'
  if [ `cat "$M_TEMP/${rcommand}.resp" 2>/dev/null | wc -l` -gt 0 ]; then
    declare -a serverlist
    allips=`cat "$M_TEMP/ips.list"`
    for sn in `cat "$M_TEMP/${rcommand}.resp" | cut -d'/' -f3 | sort | uniq` ; do
      unset id name istatus extIP intIP IP imageId flavorId region icluster
      for LINE in `grep "/\"DATA\"/$sn/" "$M_TEMP/${rcommand}.resp"` ; do
        lvar=`echo $LINE | cut -d'|' -f1 | cut -d'/' -f4 | tr -d '"'`
        if [ -n "$filter" ] ; then
          for fvar in `echo -e $filter | tr ',' '\n'` ; do            
            [[ $lvar =~ $fvar ]] || continue 2
          done
        fi
        lvalue=`echo $LINE | cut -d'|' -f2 | tr -d '"'`
        case $lvar in
          LINODEID)
            id=$lvalue
            ;;
          LABEL)
            name="$lvalue"
            ;;
          DISTRIBUTIONVENDOR)
            imageId="$lvalue"
            ;;
          PLANID)
            [ -n "$resolveids" ] && flavorId=`flavorid $lvalue` || flavorId=$lvalue
            ;;
          STATUS)
            istatus=$lvalue
            ;;
          LPM_DISPLAYGROUP)
            icluster="$lvalue"
            ;;
          DATACENTERID)
            [ -n "$resolveids" ] && region=`regionid $lvalue` || region=$lvalue
            ;;
        esac
      done
      IPsn=`echo "$allips" | grep "\"LINODEID\"|$id" | cut -d'/' -f3`
      for ipsn in $IPsn ; do
        ipdata=`echo "$allips" | grep \/$ipsn\/`
        if `echo "$ipdata" | grep -q '"ISPUBLIC"|1'` ; then
          extIP="$extIP`echo "$ipdata" | grep '"IPADDRESS"|' | cut -sd'|' -f2 | tr -d '"'`\n"
        else
          intIP="$intIP`echo "$ipdata" | grep '"IPADDRESS"|' | cut -sd'|' -f2 | tr -d '"'`\n"
        fi
      done
      if [ "_$NETWORK" == "_external" ] ; then
        IP="$extIP"
      else
        IP="$intIP"
      fi
      IPsanitized=`echo -e "$IP" | grep -v ^$`
      if [ -n "$IPsanitized" ]; then
        for ip in $IPsanitized ; do
          ip=`echo $ip | tr -d ' '`
          if [ -z "$icluster" ] ; then
            # servers having no cluster in metadata but added manually to servers.list
            icluster=`grep ^$ip\| "$M_ROOT/servers.list" | cut -d'|' -f5`
            $debug && [ -n "$update_servers_list" ] && ecf=1 && log "missing cluster for IP ${ip}, assumed `[ -n "$icluster" ] && echo "$icluster" || echo "none"`"
            break
          else
            # no icluster means that server will not be shown, but only if there
            # is no option --all. With this option, however, we want to see all
            # clusters assigned via metadata
            [ `grep -c ^$icluster\| "$rpath/../../conf/clusters.conf"` -eq 0 ] && [ -z "$all" ] && unset icluster
            $debug && [ -n "$update_servers_list" ] && unset ecf
          fi
        done
      else
        # if no IP, it shouldn't make way to servers.list
        [ -n "$update_servers_list" ] && continue
        
      fi
      if [ -z "$update_servers_list" ] ; then
        # icluster existence condition is needed for the case there are multiple
        # projects (cluster groups) in the same cloud.
        # Note that if you use same names for clusters in different cluster
        # groups, you'll get them mixed here.
        if [ -n "$icluster" ] || [ -n "$all" ] ; then
          [ -n "$cluster" ] && [[ "$cluster" != "$icluster" ]] && continue
          [ "_$status" != "_$istatus" ] && [ "_$status" != "_all" ] && continue
          if [ -n "$extIP" ]; then
            extIP=`echo -e "$extIP" | tr -d ' ' | tr '\n' ' '`
            extIP="${extIP%% *}"
            check_super_cluster $extIP "$icluster" && continue
          fi
          if [ -n "$intIP" ]; then
            intIP=`echo -e "$intIP" | tr -d ' ' | tr '\n' ' '`
            intIP="${intIP%% *}"
            check_super_cluster $intIP "$icluster" && continue
          fi
          case $view in
            list)
              echo "ID: $id  Name: $name  Status: $istatus  Region: $region  ext IP: $extIP  intIP: $intIP  Cluster: $icluster  Image: $imageId  Size: $flavorId"
              ;;
            table)
              echo "$id|$name|$istatus|$region|$extIP|$intIP|$icluster|$imageId|$flavorId"
              ;;
            column)
              echo -e "ID: $id\nName: $name\nStatus: $istatus\nRegion: $region\next IP: $extIP\nintIP: $intIP\nImage: $imageId\nSize: $flavorId\n"
              ;;
            none)
              ;;
            *)
              echo "------------------------------------------------------------------------------"
              echo "Server ID: $id    Name: $name    Cluster: $icluster"
              echo "Public IP: $extIP"
              echo "Private IP: $intIP"
              echo "Server image: $imageId"
              echo "Server size: $flavorId    Status: $istatus    Region: $region"
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^$icluster\| "$rpath/../../conf/clusters.conf"` -ne 0 ] ; then
            
            key=`grep ^$icluster\| "$rpath/../../conf/clusters.conf" | cut -d'|' -f2`
            for ip in $IP ; do
              ip=`echo $ip | tr -d ' '`
              check_super_cluster $ip "$icluster" && continue
              serverlist+=("$ip|$key|$region|$name|$icluster|$CLOUD")
              $debug && [ -n "$ecf" ] && log "$ip ($name) added"
            done
          fi
        elif [ -n "$all" ]; then
          for ip in $IP ; do
            ip=`echo $ip | tr -d ' '`
            check_super_cluster $ip "$icluster" && continue
            serverlist+=("$ip|$key|$region|$name|$icluster|$CLOUD")
            $debug && [ -n "$ecf" ] && log "$ip ($name) added"
          done
        fi
      fi
      
    done
    if [ -z "$noupdate" ]; then
      if [ ${#serverlist[*]} -eq 0 ]; then
        log "ERROR: generated list is empty, not saving it"
      else
        log "saving generated list (${#serverlist[*]} servers)"
        for ((i=0; i<${#serverlist[*]}; i++)); do echo "${serverlist[$i]}"; done > "$M_ROOT/cloud/servers.list.${CLOUD}"
      fi
    fi
  else
    echo "No local data found. Run without --noupdate"
    proper_exit 1 251
  fi
  IFS=$IFS1
}

# force update if the tmp file is older than FORCE_LIST_UPDATE_AFTER
# if no setting, force update is disabled
if [ -n "$FORCE_LIST_UPDATE_AFTER" -a -n "$noupdate" ] ; then
  tmpfileage=$(expr `date +"%s"` - `stat -c "%Z" $M_TEMP/${rcommand}.resp 2>/dev/null || echo 0` || echo 86400)
  [ $tmpfileage -gt $FORCE_LIST_UPDATE_AFTER ] 2>/dev/null && log "$M_TEMP/${rcommand}.resp is older than $FORCE_LIST_UPDATE_AFTER sec, update forced" && unset noupdate
fi
if [ -z "$noupdate" ] ; then
  request
fi
list_servers

[ -n "$count" ] && echo $icount
proper_exit 0 268

