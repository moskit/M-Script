#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"

SSH=`which ssh 2>/dev/null`

possible_options="cloud region cluster image name return verbose debug dry"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "CLOUD not defined" && exit 1
export CLOUD
[ -n "$debug" ] && debug=true || debug=false
[ -n "$dry" ] && dry=true || dry=false

source "$M_ROOT/conf/mon.conf"
[ -d "$M_TEMP/cloud/$CLOUD" ] || install -d "$M_TEMP/cloud/$CLOUD"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
source "$M_ROOT/lib/functions.sh"
[ -z "$SSHPORT" ] && SSHPORT=22
export SSHPORT
[ -z "$ROOTFS" ] && ROOTFS="ext4"
lock_cloudops || exit 10

[ -z "$cluster" ] && cluster="$M_CLUSTER"
[ -z "$cluster" ] && echo "Cluster not defined" && exit 1
if ! grep -q "^$cluster|" "$M_ROOT/conf/clusters.conf" ; then echo "Cluster $cluster is not configured"; proper_exit 1 65; fi

flavorid() {
  grep ^$1\| "$M_TEMP/cloud/$CLOUD/flavors.list" | cut -sd'|' -f2
}

imageid() {
  grep ^$1\| "$M_TEMP/cloud/$CLOUD/images.list" | cut -sd'|' -f2
}

regionid() {
  grep ^$1\| "$M_TEMP/cloud/$CLOUD/regions.list" | cut -sd'|' -f2
}

kernelid() {
  grep ^$1\| "$M_TEMP/cloud/$CLOUD/kernels.list" | cut -sd'|' -f2
}

find_image() {
  if [ -n "$image" ]; then
    if [ ! -f "$M_TEMP/cloud/$CLOUD/images.resp" ]; then
      $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.distributions\""
      $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.distributions" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/images.resp"
    fi
    grep -q \/\"DISTRIBUTIONID\"\|${image}$ "$M_TEMP/cloud/$CLOUD/images.resp" && imageid=$image && log "Image ID for the new node is $imageid (`imageid $imageid`) based on command-line option" && return
  fi
  imageid=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f6`
  if grep -q \/\"DISTRIBUTIONID\"\|${imageid}$ "$M_TEMP/cloud/$CLOUD/images.resp" ; then
    log "Image ID for the new node is $imageid (`imageid $imageid`) based on the cluster $cluster default"
  else
    log "Image ID $imageid not found, cannot continue"
    return 1
  fi
}

find_flavor() {
  if [ -n "$flavor" ]; then
    if [ ! -f "$M_TEMP/cloud/$CLOUD/flavors.resp" ]; then
      $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.LinodePlans\""
      $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.LinodePlans" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/flavors.resp"
    fi
    grep -q \/\"PLANID\"\|${flavor}$ "$M_TEMP/cloud/$CLOUD/flavors.resp" && flavorid=$flavor && log "Flavor ID for the new node is $flavorid (`flavorid $flavorid`) based on command-line option" && return
  fi
  flavorid=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f5`
  if grep -q \/\"PLANID\"\|${flavorid}$ "$M_TEMP/cloud/$CLOUD/flavors.resp" ; then
    log "Flavor ID for the new node is $flavorid (`flavorid $flavorid`) based on the cluster $cluster default"
  else
    log "Flavor ID $flavorid not found, cannot continue"
    return 1
  fi
  sn=`grep \/\"PLANID\"\|${flavorid}$ "$M_TEMP/cloud/$CLOUD/flavors.resp" | cut -sd'/' -f3`
  maxdisksize=`grep \/$sn\/ "$M_TEMP/cloud/$CLOUD/flavors.resp" | grep \/\"DISK\" | cut -sd'|' -f2`
  maxdisksize=`expr $maxdisksize \* 1024`
  log "Max disk size: $maxdisksize"
  if [ -z "$SWAP_PARTITION" ]; then
    swapdisksize=0
    log "Swap disk is not enabled"
  elif [ "$SWAP_PARTITION" == "2xRAM" ]; then
    ramsize=`grep \/$sn\/ "$M_TEMP/cloud/$CLOUD/flavors.resp" | grep \/\"RAM\" | cut -sd'|' -f2`
    swapdisksize=`expr 2 \* $ramsize`
    log "Swap disk is set to 2xRAM. RAM size is $ramsize, swap disk size is $swapdisksize"
  else
    swapdisksize=$SWAP_PARTITION
    log "Swap disk is set to $SWAP_PARTITION"
  fi
  disksize=`expr $maxdisksize - $swapdisksize`
  if [ -z "$disksize" ]; then
    log "Disk size cannot be determined, cannot continue"
    return 1
  elif [ `expr $disksize : .*[^[0-9]]*` -gt 0 ]; then
    log "Disk size format error (disksize=${disksize}). It must be a positive number (disk size in Megabytes)"
    return 1
  fi
}

find_region() {
  if [ -n "$region" ]; then
    if [ ! -f "$M_TEMP/cloud/$CLOUD/regions.resp" ]; then
      $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.datacenters\""
      $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.datacenters" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/regions.resp"
    fi
    grep -q \/\"DATACENTERID\"\|${region}$ "$M_TEMP/cloud/$CLOUD/regions.resp" && regionid=$region && log "flavor ID for the new node is $regionid (`regionid $regionid`) based on command-line option" && return
  fi
  regionid=`grep ^$cluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f3`
  if grep -q \/\"DATACENTERID\"\|${regionid}$ "$M_TEMP/cloud/$CLOUD/regions.resp" ; then
    log "Datacenter ID for the new node is $regionid (`regionid $regionid`) based on the cluster $cluster default"
  else
    log "Datacenter ID $regionid not found, cannot continue"
    return 1
  fi
}

find_kernel() {
  if [ -n "$KERNEL_ID" ]; then
    if [ ! -f "$M_TEMP/cloud/$CLOUD/kernels.resp" ]; then
      $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.kernels\""
      $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=avail.kernels" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/kernels.resp"
    fi
    grep -q \/\"KERNELID\"\|${KERNEL_ID}$ "$M_TEMP/cloud/$CLOUD/kernels.resp" && kernelid=$KERNEL_ID && log "Kernel ID for the new node is $kernelid (`kernelid $kernelid`) based on cloud configuration" && return
  fi
}

request() {
  log "Sending request..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.create&DatacenterID=${regionid}&PlanID=$flavorid\""
  $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.create&DatacenterID=${regionid}&PlanID=$flavorid" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.resp"
}

disk_request() {
  unset jobid
  log "Sending root disk request..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.disk.create&LinodeID=${newid}&FromDistributionID=${imageid}&rootPass=${ROOTPASS}&rootSSHKey=${PUBLIC_KEY}&Label=root&Type=${ROOTFS}&Size=${disksize}\""
  $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.disk.create&LinodeID=${newid}&FromDistributionID=${imageid}&rootPass=${ROOTPASS}&rootSSHKey=${PUBLIC_KEY}&Label=root&Type=${ROOTFS}&Size=${disksize}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.rootdisk.resp"
  jobid=`grep \/\"JobID\" "$M_TEMP/cloud/$CLOUD/${rcommand}.rootdisk.resp" | cut -sd'|' -f2`
  rootdiskid=`grep \/\"DiskID\" "$M_TEMP/cloud/$CLOUD/${rcommand}.rootdisk.resp" | cut -sd'|' -f2`
  if [ -n "$jobid" ]; then
    wait_ready $jobid || return 1
  else
    log "`grep \/\"ERRORMESSAGE\" "$M_TEMP/cloud/$CLOUD/${rcommand}.rootdisk.resp" | cut -sd'|' -f2`"
    return 1
  fi
  unset jobid
  if [ -n "$swapdisksize" ]; then
    log "Sending swap disk request..."
    $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.disk.create&LinodeID=${newid}&Label=swap&Type=swap&Size=${swapdisksize}\""
    $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.disk.create&LinodeID=${newid}&Label=swap&Type=swap&Size=${swapdisksize}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.swapdisk.resp"
    $dry && return 0
    jobid=`grep \/\"JobID\" "$M_TEMP/cloud/$CLOUD/${rcommand}.swapdisk.resp" | cut -sd'|' -f2`
    swapdiskid=`grep \/\"DiskID\" "$M_TEMP/cloud/$CLOUD/${rcommand}.swapdisk.resp" | cut -sd'|' -f2`
    if [ -n "$jobid" ]; then
      wait_ready $jobid || return 1
    else
      log "`grep \/\"ERRORMESSAGE\" "$M_TEMP/cloud/$CLOUD/${rcommand}.swapdisk.resp" | cut -sd'|' -f2`"
      return 1
    fi
  fi
}

create_config() {
  log "Creating config..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.config.create&LinodeID=${newid}&KernelID=${kernelid}&Label=${name}_config&helper_network=1\""
  $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.config.create&LinodeID=${newid}&KernelID=${kernelid}&Label=${name}_config&helper_network=1&DiskList=${rootdiskd},${swapdiskid}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.create_config.resp"
}

ip_request() {
  unset jobid
  if [ "_$PRIVATE_IP" == "_yes" ]; then
    log "Sending private IP request..."
    $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.addprivate&LinodeID=${newid}\""
    $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.addprivate&LinodeID=${newid}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.privateip.resp"
    $dry && return 0
    intIP=`grep \/\"IPADDRESS\" "$M_TEMP/cloud/$CLOUD/${rcommand}.privateip.resp" | cut -sd'|' -f2 | tr -d '"'`
    if [ -z "$intIP" ]; then
      log "`grep \/\"ERRORMESSAGE\" "$M_TEMP/cloud/$CLOUD/${rcommand}.privateip.resp" | cut -sd'|' -f2| tr -d '"'`"
      return 1
    fi
  fi
}

get_assigned_ip() {
  log "Sending IP listing request..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list&LinodeID=${newid}\""
  $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.ip.list&LinodeID=${newid}" | "$M_ROOT/lib/json2txt" | readpath - '0/DATA' 'ISPUBLIC|1' IPADDRESS
}

metadata_request() {
  log "Sending metadata update request..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.update&LinodeID=${newid}&Label=${name}&lpm_displayGroup=${cluster}\""
  $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.update&LinodeID=${newid}&Label=${name}&lpm_displayGroup=${cluster}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.update.resp"
  res=`grep \/\"LinodeID\" "$M_TEMP/cloud/$CLOUD/${rcommand}.update.resp" | cut -sd'|' -f2`
  if [ -z "$res" ]; then
    log "`grep \/\"ERRORMESSAGE\" "$M_TEMP/cloud/$CLOUD/${rcommand}.update.resp" | cut -sd'|' -f2| tr -d '"'`"
    return 1
  fi
}

save_details() {
  log "Saving details of the new node..."
  [ -n "$1" ] && echo "Saving details..."
  echo -e "\n`date`\n\nCluster|$cluster\nName|$name\nImageID|$imageid\nFlavorID|$flavorid\nRegionID|$regionid\nPublicIP|$extIP\nPrivateIP|$intIP\nPassword|$ROOTPASS\n" >> "$rpath/../linode.log"
  echo "$newid|$imageid|$flavorid|$name|$regionid|$extIP|$intIP|$cluster" >> "$M_ROOT/cloud/${CLOUD}.list"
  chmod 600 "$M_ROOT/cloud/linode.log" "$M_ROOT/cloud/${CLOUD}.list"
  if [ "_$NETWORK" == "_external" ] ; then
    slip=$extIP
  else
    slip=$intIP
  fi
  echo "$slip|$thekey|$region|$name|$cluster|$CLOUD" >> "$M_ROOT/cloud/nodes.list.${CLOUD}"
  echo "$slip|$thekey|$region|$name|$cluster|$CLOUD" >> "$M_ROOT/nodes.list"
  return 0
}

wait_ready() {
  log "Waiting for job ${1} to finish..."
  waittimeout=1200
  waitperiod=10
  checks=`expr $waittimeout / $waitperiod`
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.job.list&JobID=${1}&LinodeID=${newid}\""
  for ((i=1; i<$checks; i++)) ; do
    sleep $waitperiod
    jobstatus=`$CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.job.list&JobID=${1}&LinodeID=${newid}" | "$M_ROOT/lib/json2txt"`
    if [ "_`echo "$jobstatus" | grep \/\\\"HOST_SUCCESS\\\" | cut -sd'|' -f2`" == "_1" ]; then
      log "Job $1 finished"
      return 0
    fi
  done
  return 1
}

printreturn() {
  for res in `echo $1 | tr ',' ' '` ; do
    case $res in
      ip)
        if [ "_$NETWORK" == "_external" ] ; then
          echo "$extIP"
        else
          echo "$intIP"
        fi
        ;;
      ipext)
        echo "$extIP"
        ;;
      ipint)
        echo "$intIP"
        ;;
      id)
        echo "$newid"
        ;;
    esac
  done
}

set_hostname() {
  if [ -n "$extIP" ]; then
    $SSH -p $SSHPORT -o "StrictHostKeyChecking=no" -o "ConnectTimeout=10" -o "PasswordAuthentication=no" root@${extIP} hostname $name
    sshres=$?
  fi
  if [[ $sshres -ne 0 ]] && [ -n "$intIP" ]; then
    [ $? -ne 0 ] && $SSH -p $SSHPORT -o "StrictHostKeyChecking=no" -o "ConnectTimeout=10" -o "PasswordAuthentication=no" root@${intIP} hostname $name
    sshres=$?
  fi
  return $sshres
}

boot_request() {
  log "Sending boot request..."
  $debug && log "[DEBUG] $CURL -X GET \"${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.boot&LinodeID=${newid}\""
  $dry || $CURL -X GET "${LIN_APIURL}/?api_key=${LIN_AUTH_KEY}&api_action=linode.boot&LinodeID=${newid}" | "$M_ROOT/lib/json2txt" > "$M_TEMP/cloud/$CLOUD/${rcommand}.boot.resp"
}

log "Checking cluster $cluster limit..."
check_cluster_limit "$cluster" || proper_exit 5 311
[ -z "$name" ] && name=`generate_name $cluster` && log "Name auto-generated: $name"
[ -z "$name" ] && proper_exit 6 313
log "Double-checking name"
IAMACHILD=1 find_node --name="$name" --updatelist >/dev/null 2>&1 && log "Node with name $name already exists!" && proper_exit 6 315
find_image || proper_exit 7 316
[ -z "$imageid" ] && proper_exit 7 317
find_flavor || proper_exit 8 318
[ -z "$flavorid" ] && proper_exit 8 319
find_region || proper_exit 9 320
[ -z "$regionid" ] && proper_exit 9 321
thekey=`cat "$rpath/../../conf/clusters.conf" | grep ^$cluster\| | cut -d'|' -f2`
[ -f "$M_ROOT/keys/${thekey}.pub" ] && pubkey=${thekey}.pub
[ -f "$M_ROOT/keys/${thekey}.pem.pub" ] && pubkey=${thekey}.pem.pub
PUBLIC_KEY=`cat "$rpath/../../keys/$pubkey" 2>/dev/null`
[ -z "$PUBLIC_KEY" ] && PUBLIC_KEY=`cat $HOME/.ssh/id_dsa.pub 2>/dev/null`
[ -z "$PUBLIC_KEY" ] && PUBLIC_KEY=`cat $HOME/.ssh/id_rsa.pub 2>/dev/null`
[ -z "$PUBLIC_KEY" ] && PUBLIC_KEY=`cat $HOME_ORIG/.ssh/id_dsa.pub 2>/dev/null`
[ -z "$PUBLIC_KEY" ] && PUBLIC_KEY=`cat $HOME_ORIG/.ssh/id_rsa.pub 2>/dev/null`
[ -z "$PUBLIC_KEY" ] && [ -z "$nokey" ] && echo "No public key found. Tried $M_ROOT/keys/${pubkey}, public keys from $HOME/.ssh and $HOME_ORIG/.ssh" && proper_exit 1 246
PUBLIC_KEY=`echo "$PUBLIC_KEY" | "$M_ROOT"/lib/urlencode`
ROOTPASS=`head /dev/urandom -c200 | tr -dc 'a-zA-Z0-9' | cut -b -20`

exit_status=0

request && log "Request sent" || proper_exit 1 337

errors=`grep \/\"ERRORARRAY\" "$M_TEMP/cloud/$CLOUD/${rcommand}.resp" | cut -d'|' -f2`
if [ -n "$errors" ]; then
  echo -n "${errors}" >&2
  proper_exit 1 342
else
  newid=`grep \/\"LinodeID\"\| "$M_TEMP/cloud/$CLOUD/${rcommand}.resp" | cut -d'|' -f2`
  $dry && newid=666
  if [ -n "$newid" ] ; then
    disk_request && log "Disks created" || exit_status=2
    ip_request && log "IPs added" || exit_status=3
    metadata_request && log "Metadata updated" || exit_status=4
    extIP=`get_assigned_ip`
    create_config
    $dry || save_details
    boot_request || proper_exit 10 353
    if ! $dry ; then
      set_hostname || log "Was unable to set hostname"
    fi
    
    [ -n "$return" ] && printreturn $return

  else
    proper_exit 1 361
  fi
fi

"$M_ROOT"/cloud/common/update_hosts_file && log "/etc/hosts updated" || log "error updating /etc/hosts"
proper_exit $exit_status 366
