#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

possible_options="name descr description action create list delete show log_request cloud id volid help"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -z "$*" ] && help=yes

if [ -z "$help" ]; then
  found=0
  for option in `echo $necessary_options | sed 's/,//g'`; do
    [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
  done
  if [[ found -eq 1 ]]; then
    missing_options=${missing_options#*,}
    echo "Necessary options: $missing_options not found"
    exit 1
  fi
else
  cat << "EOF"
Usage: node destroy {options}

where options are:

id={instance id}   - EC2 instance ID
name={node name)   - M-Script node name
ip={ip}            - node IP address

  One of nodeid, nodename, nodeip is mandatory

cloud={cloud name}     - must be provided, only this cloud will be searched for
                         the node to destroy. In most cases it is not mandatory
                         to provide it via command-line option though since
                         it is provided via environment variable CLOUD
                         
EOF

fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

source "$rpath/functions.sh"

request CreateSnapshot "VolumeId=${id}"
check_request_result instanceId,previousState,currentState || proper_exit 1 101

proper_exit 0 105
