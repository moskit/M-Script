#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

possible_options="name log_request cloud id ip help force last first cluster nochecks"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -z "$*" ] && help=yes

if [ -z "$help" ]; then
  found=0
  for option in `echo $necessary_options | sed 's/,//g'`; do
    [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
  done
  if [[ found -eq 1 ]]; then
    missing_options=${missing_options#*,}
    echo "Necessary options: $missing_options not found"
    exit 1
  fi
else
  cat << "EOF"
Usage: destroy_node {options}

where options are:

--id={instance id}     - EC2 instance ID
--name={node name)     - M-Script node name
--ip={ip}              - node IP address

  One of id, name, or ip is required

--cloud={cloud name}   - must be provided. Only this cloud will be searched for
                         the node to destroy. In most cases it is not required
                         to provide it via command-line option since it is
                         provided as environment variable CLOUD
                         
EOF

fi

[ -n "$cloud" ] && CLOUD=$cloud

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

source "$rpath/functions.sh"

lock_cloudops || exit 10

if [ -z "$id" ]; then
  if [ -z "$ip" ]; then
    if [ -z "$name" ]; then
      echo "One of id, ip or name is required to identify the node"
      proper_exit 1 92
    else
      id=`IAMACHILD=1 "$rpath"/find_node --name=$name --onlyid`
    fi
  else
    id=`IAMACHILD=1 "$rpath"/find_node --ip=$ip --onlyid`
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this node" && proper_exit 1 98

# IP is required, to get it removed from lists
if [ -z "$ip" ]; then
  if [ "_$network" == "_EXTERNAL" ]; then
    ip=`IAMACHILD=1 "$rpath"/get_node_details --id=$id | grep ^publicIpAddress | cut -sd'|' -f2`
  else
    ip=`IAMACHILD=1 "$rpath"/get_node_details --id=$id | grep ^privateIpAddress | cut -sd'|' -f2`
  fi
fi

aws_api_request TerminateInstances "InstanceId.1=${id}"
check_request_result instanceId,previousState,currentState || proper_exit 1 101

if [ -n "$ip" ]; then
  sed -i "/^$ip|/d" "$M_ROOT/nodes.list" "$M_ROOT/cloud/nodes.list.${CLOUD}"
  SSHK=`which ssh-keygen 2>/dev/null`
  $SSHK -q -R "$ip" >/dev/null 2>&1 && log "$ip removed from known_hosts"
  sed -i "/^$ip /d" /etc/hosts && log "$ip removed from /etc/hosts"
fi
sed -i "/|$id|/d" "$M_ROOT/cloud/${CLOUD}.list"
[ -n "$name" ] && $SSHK -q -R "$name" >/dev/null 2>&1 && log "$name removed from known_hosts"

proper_exit 0 105
