#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

CURL="$CURL -s -k"

possible_options="cloud cluster id name ip return verbose log_request"
necessary_options=""
ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && echo "Node details? Which node?" && exit 1
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

IFS=$IFS1

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "CLOUD not defined" && exit 1
export CLOUD

[ -n "$debug" ] && debug=true || debug=false

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

exit_status=0

if [ -z "$region" ]; then
  [ -n "$cluster" ] && region=`find_region $cluster` || region=`find_region`
  [ `echo "$region" | wc -l` -gt 1 ] && echo "More than one region returned for cluster $region_cluster" && exit 1
  [ -z "$region" ] && region=$DEFAULT_REGION
  [ -z "$region" ] && region="us-east-1"
  log "searching nodes in region $region"
fi

METHOD=GET
ACTION=DescribeInstances
SERVICE=ec2
ENDPOINT="ec2.${region}.amazonaws.com"
VERSION="2013-10-15"
AUTHMETHOD=header

find_by_id() {
  qparams="Filter.1.Name=instance-id&Filter.1.Value=${1}"
}

find_by_ip() {
  if [ "_$NETWORK" == "_external" ]; then
    qparams="Filter.1.Name=ip-address&Filter.1.Value=${1}"
  else
    qparams="Filter.1.Name=private-ip-address&Filter.1.Value=${1}"
  fi
}

printreturn() {
  reservationId=`echo "$1" | grep '"reservationId"/' | cut -sd'|' -f2 | tr -d '"'`
  [ -z "$reservationId" ] && return 1
  instanceId=`echo "$1" | grep '"instanceId"/' | cut -sd'|' -f2 | tr -d '"'`
  imageId=`echo "$1" | grep '"imageId"/' | cut -sd'|' -f2 | tr -d '"'`
  status=`echo "$1" | grep '"instanceState"/0/"name"/' | cut -sd'|' -f2 | tr -d '"'`
  privateDnsName=`echo "$1" | grep '"privateDnsName"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  keyName=`echo "$1" | grep '"keyName"/' | cut -sd'|' -f2 | tr -d '"'`
  instanceType=`echo "$1" | grep '"instanceType"/' | cut -sd'|' -f2 | tr -d '"'`
  launchTime=`echo "$1" | grep '"launchTime"/' | cut -sd'|' -f2 | tr -d '"'`
  availabilityZone=`echo "$1" | grep '"availabilityZone"/' | cut -sd'|' -f2 | tr -d '"'`
  tenancy=`echo "$1" | grep '"tenancy"/' | cut -sd'|' -f2 | tr -d '"'`
  subnetId=`echo "$1" | grep '"subnetId"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  vpcId=`echo "$1" | grep '"vpcId"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  privateIpAddress=`echo "$1" | grep '/"privateIpAddress"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  publicIpAddress=`echo "$1" | grep '/"ipAddress"/' | cut -sd'|' -f2 | tr -d '"'`
  groupId=`echo "$1" | grep '"groupId"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  groupName=`echo "$1" | grep '"groupName"/' | grep -v networkInterfaceSet | cut -sd'|' -f2 | tr -d '"'`
  stateReason=`echo "$1" | grep '"stateReason"/0/"message"/' | cut -sd'|' -f2 | tr -d '"'`
  architecture=`echo "$1" | grep '"architecture"/' | cut -sd'|' -f2 | tr -d '"'`
  rootDeviceType=`echo "$1" | grep '"rootDeviceType"/' | cut -sd'|' -f2 | tr -d '"'`
  virtualizationType=`echo "$1" | grep '"virtualizationType"/' | cut -sd'|' -f2 | tr -d '"'`
  hypervisor=`echo "$1" | grep '"hypervisor"/' | cut -sd'|' -f2 | tr -d '"'`
  ebsOptimized=`echo "$1" | grep '"ebsOptimized"/' | cut -sd'|' -f2 | tr -d '"'`
  echo -e "reservationId|$reservationId\ninstanceId|$instanceId\nimageId|$imageId\nstatus|$status\nprivateDnsName|$privateDnsName\nkeyName|$keyName\ninstanceType|$instanceType\nlaunchTime|$launchTime\navailabilityZone|$availabilityZone\ntenancy|$tenancy\nsubnetId|$subnetId\nvpcId|$vpcId\nprivateIpAddress|$privateIpAddress\npublicIpAddress|$publicIpAddress\ngroupId|$groupId\ngroupName|$groupName\nstateReason|$stateReason\narchitecture|$architecture\nrootDeviceType|$rootDeviceType\nvirtualizationType|$virtualizationType\nhypervisor|$hypervisor\nebsOptimized|$ebsOptimized"
}

lock_cloudops || exit 10

if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the node"
      proper_exit 1 145
    else
      ip=`cat "$rpath/../../nodes.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      fi
    fi
  else
    find_by_ip $ip
  fi
else
  find_by_id $id
fi

[ -n "$verbose" ] && log "sending request"
reqparsed=`aws_api_request $SERVICE $VERSION $AUTHMETHOD $METHOD $ENDPOINT $ACTION $qparams`
echo "$reqparsed" > "$M_TEMP/${rcommand}.resp"
[ `echo "$reqparsed" | wc -l` -eq 0 ] && log "parsed response to $rcommand is empty" && proper_exit 1 153
[ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 154

printreturn "$reqparsed" || exit_status=2

proper_exit $exit_status 158
