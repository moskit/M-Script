#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "Ssh utility not found, exiting" && exit 1
[ -f "/sbin/ifconfig" ] && IFCFG=/sbin/ifconfig || IFCFG=`which ifconfig 2>/dev/null`
possible_options="cluster help region verbose"
commflag=0
for s_option in "${@}"
do
  case ${s_option} in
  --*=*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`
      s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'`
    fi
    ;;
  --*)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
      s_optarg='yes'
    fi
    ;;
  *=*)
    command="$command ${s_option}"
    exit 1
    ;;
  *)
    if [ "$commflag" == "1" ] ; then
      command="$command ${s_option}"
    else
      commflag=1
      command="${s_option}"
    fi
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}"
  done
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options> command"
  echo 
  echo "Without options the command will be run on all servers from servers.list"
  echo
  echo "Options:"
  echo
  echo "  --cluster=clustername    - the command will be run on all servers"
  echo "                             from this cluster."
  echo "  --region=region          - the command will be run on all servers"
  echo "                             from this region."
  echo "  --verbose                - shows each server details before running"
  echo "                             the command."
  exit 0
fi

[ "X$IFCFG" != "X" ] && localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'` || localip="ifconfig_not_found"
[ -n "$cluster" ] || cluster=`cat "${rpath}/../../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*# | cut -d'|' -f5 | sort | uniq`

IFS1=$IFS
IFS='
'
[ -n "$verbose" ] && echo "### Command: $command"
if [ "X$command" != "X" ] ; then
  for cluster in `printf "${cluster}\n"|sed 's|,|\n|g'` ; do
    for server in `cat "${rpath}/../../servers.list" | grep -v ^$ | grep -v  ^#|grep -v ^[[:space:]]*#` ; do
      IP=${server%%|*}
      KEY=`echo $server | cut -d'|' -f2`
      if [ -n "$region" ] ; then
        REGION=`echo $server | cut -d'|' -f3`
        [ "X$REGION" == "X$region" ] || continue
      fi
      if [ -n "$cluster" ] ; then
        CLUSTER=`echo $server | cut -d'|' -f5`
        [ "X$CLUSTER" == "X$cluster" ] || continue
      fi
      if [ "X$verbose" == "Xyes" ] ; then
        echo
        echo "### Server: $server"
        echo
      fi
      if [ `echo $IP | grep -c "$localip"` -ne 0 ] ; then
        eval $command
      else
        $SSH -i "${rpath}/../../keys/${KEY}.pem" -o StrictHostKeyChecking=no $IP "$command"
      fi
    done
  done
fi
IFS=$IFS1

