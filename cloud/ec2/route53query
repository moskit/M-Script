#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`
SSLEX=`which openssl 2>/dev/null`
TMPDIR=/tmp/m_script/cloud/ec2
install -d $TMPDIR
CURL="$CURL -s"

possible_options="region action id zone name type items wholezone noupdate"
necessary_options="action"
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

[ "X$action" == "Xlistzone" ] && [ -z "$type" ] && type="SOA"
[ "X$action" == "Xlistzone" ] && [ -z "$name" ] && name=$zone
[ "X$action" == "Xlistzone" ] && [ -z "$items" ] && items=1
source ${rpath}/../../conf/cloud.conf

request=$TMPDIR/r53query.$$

server_date=`curl -q -s -S -I --max-time 5 --url https://route53.amazonaws.com/date | grep ^Date | awk -F'Date: ' '{print $2}' | sed 's|\r||'`

signature=`printf "$server_date" | $SSLEX dgst -binary -sha1 -hmac $AWS_SECRET_ACCESS_KEY | base64`

case $action in 
  list)
    $CURL -H "Content-Type: text/xml; charset=UTF-8" -H "Date: $server_date" -H "X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AWS_ACCESS_KEY_ID,Algorithm=HmacSHA1,Signature=$signature" https://route53.amazonaws.com/2011-05-05/hostedzone > $TMPDIR/r53.list.xml
    ${rpath}/../../lib/xml2txt $TMPDIR/r53.list.xml > $TMPDIR/r53.list.txt
    grep ^ListHostedZonesResponse_HostedZones_HostedZone_Id $TMPDIR/r53.list.txt | cut -d' ' -f2 | sed 's|/hostedzone/||' > $TMPDIR/r53.list.ids
    while read zoneid ; do
    zonename=`grep -A 1 "${zoneid}$" $TMPDIR/r53.list.txt | tail -1 | cut -d' ' -f2`
    [ -x "$noupdate" ] && [[ `grep -c ^$zoneid|$zonename$ ${rpath}/../../$CLOUD.dnszones.list 2>/dev/null` -eq 0 ]] && echo "$zoneid|$zonename" && echo "$zoneid|$zonename" >> "${rpath}/../../$CLOUD.dnszones.list"
    done < $TMPDIR/r53.list.ids
    ;;
  show)
    if [ -z "$id" ] ; then
      if [ -z "$zone" ] ; then
        echo "Either zone ID or zone name should be defined" && exit 1
      else
        zone="${zone%.}."
        id=`grep "|${zone}$" "${rpath}/../../$CLOUD.dnszones.list" | tail -1| cut -d'|' -f1`
        if [ -z "$id" ] ; then
          echo "Unable to find zone ID of this zone. Zones list is outdated? Run ${0##*/} --list to update it." && exit 1
        fi
      fi
    fi
    if [ -z "$noupdate" ] || [ ! -f $TMPDIR/r53.${id}.show ] ; then
      $CURL -H "Content-Type: text/xml; charset=UTF-8" -H "Date: $server_date" -H "X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AWS_ACCESS_KEY_ID,Algorithm=HmacSHA1,Signature=$signature" https://route53.amazonaws.com/2011-05-05/hostedzone/$id > $TMPDIR/r53.${id}.show
    fi
    echo "------------------------------------------------------------------------------"
    printf "Zone name: ${zone}\tZone id: ${id}\n"
    echo "------------------------------------------------------------------------------"
    ${rpath}/../../lib/xml2txt $TMPDIR/r53.${id}.show | grep ^GetHostedZoneResponse_HostedZone_DelegationSet_NameServers_NameServer | cut -d' ' -f2
    ;;
  listzone)
    if [ -z "$id" ] ; then
      if [ -z "$zone" ] ; then
        echo "Either zone ID or zone name should be defined" && exit 1
      else
        zone="${zone%.}."
        id=`grep "|${zone}$" "${rpath}/../../$CLOUD.dnszones.list" | tail -1| cut -d'|' -f1`
        if [ -z "$id" ] ; then
          echo "Unable to find zone ID of this zone. Zones list is outdated? Run ${0##*/} --list to update it." && exit 1
        fi
      fi
    fi
    if [ -n "$wholezone" ] ; then
      request=$TMPDIR/r53.${id}.listzone.wholezone
    else
      request=$TMPDIR/r53.${id}.listzone.${name}.${type}.${items}
    fi
    echo "------------------------------------------------------------------------------"
    printf "Zone name: ${zone}\tZone id: ${id}\n"
    echo "------------------------------------------------------------------------------"
#    for type in `echo $types | sed 's|,| |g'` ; do
    if [ -z "$noupdate" ] || [ ! -f $request ] ; then
      if [ -z "$wholezone" ] ; then
        $CURL -H "Content-Type: text/xml; charset=UTF-8" -H "Date: $server_date" -H "X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AWS_ACCESS_KEY_ID,Algorithm=HmacSHA1,Signature=$signature" "https://route53.amazonaws.com/2011-05-05/hostedzone/$id/rrset?name=${name%.}&type=${type}&maxitems=${items}" > $request
      else
        $CURL -H "Content-Type: text/xml; charset=UTF-8" -H "Date: $server_date" -H "X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AWS_ACCESS_KEY_ID,Algorithm=HmacSHA1,Signature=$signature" "https://route53.amazonaws.com/2011-05-05/hostedzone/$id/rrset?name=${name%.}" > $request
      fi
    fi
    if [ -z "$noupdate" ] || [ ! -f ${request}.txt ] ; then
      ${rpath}/../../lib/xml2txt $request > ${request}.txt
    fi
    grep ^ListResourceRecordSetsResponse_ResourceRecordSets_ResourceRecordSet_Name ${request}.txt | cut -d' ' -f2 | sort -n | uniq > ${request}.names
    while read recname ; do
      unset thiszone
      ns=`grep -n "ListResourceRecordSetsResponse_ResourceRecordSets_ResourceRecordSet_Name $recname" ${request}.txt | cut -d':' -f1`
      for n in `echo $ns` ; do
        cat ${request}.txt | tail -n +${n} | while read txtline ; do
          var=`echo $txtline | cut -d' ' -f1`
          value=`echo $txtline | cut -d' ' -f2`
          [ "X$var" == "XListResourceRecordSetsResponse_ResourceRecordSets_ResourceRecordSet_Name" ] && [ "X$value" == "X$recname" ] && thiszone=1
          [ "X$var" == "XListResourceRecordSetsResponse_ResourceRecordSets_ResourceRecordSet_Name" ] && [ "X$value" != "X$recname" ] && unset thiszone && break
          if [ -n "$thiszone" ] ; then
            case ${var##*_} in 
            Type)
              rectype=$value
            ;;
            TTL)
              recttl=$value
            ;;
            Value)
              recvalue=$value
            ;;
            esac
          fi
          [ -n "$recvalue" ] && printf "$recname\t$rectype\t$recttl\t$recvalue\n" && unset recvalue
        done
      done
    done < ${request}.names
# done
    ;;
  *)
    postrequest=1
  esac
  
  if [ -n "$postrequest" ] ; then
    $CURL -X POST --upload-file $request -H "Content-Type: text/xml; charset=UTF-8" -H "Date: $server_date" -H "X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=$AWS_ACCESS_KEY_ID,Algorithm=HmacSHA1,Signature=$signature" https://route53.amazonaws.com/2011-05-05/hostedzone
    unset postrequest
  fi
#  rm -f ${request}*
for option in `echo $possible_options | sed 's/,//g'`; do unset $option ; done

