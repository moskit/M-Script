#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

CURL="$CURL -s -k"

possible_options="cloud region cluster image ami aki kernel name return verbose subnet number additional_params log_request"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

if [ "_$help" == "_parameters" ]; then
cat << EOF
AdditionalInfo
BlockDeviceMapping.N
ClientToken                               http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html
DisableApiTermination                     true|false, default false
DryRun
EbsOptimized                              true|false, default false
IamInstanceProfile                        http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfileSpecification.html
ImageId                                   REQUIRED
InstanceInitiatedShutdownBehavior         stop (default) | terminate
InstanceType                              http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
KernelId
KeyName                                   not required but necessary for SSH access
MaxCount                                  REQUIRED
MinCount                                  REQUIRED
Monitoring                                http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstancesMonitoringEnabled.html
NetworkInterface.N                        http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_InstanceNetworkInterfaceSpecification.html
Placement                                 not required but necessary to place instance  http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Placement.html
PrivateIpAddress
RamdiskId
SecurityGroupId.N                         http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html
SecurityGroup.N
SubnetId
UserData
EOF
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "CLOUD not defined" && exit 1
export CLOUD

[ -n "$debug" ] && debug=true || debug=false
[ -n "$dry" ] && dry=true || dry=false

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

lock_cloudops || exit 10

[ -z "$cluster" ] && cluster="$M_CLUSTER"
[ -z "$cluster" ] && echo "Cluster not defined" && exit 1
clusterconf=`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | tail -1`
[ -z "$clusterconf" ] && echo "Cluster $cluster is not configured" && proper_exit 1 108

[ -z "$ami" ] && ami=`echo "$clusterconf" | cut -sd'|' -f6`
[ -z "$ami" ] && echo "ami not found" && proper_exit 1 111
InstanceType=`echo "$clusterconf" | cut -sd'|' -f5`
[ -z "$InstanceType" ] && echo "InstanceType not found" && proper_exit 1 113
[ -z "$number" ] && number=1
secgroup=`echo "$clusterconf" | cut -sd'|' -f4`
keypair=`echo "$clusterconf" | cut -sd'|' -f2`
zone=`echo "$clusterconf" | cut -sd'|' -f3`
qparams="&ImageId=${ami}&InstanceType=${InstanceType}&MinCount=${number}&MaxCount=${number}"
[ -n "$secgroup" ] && qparams="${qparams}&Placement.SecurityGroup.1=${secgroup}"
[ -n "$subnet" ] && qparams="${qparams}&SubnetId=${subnet}"
[ -n "$zone" ] && qparams="${qparams}&Placement.AvailabilityZone=${zone}"

request() {
  timestamp=`date +"%Y-%m-%dT%H%%3A%M%%3A%S"`
  query=`echo -n "AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=RunInstances${qparams}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15"`
  Q=`echo -ne "GET\nec2.amazonaws.com\n/\n$query"`
  signature=`echo -n "$Q"| $SSLEX dgst -binary -sha256 -hmac "$AWS_SECRET_ACCESS_KEY" | base64 | "$M_ROOT"/lib/urlencode`
  if [ "_$log_request" == "_yes" ]; then
    log "$CURL \"https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=RunInstances${qparams}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature\""
    reqres=`$CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=RunInstances${qparams}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature"`
    log "$reqres"
    echo "$reqres" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  else
    $CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=RunInstances${qparams}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  fi
}

log "Checking cluster $cluster limit..."
check_cluster_limit "$cluster" || proper_exit 5 137
[ -z "$name" ] && name=`generate_name $cluster` && log "Name auto-generated: $name"
[ -z "$name" ] && proper_exit 6 139
log "Double-checking name"
IAMACHILD=1 find_node --name="$name" --updatelist >/dev/null 2>&1 && log "Node with name $name already exists!" && proper_exit 6 141

request && log "Request sent" || proper_exit 1 143
reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
[ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
[ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 146

"$M_ROOT"/cloud/common/update_hosts_file && log "/etc/hosts updated" || log "error updating /etc/hosts"
proper_exit $exit_status 149
