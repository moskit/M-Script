#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

CURL="$CURL -s -k"
filter_options="architecture block-device-mapping.delete-on-termination block-device-mapping.device-name block-device-mapping.snapshot-id block-device-mapping.volume-size block-device-mapping.volume-type description hypervisor image-id image-type is-public kernel-id manifest-location name owner-alias owner-id platform product-code product-code.type ramdisk-id root-device-name root-device-type state state-reason-code state-reason-message tag tag-key tag-value virtualization-type"
possible_options="cloud region flavor cluster image ami aki kernel name return verbose help $filter log_request"

necessary_options=""
ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
IFS1=$IFS
IFS='|'
for s_option in $ARGV ; do
  s_optname=${s_option%%=*}
  s_optname=${s_optname/-/_}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g;s/-/_/g;s/\./__/g'`; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

if [[ "$help" =~ "filter" ]]; then
cat << EOF
Syntax: --filter="option1:value1,option2:value2,..."

Available filter options:

architecture - The image architecture (i386 | x86_64).
block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.
block-device-mapping.device-name - The device name for the EBS volume (for example, /dev/sdh).
block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.
block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.
block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | st1 | sc1 | standard).
description - The description of the image (provided during image creation).
hypervisor - The hypervisor type (ovm | xen).
image-id - The ID of the image.
image-type - The image type (machine | kernel | ramdisk).
is-public - A Boolean that indicates whether the image is public.
kernel-id - The kernel ID.
manifest-location - The location of the image manifest.
name - The name of the AMI (provided during image creation).
owner-alias - The AWS account alias (for example, amazon).
owner-id - The AWS account ID of the image owner.
platform - The platform. To only list Windows-based AMIs, use windows.
product-code - The product code.
product-code.type - The type of the product code (devpay | marketplace).
ramdisk-id - The RAM disk ID.
root-device-name - The name of the root device volume (for example, /dev/sda1).
root-device-type - The type of the root device volume (ebs | instance-store).
state - The state of the image (available | pending | failed).
state-reason-code - The reason code for the state change.
state-reason-message - The message for the state change.
tag:key=value - The key/value combination of a tag assigned to the resource.
tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.
tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.
virtualization-type - The virtualization type (paravirtual | hvm).
EOF
exit 0
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

# TODO: add this to cloud config
SignatureMethod=HmacSHA256
SignatureVersion=2
Version="2013-07-15"

[ -n "$image" ] && ami=$image

qparams="${qparams}\nSignatureMethod=${SignatureMethod}\nSignatureVersion=${SignatureVersion}\nVersion=${Version}"
[ -n "$ami" ] && qparams="${qparams}\nImageId.1=$image"

# FC = Filter Chain

for fo in `echo $filter | tr ',' ' ' | tr ':' '='` ; do
  fosh=`echo "$fo" | sed 's/-/_/g;s/\./__/g'`
  foval=`eval echo \\$$fosh`
  [ -n "$foval" ] && FC="$FC&${fo%:*}.1=$foval"
done

[ -n "$FC" ] && qparams="${qparams}\n${FC}"


request() {
  timestamp=`date +"%Y-%m-%dT%H%%3A%M%%3A%S"`
  qparams="${qparams}\nTimestamp=${timestamp}"
  qparams=`echo -e -n "$qparams" | sort | grep -v ^$ | tr '\n' '&'`
  query=`echo -n "AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams%&}"`
  Q=`echo -ne "GET\nec2.amazonaws.com\n/\n$query"`
  signature=`echo -n "$Q" | $SSLEX dgst -binary -sha256 -hmac "$AWS_SECRET_ACCESS_KEY" | base64 | "$M_ROOT"/lib/urlencode`
  if [ "_$log_request" == "_yes" ]; then
    log "$CURL \"https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature\""
    reqres=`$CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature"`
    log "$reqres"
    echo "$reqres" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  else
    $CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  fi
}



request DescribeImages
reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
[ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
[ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 91


