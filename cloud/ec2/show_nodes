#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

LOG="$M_ROOT/logs/cloud.log"

debug=false

possible_options="cloud help region verbose cluster state status filter short noupdate view update_nodes_list forceupdate all count resolveids id name_source log_request"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

[ -z "$region" ] && region=$EC2_REGION
[ -z "$status" ] && [ -n "$state" ] && status=$state
[ -z "$status" ] && status="running"
[ -n "$name_source" ] && NAME_SOURCE=$name_source
[ -z "$NAME_SOURCE_FALLBACK" ] && NAME_SOURCE_FALLBACK=metadata
[ -z "$CLUSTER_TAG" ] && CLUSTER_TAG="cluster"

export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

CURL="$CURL -s -k"
declare -i icount
[ -n "$forceupdate" ] && unset noupdate # for compatibility
[ -n "$filter" ] && filter="${filter},addresses,cluster"

request() {
  timestamp=`date +"%Y-%m-%dT%H%%3A%M%%3A%S"`
  query=`echo -n "AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=DescribeInstances&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15"`
  Q=`echo -ne "GET\nec2.amazonaws.com\n/\n$query"`
  signature=`echo -n "$Q"| $SSLEX dgst -binary -sha256 -hmac "$AWS_SECRET_ACCESS_KEY" | base64 | "$M_ROOT"/lib/urlencode`
  if [ "_$log_request" == "_yes" ]; then
    log "$CURL \"https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=DescribeInstances&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature\""
    reqres=`$CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=DescribeInstances&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature"`
    log "$reqres"
    echo "$reqres" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  else
    $CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=DescribeInstances&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=${timestamp}&Version=2013-07-15&Signature=$signature" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  fi
}

get_iname() {
  for ns in $NAME_SOURCE $NAME_SOURCE_FALLBACK ; do
    case $ns in
      host)
        get_hostname $1
        ;;
      privateDnsName|metadata)
        sname=`echo "$node" | grep '/"privateDnsName"/0' | grep -v networkInterfaceSet | cut -d'|' -f2 | tr -d '"'`
        ;;
      dnsName)
        sname=`echo "$node" | grep '/"dnsName"/0' | grep -v networkInterfaceSet | cut -d'|' -f2 | tr -d '"'`
        ;;
      *)
        # anything else is considered to be a tag as the source (see config)
        NAMETAG="${ns#*:}"
        [ -z "$NAMETAG" ] && NAMETAG=name
        nametagind=`echo "$tags" | grep '/"key"/' | grep \|\"$NAMETAG\" | cut -d'/' -f16`
        sname=`echo "$tags" | grep "\"item\"/$nametagind/\"value\"/" | cut -d'|' -f2 | head -1 | tr -d '"'`
        ;;
    esac
    [ -n "$sname" ] && break
  done
  echo "$sname"
}

list_nodes() {
  $debug && [ -n "$update_nodes_list" ] && log "Updating node list"
  IFS1=$IFS
  IFS='
'
  if [ `cat "$M_TEMP/${rcommand}.resp" 2>/dev/null | wc -l` -gt 0 ]; then
    [ "_$view" == "_raw" ] && cat "$M_TEMP/${rcommand}.resp" && return
    declare -a nodelist
    
#==============================================================================
    for sn in `cat "$M_TEMP/${rcommand}.resp" | awk -F'"reservationSet"/' '{print $2}' | grep instancesSet | cut -d'/' -f1,2,3,4,5,6,7 | sort | uniq` ; do
      unset id name istatus extIP intIP IP imageId flavorId icluster

      node=`grep \"reservationSet\"\/$sn\/ "$M_TEMP/${rcommand}.resp"`
      
      intIP=`echo "$node" | grep '/"privateIpAddress"/' | grep -v networkInterfaceSet | cut -d'|' -f2 | tr -d '"'` # may be multiple
      extIP=`echo "$node" | grep '/"ipAddress"/' | cut -d'|' -f2 | tr -d '"'` # may be multiple
      
      id=`echo "$node" | grep '/"instanceId"/0' | cut -d'|' -f2 | tr -d '"'`
      imageId=`echo "$node" | grep '/"imageId"/0' | cut -d'|' -f2 | tr -d '"'`
      istatus=`echo "$node" | grep '/"instanceState"/0/"name"/0' | cut -d'|' -f2 | tr -d '"'`
      flavorId=`echo "$node" | grep '/"instanceType"/0' | cut -d'|' -f2 | tr -d '"'`
      secgroup=`echo "$node" | grep '/"groupSet"/0/"item"/0/"groupName"' | cut -d'|' -f2 | sort | uniq | tr -d '"' | tr '\n' ','`
      izone=`echo "$node" | grep '/"placement"/0/"availabilityZone"/0' | cut -d'|' -f2 | tr -d '"'`
      iaki=`echo "$node" | grep '/"kernelId"/0' | cut -d'|' -f2 | tr -d '"'`
      #iari=`echo "$sn" | grep '/"ipAddress"/0' | cut -d'|' -f2 | tr -d '"'`
      if [ "_$NETWORK" == "_external" ] ; then
        IP=$extIP
      else
        IP=$intIP
      fi

      tags=`echo "$node" | grep '/"tagSet"/'`
      iname=`get_iname $IP`
      iclustertag=`echo "$tags" | grep '/"key"/' | grep \|\"$CLUSTER_TAG\" | cut -d'/' -f16`
      if [ -n "$iclustertag" ]; then
        icluster=`echo "$tags" | grep "\"item\"/$iclustertag/\"value\"/" | cut -d'|' -f2 | head -1 | tr -d '"'`
      else
        [ -z "$all" ] && continue
      fi
      
      ikey=`echo "$node" | grep '/"keyName"/0' | cut -d'|' -f2 | tr -d '"'`
      
      bdevs=`echo "$node" | grep '/"blockDeviceMapping"/'`
      unset ebs
      for bdev in `echo "$bdevs" | grep '|"attached"' | cut -d'/' -f16 | sort | uniq` ; do
        bdevname=`echo "$bdevs" | grep "/$bdev/\"deviceName\"" | cut -d'|' -f2 | tr -d '"'`
        bdevid=`echo "$bdevs" | grep "/$bdev/\"volumeId\"" | cut -d'|' -f2 | tr -d '"'`
        bdevsince=`echo "$bdevs" | grep "/$bdev/\"attachTime\"" | cut -d'|' -f2 | tr -d '"'`
        ebs+=("$bdevid|$bdevname|$bdevsince")
      done

      if [ -z "$update_nodes_list" ] ; then

        if [ -n "$cluster" ] || [ -n "$all" ]; then
          [ -n "$cluster" ] && [[ "$cluster" != "$icluster" ]] && continue

          [ "_$status" != "_$istatus" ] && [ "_$status" != "_all" ] && continue
          extIPprint=`echo "$extIP" | sed 's|\n|,|'`
          intIPprint=`echo "$intIP" | sed 's|\n|,|'`
          case $view in
            list)
              echo "ID: $id  Name: $iname  Status: $istatus  ext IP: $extIPprint  intIP: $intIPprint  Cluster: $icluster  Image: $imageId  Size: $flavorId  AKI: $iaki  ARI: $iari  Security group: $secgroup  Zone: $izone  Keypair: $ikey"
              echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g;s_|_  _g'
              ;;
            table)
              echo "$id|$iname|$istatus|$extIPprint|$intIPprint|$icluster|$imageId|$flavorId|$iaki|$iari|$secgroup|$izone|$ikey"
              echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g'
              ;;
            column)
              echo -e "ID: $id\nName: $iname\nStatus: $istatus\next IP: $extIPprint\nintIP: $intIPprint\nImage: $imageId\nAKI: $iaki\nARI: $iari\nSize: $flavorId\nSecurity group: $secgroup\nZone: $izone\nKeypair: $ikey\n"
              echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g;s_|_  _g'
              ;;
            none)
              ;;
            *)
              echo -e "------------------------------------------------------------------------------\nNode ID: $id    Name: $iname    Cluster: $icluster\nPublic IP: $extIPprint    Private IP: $intIPprint\nNode image: $imageId    AKI: $iaki    ARI: $iari\nNode size: $flavorId    Status: $istatus    Keypair: $ikey\nSecurity group: $secgroup    Zone: $izone"
              [ ${#ebs[*]} -ne 0 ] && echo "${ebs[*]}" | grep -v ^$ | sed 's_^_  EBS: _g;s_|_  _g'
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^$icluster\| "$M_ROOT/conf/clusters.conf"` -ne 0 ] ; then
            key=`grep ^$icluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f2`
            [ "_$key" != "_$ikey" ] && log "Warning: key name from conf/clusters.conf ($key) for node $IP (name: $iname) doesn't match the one from node metadata ($ikey)" && key="$ikey"
            check_super_cluster $ip "$icluster" && continue
            nodelist+=("$IP|$key|$izone|$iname|$icluster|$CLOUD")
          fi
        fi
      fi
    done
    if [ -n "$update_nodes_list" ]; then
      if [ ${#nodelist[*]} -eq 0 ]; then
        log "ERROR: generated list is empty, not saving it"
      else
        log "saving generated list (${#nodelist[*]} nodes)"
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done > "$M_ROOT/cloud/nodes.list.${CLOUD}"
      fi
    fi
  else
    [ -z "$noupdate" ] && echo "No data to output. Check API request result: $M_TEMP/${rcommand}.resp" || echo "No data. Check if there is any existing data to output: $M_TEMP/${rcommand}.resp and run without --noupdate if necessary."
    proper_exit 1 223
  fi
  IFS=$IFS1
}

if [ -z "$noupdate" ]; then
  changed=0
  [ -f "$M_TEMP/${rcommand}.resp" ] && mv "$M_TEMP/${rcommand}.resp" "$M_TEMP/${rcommand}.resp.prev" || touch "$M_TEMP/${rcommand}.resp.prev"
  [ -f "$M_TEMP/nodes.bdevs" ] && mv "$M_TEMP/nodes.bdevs" "$M_TEMP/nodes.bdevs.prev" || touch "$M_TEMP/nodes.bdevs.prev"
  [ -n "$verbose" ] && log "sending request"
  request
  reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
  [ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 244
  [ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 245
else
  # force update if the tmp file is older than FORCE_LIST_UPDATE_AFTER
  # if no setting, force update is disabled
  if [ -n "$FORCE_LIST_UPDATE_AFTER" ]; then
    tmpfileage=$(expr `date +"%s"` - `stat -c "%Z" "$M_TEMP/${rcommand}.resp" || echo 0` || echo 86400)
    [ $tmpfileage -gt $FORCE_LIST_UPDATE_AFTER ] && unset noupdate
  fi
  [ -n "$verbose" ] && log "not sending request: noupdate is set, using existing data"
  [ ! -e "$M_TEMP/${rcommand}.resp" ] && echo "No existing data found, run without --noupdate" && log "file $M_TEMP/${rcommand}.resp not found" && proper_exit 1 245
  [ `cat "$M_TEMP/${rcommand}.resp" | wc -l` -eq 0 ] && echo "No existing data found, run without --noupdate" && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 246
fi

list_nodes

[ -n "$count" ] && echo $icount
proper_exit 0 252
