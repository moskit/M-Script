#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

source $M_ROOT/conf/mon.conf
source $M_ROOT/conf/cloud.conf
source $M_ROOT/lib/functions.sh
source $M_ROOT/lib/cloud_functions.sh
TMPDIR="${TMPDIR}/cloud/${CLOUD}"
LOG="$M_ROOT"/logs/cloud.log

possible_options="id name ip verbose force"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && echo "Stop server? Which one?" && exit 1
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$force" ] && force=true || force=false
removed=false

find_by_ip() {
  show_servers >/dev/null
  id=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f1,3 | grep \|${1}$ | cut -d'|' -f2`
  [ -z "$id" ] && id=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f2,3 | grep \|${1}$ | cut -d'|' -f2`
}

if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the server"
      exit 1
    else
      ip=`cat "${rpath}/../../servers.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      [ `echo $ip | wc -w` -gt 1 ] && echo "Found more than 1 IP for this name! Exiting." && exit 1
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      else
        show_servers >/dev/null
        id=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f3,13 | grep \|${name}$ | cut -d'|' -f1`
      fi
    fi
  else
    find_by_ip $ip
  fi
else
  if [ -f "${TMPDIR}/servers.${EC2_REGION}.ips" ] ; then
    show_servers >/dev/null
  fi
  name=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f3,13 | grep ^${id}\| | cut -d'|' -f2`
  ipint=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f1,3 | grep ^${id}\| | cut -d'|' -f1`
  ipext=`"${TMPDIR}/servers.${EC2_REGION}.ips" | cut -d'|' -f2,3 | grep ^${id}\| | cut -d'|' -f1`
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && exit 1
req="/servers/$id"

IPS=( "${ipint}" "${ipext}" "${ip}" )

${EC2_TOOLS_BIN_PATH}/ec2-terminate-instances -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $EC2_REGION $ID >> "$M_ROOT"/logs/cloud.log && log "(EC2) server name ${name}, id ${id}, IP ${IPS[*]} terminated succesfully" && removed=true 

if [ $removed -o $force ]; then
  SSHK=`which ssh-keygen 2>/dev/null`
  [ -n "$name" ] && $SSHK -q -R "$name" >/dev/null 2>&1 && log "(EC2) $name removed from known_hosts"

  for ipa in ${IPS[*]} ; do
    if [ -n "$ipa" ] ; then
      $SSHK -q -R "$ipa" >/dev/null 2>&1 && log "(EC2) $ipa removed from known_hosts"
      sed -i "/^$ipa|/d" "${rpath}/../../servers.list" && log "(EC2) $ipa removed from servers.list"
      sed -i "/^$ipa /d" /etc/hosts && log "(EC2) $ipa removed from /etc/hosts"
    fi
  done
  
  for bcluster in $APP_SERVERS ; do
    [ "X${bcluster%%|*}" == "X$cluster" ] && needs_balancer=true
  done
  if $needs_balancer ; then
    if [ -n "$BALANCER" ] ; then
      case "$BALANCER" in
      nginx)
        update_nginx_proxy
        ;;
      esac
    fi
  fi

fi


