#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
SSLEX=`which openssl 2>/dev/null`
[ -z "$SSLEX" ] && echo "openssl binary not found" && exit 1

possible_options="name id to from log_request cloud action zone type size snapshot iops kmskey encrypted as view"
necessary_options="action"
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"

CURL="$CURL -s -k"

[ -n "$zone" ] && qparams="AvailabilityZone=${zone}"
[ -n "$size" ] && qparams="${qparams}\nSize=${size}"
[ -n "$type" ] && qparams="${qparams}\nVolumeType=${type}"
[ -n "$snapshot" ] && qparams="${qparams}\nSnapshotId=${snapshot}"
[ -n "$kmskey" ] && qparams="${qparams}\nKmsKeyId=${kmskey}"
[ -n "$iops" ] && qparams="${qparams}\nIops=${iops}"
[ -n "$encrypted" ] && qparams="${qparams}\nEncrypted=${encrypted}"
[ -n "$to" ] && qparams="${qparams}\nInstanceId=${to}"
[ -n "$id" ] && qparams="${qparams}\nVolumeId=${id}"
[ -n "$as" ] && qparams="${qparams}\nDevice=${as}"

# TODO: add this to cloud config
SignatureMethod=HmacSHA256
SignatureVersion=2
Version="2013-07-15"

qparams="${qparams}\nSignatureMethod=${SignatureMethod}\nSignatureVersion=${SignatureVersion}\nVersion=${Version}"

request() {
  timestamp=`date +"%Y-%m-%dT%H%%3A%M%%3A%S"`
  qparams="${qparams}\nTimestamp=${timestamp}"
  qparams=`echo -e -n "$qparams" | sort | grep -v ^$ | tr '\n' '&'`
  query=`echo -n "AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams%&}"`
  Q=`echo -ne "GET\nec2.amazonaws.com\n/\n$query"`
  signature=`echo -n "$Q"| $SSLEX dgst -binary -sha256 -hmac "$AWS_SECRET_ACCESS_KEY" | base64 | "$M_ROOT"/lib/urlencode`
  if [ "_$log_request" == "_yes" ]; then
    log "$CURL \"https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature\""
    reqres=`$CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature"`
    log "$reqres"
    echo "$reqres" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  else
    $CURL "https://ec2.amazonaws.com/?AWSAccessKeyId=${AWS_ACCESS_KEY_ID}&Action=${1}&${qparams}Signature=$signature" | "$M_ROOT"/lib/xml2txt | grep -v ^$ > "$M_TEMP/${rcommand}.resp"
  fi
}

printlist() {
  for n in `echo "$reqparsed" | grep -v 'xmlns=' | cut -sd'/' -f8 | grep -v ^$ | sort -n | uniq` ; do
    vol=`echo "$reqparsed" | grep \"volumeSet\"\/0\/\"item\"\/$n\/`
    volid=`echo "$vol" | grep \"volumeSet\"\/0\/\"item\"\/$n\/\"volumeId\" | cut -sd'|' -f2 | tr -d '"'`
    volsize=`echo "$vol" | grep '"size"' | cut -sd'|' -f2 | tr -d '"'`
    volstatus=`echo "$vol" | grep \"volumeSet\"\/0\/\"item\"\/$n\/\"status\" | cut -sd'|' -f2 | tr -d '"'`
    volattachedto=`echo "$vol" | grep '"attachmentSet"' | grep '"instanceId"' | cut -sd'|' -f2 | tr -d '"'`
    if [ -n "$view" ]; then
      volcreatetime=`echo "$vol" | grep '"createTime"' | cut -sd'|' -f2 | tr -d '"'`
      volzone=`echo "$vol" | grep '"availabilityZone"' | cut -sd'|' -f2 | tr -d '"'`
      volattachedas=`echo "$vol" | grep '"attachmentSet"' | grep '"device"' | cut -sd'|' -f2 | tr -d '"'`
      volattachstatus=`echo "$vol" | grep '"attachmentSet"' | grep '"status"' | cut -sd'|' -f2 | tr -d '"'`
      volattachtime=`echo "$vol" | grep '"attachmentSet"' | grep '"attachTime"' | cut -sd'|' -f2 | tr -d '"'`
      voldeleteonterm=`echo "$vol" | grep '"attachmentSet"' | grep '"deleteOnTermination"' | cut -sd'|' -f2 | tr -d '"'`
      voltype=`echo "$vol" | grep '"volumeType"' | cut -sd'|' -f2 | tr -d '"'`
      voliops=`echo "$vol" | grep '"iops"' | cut -sd'|' -f2 | tr -d '"'`
      case $view in
        list)
          echo "ID: $id  Name: $iname  Status: $istatus  ext IP: $extIPprint  intIP: $intIPprint  Cluster: $icluster  Image: $imageId  Size: $flavorId  AKI: $iaki  ARI: $iari  Security group: $secgroup  Zone: $izone  Keypair: $ikey"
          echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g;s_|_  _g'
          ;;
        table)
          echo "$id|$iname|$istatus|$extIPprint|$intIPprint|$icluster|$imageId|$flavorId|$iaki|$iari|$secgroup|$izone|$ikey"
          echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g'
          ;;
        column)
          echo -e "ID: $id\nName: $iname\nStatus: $istatus\next IP: $extIPprint\nintIP: $intIPprint\nImage: $imageId\nAKI: $iaki\nARI: $iari\nSize: $flavorId\nSecurity group: $secgroup\nZone: $izone\nKeypair: $ikey\n"
          echo "${ebs[*]}" | grep -v ^$ | sed 's_^_EBS: _g;s_|_  _g'
          ;;
        none)
          ;;
        *)
          echo -e "------------------------------------------------------------------------------\nNode ID: $id    Name: $iname    Cluster: $icluster\nPublic IP: $extIPprint    Private IP: $intIPprint\nNode image: $imageId    AKI: $iaki    ARI: $iari\nNode size: $flavorId    Status: $istatus    Keypair: $ikey\nSecurity group: $secgroup    Zone: $izone"
          [ ${#ebs[*]} -ne 0 ] && echo "${ebs[*]}" | grep -v ^$ | sed 's_^_  EBS: _g;s_|_  _g'
          ;;
      esac
    else
      echo "Volume: $volid  Size: ${volsize}GB  Status: $volstatus  Attached To: ${volattachedto-None}"
    fi
    
  done
}

case $action in
  create)
    [ -z "$zone" ] && echo "Availability zone is mandatory, use option --zone" && proper_exit 1 114
    [ -z "$size" ] && [ -z "$snapshot" ] && echo "If EBS volume is not created from a snapshot, its size is mandatory" && exit 1
    request CreateVolume
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    [ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
    [ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 91
    ;;
  attach)
    [ -z "$to" ] && echo "Instance ID to attach this volume to not provided, use option --to" && proper_exit 1 118
    [ -z "$id" ] && echo "Volume ID not provided, use option --id" && proper_exit 1 119
    [ -z "$as" ] && echo "Volume device name not provided, use option --as" && proper_exit 1 120
    request AttachVolume
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    [ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
    [ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 91
    ;;
  detach)
    [ -z "$from" ] && echo "Instance ID to detach this volume from not provided, use option --from" && proper_exit 1 127
    [ -z "$id" ] && echo "Volume ID not provided, use option --id" && proper_exit 1 119
    request DetachVolume
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    [ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
    [ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 132
    ;;
  show|list)
    request DescribeVolumes
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    [ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 90
    [ `echo "$reqparsed" | grep -c Error` -ne 0 ] && log "request failed with error `echo "$reqparsed" | grep Error | cut -d'|' -f2`" && proper_exit 1 91
    reqparsed=`printlist`
    ;;
  *)
    echo "Action $action is not supported yet"
    proper_exit 1 100
    ;;
esac

echo "$reqparsed"
