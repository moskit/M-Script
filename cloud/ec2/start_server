#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

possible_options="cluster ami number aki region zone type return verbose"
necessary_options=""
[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi
source $M_ROOT/conf/mon.conf
source $M_ROOT/conf/clouds/${CLOUD}.conf
source $M_ROOT/lib/cloud_functions.sh
LOG=$M_ROOT/logs/cloud.log


for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_TOOLS_BIN_PATH JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT EC2_REGION EC2_AK ; do
  [ -z "`eval echo \\$\$var`" ] && echo "$var is not defined! Define it in conf/clouds/${CLOUD}.conf please." && exit 1
done
PATH="${EC2_TOOLS_BIN_PATH}:${PATH}"
export JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_REGION PATH

M_TEMP=$M_TEMP/cloud/ec2
install -d $M_TEMP

[ -n "$region" ] && EC2_REGION=$region

[ "X`which ec2-run-instances`" == "X" ] && echo "API Tools needed" && exit 1
### Cluster name|Key name|Availability zone|Security group|Instance type|AMI|Auto-scalability limit|M-Script path|Compatibility|Role|Flavor
if [ -n "$cluster" ] ; then
  check_cluster_limit "$cluster"
  [ $? -eq 1 ] && log "Cluster limit reached, not starting new instance" && exit 1
  if [ -z "$ami" ] ; then
    #amiID=`ec2-describe-images -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $EC2_REGION | grep ^IMAGE | awk '{print $2" "$3}' | grep "${cluster}" | head -1 | awk '{print $1}'`
    amiID=`cat ${rpath}/../../conf/clusters.conf | grep ^$cluster\| | cut -d'|' -f6`
  else
    amiID=$ami
  fi
  [ -n "$type" ] || type=`cat ${rpath}/../../conf/clusters.conf | grep ^$cluster\| | cut -d'|' -f5`
fi
secgroup=`cat ${rpath}/../../conf/clusters.conf | grep ^$cluster\| | cut -d'|' -f4`

[ -z "$number" ] && number="-n 1" || snumber="-n $snumber"
[ -n "$amiID" ] && log "Starting $number $type server(s) in region $EC2_REGION from image $amiID" || (log "AMI not defined" && exit 1)

[ -z "$aki" ] || aki="--kernel $aki"
[ -z "$zone" ] || zone="-z $zone"
[ -z "$type" ] || type="-t $type"
[ -n "$secgroup" ] && for sg in `echo $secgroup | tr ',' ' '`; do secgr="$secgr -g $secgroup" ; done

ec2-run-instances -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" -k $EC2_AK --region $EC2_REGION $aki $zone $number $type $secgr $amiID > "$M_TEMP"/start_server.resp
[ $? -ne 0 ] && log "Error starting instances" && exit 1

instances=`cat "$M_TEMP"/start_server.resp | grep ^INSTANCE | awk '{print $2}' | sed 's/\n/ /g'`
[ "X$instances" == "XERROR" ] && log "Error starting instances" && exit 1
log "Instances initiated: $instances"

for instance in $instances ; do
  [ "X$cluster" == "X" ] || ec2tag -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $EC2_REGION $instances --tag cluster=${cluster} >/dev/null
  name=`generate_name $cluster 2>/dev/null`
  [ "X$name" == "X" ] || ec2tag -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $EC2_REGION $instances --tag Name=${name} >/dev/null
done

log "Waiting for the instance ready"
for ((i=0; i<10; i++)) ; do
  sleep 30
  for instance in $instances ; do
    istate=`"${rpath}"/show_servers --view=table | grep ^$instance\| | cut -d'|' -f3`
    [ -n "$verbose" ] && log "Instance $instance state: $istate"
    if [ "X$istate" == "Xrunning" ] ; then
      log "Instance $instance has booted up"
      if [ -n "$return" ] ; then
        case $return in
          id|ids)
            echo $instance
            ;;
          ip|ips)
            if [ "X$NETWORK" == "Xexternal" ] ; then
              "${rpath}"/show_servers --id=$instance --filter=extIP
            else
              "${rpath}"/show_servers --id=$instance --filter=inIP
            fi
            ;;
          *)
            "${rpath}"/show_servers --id=$instance
            ;;
        esac
      else
        "${rpath}"/show_servers --id=$instance
      fi
      instances=`echo $instances | sed "s|$instance||"`
    fi
  done
  [ -n "`echo "$instances" | tr -d ' '`" ] || break
done
log "Updating servers list"
$rpath/update_servers_list >/dev/null
log "Finished"

