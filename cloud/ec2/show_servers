#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/
DIFF=`which diff 2>/dev/null`
[ -z "$DIFF" ] && echo "Diff utility not found, exiting..  " && exit 1
SED=`which sed 2>/dev/null`
[ -z "$SED" ] && echo "Sed utility not found, exiting..  " && exit 1
SSH=`which ssh 2>/dev/null`
[ -z "$SSH" ] && echo "Ssh utility not found, exiting..  " && exit 1
IFCFG=`which ifconfig 2>/dev/null`
# Normally needed for localhost only, and not always: depends on system.
# Hostnames of remote servers are obtained via ssh which is a login shell;
# this is why the variable below is not used for remote servers: you may
# have different OSes there with different paths to hostname utility.
HOSTNAME=`which hostname 2>/dev/null`

add_server() {
  if [ "X$NETWORK" == "Xexternal" ] ; then
    IP=$extIP
  else
    IP=$intIP
  fi
  if [ -n "$IP" ] ; then
    if [ -f "${rpath}/../../keys/${keypair}.pem" ] ; then
      key=${keypair}.pem
    elif [ -f "${rpath}/../../keys/${keypair}" ] ; then
      key=${keypair}
    else
      message=" (key ${rpath}/../../keys/${keypair}{.pem} not found)"
    fi
  fi
  # altname was supposed to be an alternative source (from instance tags), but
  # it is reconsidered due to no good way to inject the name into the new server
  if [ -n "$altname" ]; then
    sname=$altname
  elif [ -n "$IP" ] ; then
    log "Name not found, retrieving one from the host"
    if [ `echo $localip | grep -c "^$IP$"` -ne 0 ] ; then
      sname=`$HOSTNAME`
    else
      sname=`$SSH -i "${rpath}/../../keys/${key}" -o StrictHostKeyChecking=no -o ConnectionAttempts=1 -o ConnectTimeout=10 $inIP hostname 2>/dev/null` || sname=`$SSH -i "${rpath}/../../keys/${key}" -o StrictHostKeyChecking=no -o ConnectionAttempts=1 -o ConnectTimeout=10 $extIP hostname 2>/dev/null`
    fi
  fi
  [ "X$sname" == "X" ] && log "Unable to retrieve hostname of the server with IP $inIP|$extIP$message" && unset message
  echo "$inIP|$extIP|$iID|$ami|$state|$keypair|$isize|$secgroup|$started|$zone|$aki|$ari|$sname|$cluster" >> "$M_TEMP/servers.${region}.ips"
  if [ -n "${bID[*]}" ]; then
    for ((i=0; i<${#bID[*]}; i++)) ; do echo "$iID|${bID[$i]}|${bdev[$i]}|${bstarted[$i]}" >> $M_TEMP/servers.${region}.bdevs ; done 
  fi
  unset inIP extIP iID ami state keypair isize secgroup started zone aki ari cluster sname altname bID bdev bstarted
}

list_servers() {
  IFS1=$IFS
  IFS='
'
  if [ -f "$M_TEMP/servers.${region}.ips" ] ; then
    for sn in `cat "$M_TEMP/servers.${region}.ips"` ; do
      unset id name istatus extIP intIP IP imageId flavorId region icluster
      
      for LINE in `grep "/servers/${sn}/" "${M_TEMP}/${rcommand}.resp"` ; do
        LINE=`echo $LINE | awk -F"servers/${sn}/" '{print $2}'`
        lvar=`echo $LINE | cut -d'|' -f1`
        if [ -n "$filter" ] ; then
          for fvar in `echo -e ${filter} | tr ',' '\n'` ; do            
            [[ $lvar =~ $fvar ]] || continue 2
          done
        fi
        lvalue=`echo $LINE | cut -d'|' -f2`
        case $lvar in
          imageId)
            [ -n "$resolveids" ] && imageId=`imageid $lvalue` || imageId=$lvalue
            ;;
          flavorId)
            [ -n "$resolveids" ] && flavorId=`flavorid $lvalue` || flavorId=$lvalue
            ;;
          status)
            istatus=`echo $lvalue | sed 's|.|\l&|g'`
            ;;
          addresses/public/*)
            extIP="$extIP $lvalue"
            ;;
          addresses/private/*)
            intIP="$intIP $lvalue"
            ;;
          metadata/cluster)
            icluster="$lvalue"
            ;;
          *)
            eval "$lvar=\"$lvalue\""
            ;;
        esac
      done
      if [ "X$NETWORK" == "Xexternal" ] ; then
        IP=$extIP
      else
        IP=$intIP
      fi
      for ip in $IP ; do
        ip=${ip#* } ; ip=${ip% *}
        if [ -z "$icluster" ] ; then
          # servers having no cluster in metadata but added manually to servers.list
          icluster=`grep ^$ip\| "${rpath}/../../servers.list" | cut -d'|' -f5` && break
        else
          # no icluster means that server will not be shown, but only if there
          # is no option --all. With this option, however, we want to see all
          # clusters assigned via metadata
          [ `grep -c ^$icluster\| "${rpath}/../../conf/clusters.conf"` -eq 0 -a -z "$all" ] && unset icluster
        fi
      done
      if [ -z "$update_servers_list" ] ; then
        # icluster existence condition is needed for the case there are multiple
        # projects (cluster groups) in the same cloud.
        # Note that if you use same names for clusters in different cluster
        # groups, you'll get them mixed here.
        if [ -n "$icluster" -o -n "$all" ] ; then
          [ -n "$cluster" -a "$cluster" != "$icluster" ] && continue
          [ "X$status" != "X$istatus" ] && [ "X$status" != "Xall" ] && continue
          extIP=${extIP#* } ; extIP=${extIP% *}
          intIP=${intIP#* } ; intIP=${intIP% *}
          case $view in
            list)
              echo "ID: $id  Name: $name  Status: $status  ext IP: $extIP  intIP: $intIP  Cluster: $icluster  Image: $imageId  Size: $flavorId"
              ;;
            table)
              echo "${id}|${name}|${status}|${extIP}|${intIP}|${icluster}|${imageId}|${flavorId}"
              ;;
            column)
              echo -e "ID: $id\nName: $name\nStatus: $status\next IP: $extIP\nintIP: $intIP\nImage: $imageId\nSize: $flavorId\n"
              ;;
            none)
              ;;
            *)
              echo "------------------------------------------------------------------------------"
              echo "Server ID: $id    Name: $name    Cluster: $icluster"
              echo "Public IP: $extIP"
              echo "Private IP: $intIP"
              echo "Server image: $imageId"
              echo "Server size: $flavorId    Status: $istatus"
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^${icluster}\| "${rpath}/../../conf/clusters.conf"` -ne 0 ] ; then
            key=`grep ^${icluster}\| "${rpath}/../../conf/clusters.conf" | cut -d'|' -f2`
            for ip in $IP ; do
              ip=${ip#* } ; ip=${ip% *}
              sed -i /^$ip\|/d "${rpath}/../../servers.list"
              echo "${ip}|${key}|${region}|${name}|${icluster}" >> "${rpath}/../../servers.list"
            done
          fi
        fi
      fi
      
    done
  else
    echo "No data. Run without --noupdate"
  fi
  for listip in `cat "${rpath}/../../servers.list" | grep -v ^# | grep -v ^$ | cut -d'|' -f1` ; do
    [ `grep -c \|${listip}$ "${M_TEMP}/${rcommand}.resp"` -eq 0 -o $(grep -c "^`grep ^${listip}\| "${rpath}/../../servers.list" | cut -d'|' -f5`|" "${rpath}/../../conf/clusters.conf") -eq 0 ] && sed -i /^${listip}\|/d "${rpath}/../../servers.list"
  done
  IFS=$IFS1
}


possible_options="help region verbose cluster state filter short noupdate view update_servers_list forceupdate all status count resolveids"
necessary_options=""
#[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
if [ "X$help" == "Xyes" ] ; then
  echo "Usage: ${0##*/} <options>"
  echo 
  echo "Without options all found clusters will be synced"
  echo
  echo "Options:"
  echo
  echo "  --region=region          - syncs only servers in this region."
  exit 0
fi

source $M_ROOT/conf/mon.conf
source $M_ROOT/conf/cloud.conf
source $M_ROOT/lib/functions.sh
source $M_ROOT/lib/cloud_functions.sh
LOG=$M_ROOT/logs/cloud.log

for var in JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT EC2_REGION EC2_TOOLS_BIN_PATH ; do
  [ -z "`eval echo \\$\$var`" ] && log "$var is not defined! Define it in conf/cloud.conf please." && exit 1
done
PATH="${EC2_TOOLS_BIN_PATH}:${PATH}"
export JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT EC2_REGION PATH
M_TEMP=$M_TEMP/cloud/ec2
install -d $M_TEMP

[ -z "$region" ] && region=$EC2_REGION
log "region: $region"

[ "X$IFCFG" == "X" ] || localip=`$IFCFG | sed '/inet\ /!d;s/.*r://;s/\ .*//' | grep -v '127.0.0.1'`

changed=0
[ -f $M_TEMP/servers.${region}.ips ] && mv $M_TEMP/servers.${region}.ips $M_TEMP/servers.${region}.ips.prev || touch $M_TEMP/servers.${region}.ips.prev
[ -f $M_TEMP/servers.${region}.bdevs ] && mv $M_TEMP/servers.${region}.bdevs $M_TEMP/servers.${region}.bdevs.prev || touch $M_TEMP/servers.${region}.bdevs.prev
[ ! -x ${EC2_TOOLS_BIN_PATH}/ec2-describe-instances ] && log "ec2-describe-instances binary not found! Exiting.." && exit 1

[ -z "$noupdate" ] && ${EC2_TOOLS_BIN_PATH}/ec2-describe-instances -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $region | sed 's/\t/|/g' > $M_TEMP/servers.${region}.tmp

[ ! -f "$M_TEMP/servers.${region}.tmp" ] && log "file $M_TEMP/servers.${region}.tmp not found" && exit 1
[ `cat "$M_TEMP/servers.${region}.tmp" | wc -l` -eq 0 ] && log "file $M_TEMP/servers.${region}.tmp is empty" && exit 1

firstline=1
IFS1=$IFS
IFS='
'
for SERVER in `cat $M_TEMP/servers.${region}.tmp`
do
  if [[ $SERVER =~ ^RESERVATION ]] ; then 
    if [[ $firstline -eq 0 ]] ; then
      add_server
    else
      firstline=0
    fi
    secgroup=`echo $SERVER | cut -d'|' -f4`
  fi
  if [[ $SERVER =~ ^INSTANCE ]] ; then
    inIP=`echo $SERVER | cut -d'|' -f18`
    extIP=`echo $SERVER | cut -d'|' -f17`
    iID=`echo $SERVER | cut -d'|' -f2`
    ami=`echo $SERVER | cut -d'|' -f3`
    state=`echo $SERVER | cut -d'|' -f6`
    keypair=`echo $SERVER | cut -d'|' -f7`
    isize=`echo $SERVER | cut -d'|' -f10`
    started=`echo $SERVER | cut -d'|' -f11`
    zone=`echo $SERVER | cut -d'|' -f12`
    aki=`echo $SERVER | cut -d'|' -f13`
    ari=`echo $SERVER | cut -d'|' -f14`
  fi
  if [[ $SERVER =~ ^TAG ]] ; then
    tag=`echo $SERVER | cut -d'|' -f4`
    [ "X$tag" == "Xcluster" ] && cluster=`echo $SERVER | cut -d'|' -f5`
    [ "X$tag" == "XName" ] && altname=`echo $SERVER | cut -d'|' -f5`
  fi
  if [[ ${1} =~ ^BLOCKDEVICE ]] ; then
    bdev+=("`echo ${1} | cut -d'|' -f2`")
    bID+=("`echo ${1} | cut -d'|' -f3`")
    bstarted+=("`echo ${1} | cut -d'|' -f4`")
  fi
done
add_server

if [ -n "$update_servers_list" ]; then
  [ -z "$forceupdate" ] && [ -f $M_TEMP/servers.${region}.ips.prev ] && [ -f $M_TEMP/servers.${region}.ips ] && [ -z "`$DIFF -q $M_TEMP/servers.${region}.ips.prev $M_TEMP/servers.${region}.ips`" ] && exit 0
  for SERVER in `cat "$M_TEMP/servers.${region}.ips"`
  do
    if [ "X$NETWORK" == "Xexternal" ] ; then
      IP=`echo $SERVER | cut -d'|' -f2`
    else
      IP=`echo $SERVER | cut -d'|' -f1`
    fi
    keypair=`echo $SERVER | cut -d'|' -f6`
    sname=`echo $SERVER | cut -d'|' -f13`
    icluster=`echo $SERVER | cut -d'|' -f14`
    if [ -z "$icluster" ] ; then  # added manually?
      icluster=`cat "${rpath}/../../servers.list" | grep ^$IP\|${keypair}\|${region}\| | cut -d'|' -f5`
    fi
    [ -z "$icluster" ] && continue
    [ `cat "$M_ROOT/conf/clusters.conf" | grep -v ^# | cut -d'|' -f1 | grep -c ^${icluster}$` -eq 0 ] && continue

#    echo "${IP}|${keypair}|${region}|${sname}|${icluster}" >> "$M_TEMP/servers.list"

    if [ -n "$icluster" ] ; then
      if [ `grep -c ^${icluster}\| "${rpath}/../../conf/clusters.conf"` -ne 0 ] ; then
        [ -z "$keypair" ] && keypair=`grep ^${icluster}\| "${rpath}/../../conf/clusters.conf" | cut -d'|' -f2`
        sed -i /^$IP\|/d "${rpath}/../../servers.list"
        echo "${IP}|${keypair}|${region}|${sname}|${icluster}" >> "${rpath}/../../servers.list"

      fi
    fi
    for listip in `cat "${rpath}/../../servers.list" | grep -v ^# | grep -v ^$ | cut -d'|' -f1` ; do
      [ `grep -c \|${listip}\| "$M_TEMP/servers.${region}.ips"` -eq 0 -o `grep -c ^${listip}\| "$M_TEMP/servers.${region}.ips"` -eq 0 -o $(grep -c "^`grep ^${listip}\| "${rpath}/../../servers.list" | cut -d'|' -f5`|" "${rpath}/../../conf/clusters.conf") -eq 0 ] && sed -i /^${listip}\|/d "${rpath}/../../servers.list"
    done
  done
  res=$?
  unset IP inIP extIP keypair iID ami state isize secgroup started zone aki ari sname srole
  exit $res
fi



IFS=$IFS1


