#!/bin/bash

# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

print_server() {
# icluster is not always present
  if [ -n "$cluster" ] ; then
    [[ "$1" =~ '|icluster::' ]] || return 0
  fi
  local line1
  local line2
  local line3
  local line4
  local line5
  local line6
  local line7
  IFS1=$IFS
  IFS='|'
  if [ "X$filter" == "X" ] ; then
    line6="Tags:"
    for s in `echo "${1}"` ; do
      a=`echo "$s" | awk -F'::' '{print $1}'`
      b=`echo "$s" | awk -F'::' '{print $2}'`
      case $a in
        iID)
          line1="Server: $b $line1"
          ;;
        isize)
          [ -n "$size" ] && [ "X$size" != "X$b" ] && IFS=$IFS1 && return 0
          line1="$line1 Size: $b"
          ;;
        inIP)
          line2="IP: internal $b $line2"
          ;;
        extIP)
          line2="$line2 external $b"
          ;;
        iami)
          [ -n "$ami" ] && [ "X$ami" != "X$b" ] && IFS=$IFS1 && return 0
          line5="AMI: $b $line5"
          ;;
        istate)
          [ -n "$state" ] && [ "X$state" != "X$b" ] && IFS=$IFS1 && return 0
          line4="State: $b $line4"
          ;;
        izone)
          line3="Zone: $b $line3"
          ;;
        SG)
          line3="$line3 Security group: $b"
          ;;
        ikeypair)
          line3="$line3  Key: $b"
          ;;
        istarted)
          line4="$line4 Started: $b"
          ;;
        icluster)
          [ -n "$cluster" ] && [ "X$cluster" != "X$b" ] && IFS=$IFS1 && return 0
          line1="$line1  Cluster: $b"
          ;;
        itag)
          line6="$line6 $b"
          ;;
        bdev)
          line7="EBS device: $b $line7"
          ;;
        bID)
          line7="$line7 ID: $b"
          ;;
        bstarted)
          line7="$line7  Started: $b\n"
          ;;
        iaki)
          line5="$line5  AKI: $b"
          ;;
        iari)
          line5="$line5  ARI: $b"
          ;;
      esac
    done
    echo "---------------------------------------------------------------------"
    printf "${line1}\n${line2}\n${line3}\n${line4}\n${line5}\n"
    [ -n "$line6" ] && printf "${line6}\n"
    [ -n "$line7" ] && printf "${line7}\n"
  else
    for s in `echo "${1}"` ; do
      a=`echo "$s" | awk -F'::' '{print $1}'`
      b=`echo "$s" | awk -F'::' '{print $2}'`
      [ "X$a" == "Xistate" ] && [ -n "$state" ] && [ "X$state" != "X$b" ] && unset line && IFS=$IFS1 && return 0
      [ "X$a" == "Xicluster" ] && [ -n "$cluster" ] && [ "X$cluster" != "X$b" ] && unset line && IFS=$IFS1 && return 0
      for s in $filter ; do
        [ "X$a" == "X$s" ] && line="${line}${b} "
      done
    done
    echo $line
    unset line
  fi
  IFS=$IFS1
  return 0
}

parse_server() {
  if [[ ${1} =~ ^RESERVATION ]] ; then
    printf "SG::`echo ${1} | awk -F'|' '{print $4}'`|"
  fi
  if [[ ${1} =~ ^INSTANCE ]] ; then
    iID=`echo ${1} | awk -F'|' '{print $2}'`
    inIP=`echo ${1} | awk -F'|' '{print $18}'`
    extIP=`echo ${1} | awk -F'|' '{print $17}'`
    iami=`echo ${1} | awk -F'|' '{print $3}'`
    istate=`echo ${1} | awk -F'|' '{print $6}'`
    ikeypair=`echo ${1} | awk -F'|' '{print $7}'`
    isize=`echo ${1} | awk -F'|' '{print $10}'`
    istarted=`echo ${1} | awk -F'|' '{print $11}'`
    izone=`echo ${1} | awk -F'|' '{print $12}'`
    iaki=`echo ${1} | awk -F'|' '{print $13}'`
    iari=`echo ${1} | awk -F'|' '{print $14}'`
    printf "iID::$iID|iami::$iami|iaki::$iaki|iari::$iari|"
    if [ "X$istate" == "Xrunning" ] ; then
      printf "inIP::$inIP|extIP::$extIP|"
    fi
    printf "istate::$istate|istarted::$istarted|izone::$izone|ikeypair::$ikeypair|isize::$isize|"
    
  fi
  if [[ ${1} =~ ^TAG ]] ; then
    object=`echo ${1} | awk -F'|' '{print $2}'`
    itag=`echo ${1} | awk -F'|' '{print $4}'`
    tagvalue=`echo ${1} | awk -F'|' '{print $5}'`
    if [ "X$object" == "Xinstance" ] ; then
      if [ "X$itag" == "Xcluster" ] ; then
        printf "icluster::$tagvalue|"
      else
        printf "itag::${itag}=${tagvalue}|"
      fi
    fi
  fi
  if [[ ${1} =~ ^BLOCKDEVICE ]] ; then
    bdev=`echo ${1} | awk -F'|' '{print $2}'`
    bID=`echo ${1} | awk -F'|' '{print $3}'`
    bstarted=`echo ${1} | awk -F'|' '{print $4}'`
    printf "bdev::$bdev|bID::$bID|bstarted::$bstarted|"
  fi
}

possible_options="cluster ami state filter noupdate help region"
necessary_options=""
#[ "X$*" == "X" ] && echo "Can't run without options. Possible options are: ${possible_options}" && exit 1
for s_option in "${@}"
do
  found=0
  case ${s_option} in
  --*=*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`  
    s_optarg=`expr "X$s_option" : 'X[^=]*=\(.*\)'` 
    ;;
  --*)
    s_optname=`expr "X$s_option" : 'X[^-]*-*\([^=]*\)'`    
    s_optarg='yes' 
    ;;
  *=*)
    echo "Wrong syntax: options must start with a double dash"
    exit 1
    ;;
  *)
    s_param=${s_option}
    s_optname=''
    s_optarg=''
    ;;
  esac
  for option in `echo $possible_options | sed 's/,//g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$option=${s_optarg}" && found=1
  done
  [ "X$s_option" == "X$s_param" ] && found=1
  if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
found=0

for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

if [ -n "$help" ] ; then
  case $help in 
    cluster)
      echo "Usage: --cluster=<cluster name>"
      echo "  Shows only instances within this cluster"
      echo "  (tagged with \"cluster=<cluster name>\")"
    ;;
    ami)
      echo "Usage: --ami=<ami_id>"
      echo "  Shows only instances with this AMI ID"
    ;;
    state)
      echo "Usage: --state=<state>"
      echo "  Shows only instances in this state"
      echo "  e.g. --state=running"
    ;;
    filter)
      cat << "EOF"
Usage: --filter=<var1,var2,var3>

  Shows the defined variables only, like this:
  
  var1 var2 var3
  
  for each instance according to other options, e.g. to get internal and external
  IPs of running instances, use:
  
  show_servers --state=running --filter=inIP,extIP
  
  Possible variables are:
  
    iID
    inIP
    extIP
    iami
    istate
    izone
    ikeypair
    istarted
    SG
    icluster
    itag
    bdev
    bID
    bstarted
    iaki
    iari

EOF
    
    ;;
    noupdate)
      echo "Usage: --noupdate"
      echo "doesn't query AWS, uses the raw data of the previous query instead"
    ;;
    *)
      echo "Use help=option"
      echo "Possible options are: ${possible_options}"
    ;;
  esac
  exit 0
fi

source ${rpath}/../../conf/cloud.conf
for var in EC2_TOOLS_BIN_PATH JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT EC2_REGION EC2_AK ; do
  [ -z "`eval echo \\$\$var`" ] && echo "$var is not defined! Define it in conf/cloud.conf please." && exit 1
done
PATH="${EC2_TOOLS_BIN_PATH}:${PATH}"
export EC2_TOOLS_BIN_PATH JAVA_HOME EC2_HOME EC2_PRIVATE_KEY EC2_CERT EC2_AK EC2_REGION PATH

TMPDIR=/tmp/m_script/cloud/ec2
install -d $TMPDIR

filter=`echo $filter | sed 's_,_|_g'`
[ -n "$region" ] && EC2_REGION=$region

if [ "X$noupdate" == "X" ] ; then
  [ "X`which ec2-describe-instances`" == "X" ] && echo "API Tools needed" && exit 1
  ${EC2_TOOLS_BIN_PATH}/ec2-describe-instances -K "$EC2_PRIVATE_KEY" -C "$EC2_CERT" --region $EC2_REGION | sed 's/\t/|/g' > $TMPDIR/servers.${EC2_REGION}.tmp
fi
# newr = New Reservation, inverted
while read SERVER
do
  if [[ $SERVER =~ ^RESERVATION ]] ; then
    # if there is a previous server, print it, forget it and start a new
    # reservation
    [ -n "$current_server" ] && print_server "$current_server" && unset current_server
    # start collecting new server data
    current_server=`parse_server $SERVER` && newr=1
    # save for other servers in this reservation
    reservation_line=$current_server
  else
    if [[ $SERVER =~ ^INSTANCE ]] && [ ! $newr ] ; then
      # This is another instance within the same reservation
      print_server "$current_server" && unset current_server
      current_server="$reservation_line`parse_server $SERVER`"
      newr=1
    else
      current_server="$current_server`parse_server $SERVER`" && unset newr
    fi
  fi
done<$TMPDIR/servers.${EC2_REGION}.tmp
print_server "$current_server"
unset newr current_server


