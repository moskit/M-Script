#!/bin/bash
# Copyright (C) 2008-2014 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"

possible_options="cloud id name ip return verbose cluster help updatelist quick slow onlyid"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

list_the_cluster() {
  if [ -n "$quick" ]; then
    IAMACHILD=1 "$rpath"/show_nodes --all --view=table --noupdate | grep -v ^EBS | cut -sd'|' -f2,3,5,6,7 | grep '|running|' | grep "|${cluster}$"
  else
    IAMACHILD=1 "$rpath"/show_nodes --all --view=table | grep -v ^EBS | cut -sd'|' -f2,3,5,6,7 | grep '|running|' | grep "|${cluster}$"
  fi
}

find_by_ip() {
  id=`grep "|$1|" "$M_ROOT"/cloud/${CLOUD}.list | cut -d'|' -f2`
  if [ -z "$id" ]; then
    id=`IAMACHILD=1 "$rpath"/get_node_details --ip="$1" | grep instanceId | cut -d'|' -f2`
  fi
}

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ -z "$(eval echo \$$option)" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$help" ] && cat << "EOF"

Finds and lists node(s) in clouds

Usage: $rcommand <options>

Options:

  --id=[id]                     - finds a node by its ID
  
  --ip=[ip]                     - finds a node by its IP
  
  --name=[node name]            - finds node(s) by name
  
  --cluster=[cluster name]      - finds all nodes in this cluster
                                  (see also --fast and --slow below).
                                  If either of ip/name/id is provided, this
                                  option is ignored
  
  --cloud=[cloud name]          - must be provided for any of the searches
                                  above; can be provided either via command-line
                                  option or via environment variable CLOUD;
                                  command-line option has higher priority
                                  
  --quick                       - search in the existing data, no API call
                                  
  --slow                        - for cluster search, gets details for each
                                  node in this cloud listed in nodes.list
                                  and cloud/rackspace.list from the cloud API
                                  and does its best to fix any inconsistencies
                                  found
                                  
  --onlyid                      - doesn't output details of the node, only its
                                  ID
                                  
EOF

[ -n "$cloud" ] && CLOUD=$cloud
export CLOUD
[ -n "$fast" -a -n "$slow" ] && echo "both --fast and --slow options are set, not sure what to do" && exit 1

source "$rpath/../../conf/mon.conf"
[ -n "$CLOUD" ] && source "$rpath/../../conf/clouds/${CLOUD}.conf"
source "$rpath/../../lib/cloud_functions.sh"
M_TEMP="$M_TEMP/cloud/$CLOUD"

if [ -z "$IAMACHILD" ]; then
  lock_cloudops || exit 10
fi

if [ -z "$id" ]; then
  if [ -z "$ip" ]; then
    if [ -z "$name" ]; then
      if [ -z "$cluster" ]; then
        echo "One of id, ip, name or cluster is required to identify the node"
        proper_exit 1 124
      else
        list_the_cluster
        proper_exit 0 127
      fi
    else
      # ip must be present in nodes.list, so it's simple
      ip=`cat "$rpath/../../nodes.list" | grep -vE "^#|^[[:space:]]#" | cut -d'|' -f1,4,6 | grep -v ^$ | grep "|${CLOUD}$" | grep "|${name}|" | cut -d'|' -f1`
      if [ -n "$ip" ]; then
        find_by_ip $ip
      fi
    fi
  else
    find_by_ip $ip
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this node" && proper_exit 1 140

if [ -n "$onlyid" ]; then
  echo "$id"
else
  echo "ID found: $id"
  IAMACHILD=1 "$rpath"/get_node_details --id=$id
  res=$?
  if [ $res -eq 2 ]; then
    sed -i "/|$id|/d" "$M_ROOT/cloud/${CLOUD}.list"
    exit_status=1
  else
    exit_status=$res
  fi
fi

proper_exit $exit_status 153

