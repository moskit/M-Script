#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"
V="1"

GCLOUD="$M_ROOT/lib/google-cloud-sdk/bin/gcloud"

possible_options="cluster state filter region zone short noupdate view update_node_list update_nodes_list forceupdate all status count resolveids cloud update_all_lists"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1
[ -n "$update_node_list" ] && update_nodes_list=1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
source "$rpath/functions.sh" || exit 1

declare -i icount

[ -n "$forceupdate" ] && unset noupdate # for compatibility
[ -z "$status" -a -n "$state" ] && status=$state
[ -z "$status" ] && status="RUNNING"
[ -n "$filter" ] && filter="${filter},addresses,cluster"
[ -n "$zone" ] && region=$zone  # no point in distinguishing them here

M_TEMP="$M_TEMP/cloud/$CLOUD"
[ -d "$M_TEMP" ] || install -d "$M_TEMP"
export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

list_nodes() {
  IFS1=$IFS
  IFS='
'
  if [ `cat "$M_TEMP/${rcommand}.resp" 2>/dev/null | wc -l` -gt 0 ]; then
    [ "_$view" == "_raw" ] && cat "$M_TEMP/${rcommand}.resp" && return
    declare -a nodelist
    for sn in `cat "$M_TEMP/${rcommand}.resp" | cut -d'/' -f2 | sort | uniq` ; do
      unset id name istatus extIP intIP IP imageId flavorId region icluster
      node=`grep "^0/$sn/" "$M_TEMP/${rcommand}.resp"`
      id=`echo "$node" | grep '"id"|' | cut -sd'|' -f2 | tr -d '"'`
      name=`echo "$node" | grep '^0/$sn/"name"|' | cut -sd'|' -f2 | tr -d '"'`
      imageId=`echo "$node" | grep '"licenses"/0|' | cut -sd'|' -f2 | tr -d '"'`
      flavorId=`echo "$node" | grep '"machineType"|' | cut -sd'|' -f2 | tr -d '"'`
      istatus=`echo "$node" | grep '"status"|' | cut -sd'|' -f2 | tr -d '"'`
      icluster=`echo "$node" | grep "\"tags\"/\"items\"" | grep "\"${CLUSTER_TAG}\-\-\-" | cut -sd'|' -f2 | tr -d '"' | cut -sd'-' -f4`
      region=`echo "$node" | grep '"zone"|' | cut -sd'|' -f2 | tr -d '"'`
      intIP=`echo "$node" | grep '"networkInterfaces"/0/"networkIP"|' | cut -sd'|' -f2 | tr -d '"'`
      extIP=`echo "$node" | grep '"networkInterfaces"/0/"accessConfigs"/0/"natIP"|' | cut -sd'|' -f2 | tr -d '"'`
      if [ "_$NETWORK" == "_external" ] ; then
        IP="$extIP"
      else
        IP="$intIP"
      fi
      if [ -n "$IP" ]; then
        if [ -z "$icluster" ] ; then
          # nodes having no cluster in metadata but added manually to nodes.list
          icluster=`grep ^$IP\| "$M_ROOT/nodes.list" | cut -d'|' -f5`
          if [ -n "$icluster" ]; then
            $debug && [ -n "$update_nodes_list" ] && ecf=1 && log "missing cluster for IP ${ip}, assumed $icluster"
            # this IP is found in nodes.list, end of search
            break
          fi
        else
          # no icluster means that node will not be shown, but only if there
          # is no option --all. With this option, however, we want to see all
          # clusters assigned via metadata
          [ `grep -c ^$icluster\| "$M_ROOT/conf/clusters.conf"` -eq 0 ] && [ -z "$all" ] && unset icluster
          $debug && [ -n "$update_nodes_list" ] && unset ecf
        fi
      else
        # if no IP, it shouldn't make its way to nodes.list
        [ -n "$update_nodes_list" ] && continue
      fi
      if [ -z "$update_nodes_list" ] ; then
        # icluster existence condition is needed for the case there are multiple
        # projects (cluster groups) in the same cloud.
        # Note that if you use same names for clusters in different cluster
        # groups, you'll get them mixed here.
        if [ -n "$icluster" ] || [ -n "$all" ] ; then
          [ -n "$cluster" ] && [[ "$cluster" != "$icluster" ]] && continue
          [ "_$status" != "_$istatus" ] && [ "_$status" != "_all" ] && continue
          case $view in
            list)
              echo "ID: $id  Name: $name  Status: $istatus  Region: $region  ext IP: ${extIP}  intIP: ${intIP}  Cluster: $icluster  Image: ${imageId##*/}  Size: $flavorId"
              ;;
            table)
              echo "$id|$name|$istatus|$region|${extIP}|${intIP}|$icluster|${imageId##*/}|$flavorId"
              ;;
            column)
              echo -e "ID: $id\nName: $name\nStatus: $istatus\nRegion: $region\next IP: ${extIP}\nintIP: ${intIP}\nImage: ${imageId##*/}\nSize: $flavorId\n"
              ;;
            none)
              ;;
            *)
              echo "------------------------------------------------------------------------------"
              echo "Node ID: $id    Name: $name    Cluster: $icluster"
              echo "Public IP: ${extIP}"
              echo "Private IP: ${intIP}"
              echo "Node image: ${imageId##*/}"
              echo "Node size: $flavorId    Status: $istatus    Region: $region"
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^$icluster\| "$M_ROOT/conf/clusters.conf"` -ne 0 ] ; then
            key=`grep ^$icluster\| "$M_ROOT/conf/clusters.conf" | cut -d'|' -f2`
            check_super_cluster $IP "$icluster" && continue
            nodelist+=("$IP|$key|$region|$name|$icluster|$CLOUD")
            $debug && [ -n "$ecf" ] && log "$IP ($name) added"
          fi
        fi
      fi
    done
    if [ -n "$update_nodes_list" ]; then
      if [ ${#nodelist[*]} -eq 0 ]; then
        log "ERROR: generated list is empty, not saving it"
      else
        log "saving generated list (${#nodelist[*]} nodes)"
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done > "$M_ROOT/cloud/nodes.list.${CLOUD}"
      fi
    fi
  else
    [ -z "$noupdate" ] && echo "No data to output. Check API request result: $M_TEMP/${rcommand}.resp" || echo "No data. Check if there is any existing data to output: $M_TEMP/${rcommand}.resp and run without --noupdate if necessary."
    proper_exit 1 304
  fi
  IFS=$IFS1
}

# force update if the tmp file is older than FORCE_LIST_UPDATE_AFTER
# if no setting, force update is disabled
if [ -n "$FORCE_LIST_UPDATE_AFTER" -a -n "$noupdate" ] ; then
  tmpfileage=$(expr `date +"%s"` - `stat -c "%Z" $M_TEMP/${rcommand}.resp 2>/dev/null || echo 0` || echo 86400)
  [ $tmpfileage -gt $FORCE_LIST_UPDATE_AFTER ] 2>/dev/null && log "$M_TEMP/${rcommand}.resp is older than $FORCE_LIST_UPDATE_AFTER sec, update forced" && unset noupdate
fi
if [ -z "$noupdate" ] ; then
  token=`get_oath2_token`
  if [ -z "$region" ]; then
    if [ -n "$cluster" ]; then
      region=`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | cut -sd'|' -f3`
      if [ -z "$region" ]; then
        log "Region is not defined for cluster ${cluster}, can't continue"
        proper_exit 1 184
      else
        $CURL https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/instances -H "Authorization:$token" | "$M_ROOT"/lib/json2txt > "$M_TEMP"/${rcommand}.resp
      fi
    else
      # if no region and no cluster, we cycle all regions found in clusters.conf
      rm "$M_TEMP"/${rcommand}.resp
      for region in `grep -vE "^#|^[[:space:]]#" "$M_ROOT/conf/clusters.conf" | cut -sd'|' -f3 | sort | uniq` ; do
        $CURL https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/instances -H "Authorization:$token" | "$M_ROOT"/lib/json2txt >> "$M_TEMP"/${rcommand}.resp
      done
    fi
  else
    $CURL https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/instances -H "Authorization:$token" | "$M_ROOT"/lib/json2txt > "$M_TEMP"/${rcommand}.resp
  fi
  #$GCLOUD compute instances list --format=json | /opt/m/lib/json2txt > "$M_TEMP"/${rcommand}.resp
fi
list_nodes

[ -n "$count" ] && echo $icount
proper_exit 0 321


