#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"
V="1"

find_name_by_ip() {
  # if it is in nodes.list
  name=`grep "^${1}|" "$M_ROOT/nodes.list" 2>/dev/null | cut -d'|' -f4`
  if [ -z "$name" ]; then
    if [ ! -e "$M_TEMP/show_nodes.resp" ]; then
      IAMACHILD=1 "$rpath"/show_nodes --all >/dev/null 2>&1
    fi
    sn=`grep "|\"$1\"$" "$M_TEMP/show_nodes.resp" | cut -sd'/' -f3`
    name=`grep "\"items\"/$sn/\"name\"|" "$M_TEMP/show_nodes.resp" | cut -sd'|' -f2 | tr -d '"'`
  fi
}

request() {
  $CURL -X DELETE "https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/instances/$name" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt > "$M_TEMP/${rcommand}.resp"
  $CURL -X DELETE "https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/disks/$name" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt >> "$M_TEMP/${rcommand}.resp"
}

find_zone() {
  # In GCE, zone and name identify the node. So it is a bit tricky, because
  # at least one detail has to be known beforehand: the zone the node is in.
  # Of course, it is defined in the cluster configuration, but what if it's 
  # been changed there. This would make its nodes lost, even if not totally,
  # but at least for some actions.
  # So we rely on the cloud list here, but to be on the safe side, avoid using
  # same names for nodes in different zones, even if GCE allows this.
  nodecluster=`cat "$M_ROOT/nodes.list" | grep -vE "^#|^[[:space:]]#" | grep "|$CLOUD$" | cut -sd'|' -f4,5 | grep ^$1\| | cut -sd'|' -f2`
  if [ -n "$nodecluster" ]; then
    region=`grep ^$nodecluster\| "$M_ROOT/conf/clusters.conf" | cut -sd'|' -f3`
  else
    region=`grep "|$name|" "$M_ROOT/cloud/${CLOUD}.list" | cut -sd'|' -f9`
  fi
  echo "$region"
}

printreturn() {
  cat "$M_TEMP/${rcommand}.resp"
}

possible_options="cloud id name region zone ip return verbose log_request force last first cluster nochecks"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

if [ -n "$help" ]; then
  echo "Possible options: $possible_options"
fi

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

source "$rpath/functions.sh" || exit 1

trap unlock_cloudops 3
trap unlock_cloudops 15

[ -n "$cluster" ] && [ `grep -c \|$cluster\| "$M_ROOT"/nodes.list` -eq 0 ] && log "Nodes list has no nodes in cluster ${cluster}. Try 'find_node --cluster=$cluster' and repeat" && exit 1
[ -z "$cluster" ] && cluster=$M_CLUSTER

if [ -z "$cloud" ]; then
  if [ -n "$cluster" ]; then
    cloud=`cat "$M_ROOT/nodes.list" | cut -d'|' -f5,6 | grep ^$cluster\| | cut -s -d'|' -f2 | sort | uniq`
    if [ `echo "$cloud" | wc -l` -gt 1 ]; then
      log "more than one cloud for this cluster, therefore cloud must be defined"
      exit 1
    else
      CLOUD=$cloud
      export CLOUD
    fi
  fi
fi

[ -n "$force" ] && force=true || force=false
removed=false
if [ -n "$last" -o -n "$first" ]; then
  [ -z "$cluster" ] && log "options --last and --first require --cluster" && exit 1
  [ -n "$last" -a -n "$first" ] && log "both --last and --first defined" && exit 1
  [ -n "$last" ] && name=`"$M_ROOT"/cloud/common/get_ips --cluster=$cluster --names | sort -n | tail -1`
  [ -n "$first" ] && name=`"$M_ROOT"/cloud/common/get_ips --cluster=$cluster --names | sort -n | head -1`
fi

if [ -z "$name" ] ; then
  if [ -z "$ip" ] ; then
    echo "One of ip or name is required to identify the node"
    exit 1
  else
    find_name_by_ip $ip
    [ -z "$name" ] && log "unable to find name by IP $ip" && exit 1
  fi
fi

[ -z "$region" ] && [ -n "$zone" ] && region=$zone
[ -z "$region" ] && region=`find_zone $name`
[ -z "$region" ] && echo "Unable to determine zone" && exit 1

if [ -z "$cluster" ]; then
  if [ -n "$nodecluster" ]; then
    cluster=$nodecluster
  else
    cluster=$(IAMACHILD=1 "$rpath"/get_node_details --name="$name" | grep ^cluster\| | cut -sd'|' -f2)
  fi
fi

if [ -z "$nochecks" ]; then
  if [ -z "$cluster" ] ; then
    log "cluster is not defined, cannot check its limits!"
    exit 1
  else
    check_cluster_minimum $cluster || exit 5
  fi
fi

lock_cloudops || exit 10

token=`get_oath2_token`
request && log "Request sent" || proper_exit 1 132
reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
[ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 161
[ `echo "$reqparsed" | grep -c '"error"'` -ne 0 ] && log "request failed with error(s) `echo "$reqparsed" | grep '"message"|' | cut -d'|' -f2`" && proper_exit 1 208

printreturn "$reqparsed" || exit_status=2

proper_exit 0 139



