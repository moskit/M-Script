#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"
V="1"

GCLOUD="$M_ROOT/lib/google-cloud-sdk/bin/gcloud"

SSH=`which ssh 2>/dev/null`

possible_options="cloud region cluster image name type return verbose debug dry"
necessary_options=""

request() {
  url="https://www.googleapis.com/compute/v$V/projects/$PROJECT_ID/zones/$zone/instances"
  body="{ \"name\": \"$name\", \"machineType\": \"zones/$zone/machineTypes/$type\", \"networkInterfaces\": $networkInterfaces, \"disks\": $disks }"
  resp=`$CURL -X POST $url -d "$body" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt`
  echo "$resp" > "$M_TEMP/${rcommand}.resp"
}

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1
lock_cloudops || exit 10

[ -z "$cluster" ] && cluster="$M_CLUSTER"
[ -z "$cluster" ] && echo "Cluster not defined" && exit 1
clusterObject=`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | tail -1`
if [ -z "$clusterObject" ] ; then echo "Cluster $cluster is not configured"; proper_exit 1 65; fi

if [ -n "$region" ]; then
  zone="$region"
else
  zone=`echo "$clusterObject" | cut -sd'|' -f3`
  [ -z "$zone" ] && echo "ERROR: zone not defined for cluster $cluster!" && proper_exit 1 65
fi
if [ -z "$type" ]; then
  type=`echo "$clusterObject" | cut -sd'|' -f5`
  [ -z "$type" ] && echo "ERROR: type not defined for cluster $cluster!" && proper_exit 1 65
fi
if [ -n "$image" ]; then
  imageObject="$image"
else
  imageObject=`echo "$clusterObject" | cut -sd'|' -f6`
  imageFamily=`echo "$imageObject" | cut -sd':' -f1`
  [ -z "$imageFamily" ] && echo "ERROR: image not defined or malformed for cluster $cluster!" && proper_exit 1 65
  image=`echo "$imageObject" | cut -sd':' -f2`
  [ -z "$image" ] && echo "ERROR: image not defined or malformed for cluster $cluster!" && proper_exit 1 65
fi

networkInterfaces="[{ \"accessConfigs\": [{ \"type\": \"ONE_TO_ONE_NAT\", \"name\": \"External NAT\" }], \"network\": \"global/networks/default\" }]"
disks="[{ \"autoDelete\": \"$diskAutoDelete\", \"boot\": \"true\", \"type\": \"PERSISTENT\", \"initializeParams\": { \"sourceImage\": \"projects/$imageProject/global/images/$image\" } }]"

token=`get_oath2_token`
request

echo "$resp"

