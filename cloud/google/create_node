#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

V="1"

SSH=`which ssh 2>/dev/null`

possible_options="cloud region zone cluster image name type return verbose debug dry log_request"
necessary_options=""

request() {
  url="https://www.googleapis.com/compute/v$V/projects/$PROJECT_ID/zones/$zone/instances"
  body="{ \"name\": \"$name\", \"machineType\": \"zones/$zone/machineTypes/$type\", \"networkInterfaces\": $networkInterfaces, \"disks\": $disks }"
  [ -n "$log_request" ] && echo "$CURL -X POST $url -d \"$body\" -H \"Content-Type: application/json\" -H \"Authorization:$token\"" >> $LOG
  resp=`$CURL -X POST $url -d "$body" -H "Content-Type: application/json" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt`
  echo "$resp" > "$M_TEMP/${rcommand}.resp"
}

printreturn() {
  for res in `echo $1 | tr ',' ' '` ; do
    case $res in
      ip)
        echo "$ip"
        ;;
      ipext)
        echo "$extIP"
        ;;
      ipint)
        echo "$intIP"
        ;;
      id)
        echo "$nodeid"
        ;;
    esac
  done
}

save_details() {
  listdetails=`echo "$details" | cut -sd'|' -f2 | tr '\n' '|'`
  echo "${listdetails%|}" >> "$M_ROOT/cloud/${CLOUD}.list"
  echo -e "`date`\n$details" >> "$M_ROOT/cloud/google.log"
  intIP=`echo "$details" | grep intIP | cut -sd'|' -f2`
  extIP=`echo "$1" | grep extIP | cut -sd'|' -f2`
  if [ "_$NETWORK" == "_external" ] ; then
    ip=$extIP
  else
    ip=$intIP
  fi
  echo "$ip|$key|$zone|$name|$cluster|$CLOUD" >> "$M_ROOT/cloud/nodes.list.${CLOUD}"
  echo "$ip|$key|$zone|$name|$cluster|$CLOUD" >> "$M_ROOT/nodes.list"
}

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
source "$rpath/functions.sh" || exit 1
export IAMACHILD M_TEMP CLOUD

lock_cloudops || exit 10

[ -z "$cluster" ] && cluster="$M_CLUSTER"
[ -z "$cluster" ] && echo "Cluster not defined" && exit 1
clusterObject=`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | tail -1`
if [ -z "$clusterObject" ] ; then echo "Cluster $cluster is not configured"; proper_exit 1 65; fi

if [ -n "$region" ]; then
  zone="$region"
else
  zone=`echo "$clusterObject" | cut -sd'|' -f3`
  [ -z "$zone" ] && echo "ERROR: zone not defined for cluster $cluster!" && proper_exit 1 65
fi
if [ -z "$type" ]; then
  type=`echo "$clusterObject" | cut -sd'|' -f5`
  [ -z "$type" ] && echo "ERROR: type not defined for cluster $cluster!" && proper_exit 1 65
fi
if [ -n "$image" ]; then
  imageObject="$image"
else
  imageObject=`echo "$clusterObject" | cut -sd'|' -f6`
  imageProject=`echo "$imageObject" | cut -sd':' -f1`
  [ -z "$imageProject" ] && echo "ERROR: image not defined or definition malformed for cluster $cluster!" && proper_exit 1 65
  image=`echo "$imageObject" | cut -sd':' -f2`
  [ -z "$image" ] && echo "ERROR: image not defined or definition malformed for cluster $cluster!" && proper_exit 1 65
fi
key=`echo "$clusterObject" | cut -sd'|' -f2`
# required for init_run
export key

[ -n "$debug" ] && debug=true || debug=false
[ -n "$dry" ] && dry=true || dry=false

log "Checking cluster $cluster limit..."
check_cluster_limit "$cluster" || proper_exit 5 194
[ -z "$name" ] && name=`generate_name $cluster` && log "Name auto-generated: $name"
[ -z "$name" ] && proper_exit 6 94
log "Double-checking name"
IAMACHILD=1 find_node --name="$name" --updatelist >/dev/null 2>&1 && log "Node with name $name already exists!" && proper_exit 6 96

networkInterfaces="[{ \"accessConfigs\": [{ \"type\": \"ONE_TO_ONE_NAT\", \"name\": \"External NAT\" }], \"network\": \"global/networks/default\" }]"
disks="[{ \"autoDelete\": \"$diskAutoDelete\", \"boot\": \"true\", \"type\": \"PERSISTENT\", \"initializeParams\": { \"sourceImage\": \"projects/$imageProject/global/images/$image\" } }]"

token=`get_oath2_token`
request && log "Request sent" || proper_exit 1 205
[ `echo "$resp" | wc -l` -eq 0 ] && log "empty response or response is not JSON" && proper_exit 1 207
[ `echo "$resp" | grep -c '"error"'` -ne 0 ] && log "request failed with error(s) `echo "$resp" | grep '"message"|' | cut -d'|' -f2`" && proper_exit 1 208

exit_status=0

if ! $dry ; then
  log "Waiting for node $name ready..."
  waittimeout=1200
  waitperiod=10
  checks=`expr $waittimeout / $waitperiod`
  for ((i=1; i<$checks; i++)) ; do
    sleep $waitperiod
    
    details=`IAMACHILD=1 "$rpath"/get_node_details --id=$name --zone=$zone`
    
    status=`echo "$details" | grep "^status|" | cut -sd'|' -f2`
    log "status is $status"
    [ "_$status" == "_RUNNING" ] && break
    #[ -n "$verbose" ] && progress=
  done
  if [ "_$status" == "_RUNNING" ]; then
  
    "$rpath"/add_tag --id=$name --tag="cluster:$cluster" --region=$region
    sleep 2
    "$rpath"/add_tag --id=$name --tag="name:$name" --region=$region
    
    save_details
    run_init $CLOUD $cluster $ip >> "$LOG" 2>&1 && log "Startup script finished successfully" || log "Startup script failed"
    
    "$M_ROOT"/cloud/common/update_hosts_file && log "/etc/hosts updated" || log "error updating /etc/hosts"
    [ -n "$return" ] && printreturn $return
  else
    exit_status=1
  fi
fi

proper_exit $exit_status 235

