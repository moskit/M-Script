#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
#*/

possible_options="id name to from log_request cloud action zone region type size snapshot iops kmskey encrypted as view list show help"
necessary_options=""
IFS1=$IFS
IFS='-'
for s_option in "$@"
do
  found=false
  s_option=${s_option/--/}
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"

  for option in ${possible_options// /-} ; do
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true && break
  done
  
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -z "$*" ] && help=yes

if [ -n "$help" ]; then
  cat << "EOF"
Usage: $rcommand {options}

Options:

id={disk ID}           - EC2 ID of the disk (vol-XXXXXXXX)
from/to={instance ID}  - EC2 instance ID for detach/attach operations
action={action}        - action to execute on the disk
                         availavle actions:
                         create, attach, detach, delete|destroy, show|list
list|show              - same as --action=list
                         action=list and action=show is the same request, it's
                         just that 'show' is more natural when details on a
                         single disk are requested (with --id option)
type={disk type}       - type of the disk, required to create a disk
                         available types:
                         gp2, sc1, io1, standard (default)
size
snapshot
iops
kmskey
encrypted
as
view

Common options:

cloud
zone

EOF
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

source "$rpath/functions.sh" || exit 1

trap unlock_cloudops 3
trap unlock_cloudops 15

[ -n "$name" ] && id=$name
[ -n "$region" ] && zone=$region

reqfailed() {
  if [ `echo "$reqparsed" | wc -l` -eq 0 ]; then
    log "file $M_TEMP/${rcommand}.resp is empty"
    echo "Empty response"
  else
    errmsg=`echo "$reqparsed" | grep Error | cut -d'|' -f2`
    if [ -n "$errmsg" ]; then
      log "request failed with error $errmsg"
      echo "$errmsg"
    else
      return 1
    fi
  fi
}

DeleteDisk() {
  $CURL -X DELETE "https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$zone/disks/$id" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt >> "$M_TEMP/${rcommand}.resp"
}

ShowDisk() {
  if [ -n "$id" ]; then
    local request="$CURL \"https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$zone/disks/$id\" -H \"Authorization:$token\""
  else
    local request="$CURL \"https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$zone/disks/\" -H \"Authorization:$token\""
  fi
  [ -n "$log_request" ] && log "$request"
  /bin/sh -c "$request" | "$M_ROOT"/lib/json2txt > "$M_TEMP/${rcommand}.resp"
}

printlist() {
  if [ -n "$id" ]; then
    filter="^0/\"items\""
    snfield=3
  else
    filter="^0"
    snfield=1
  fi
  for sn in `grep "$filter" "$M_TEMP/${rcommand}.resp" | cut -sd'/' -f${snfield} | sort | uniq`; do
    diskObject=`grep "^0/\"items\"/$sn/" "$M_TEMP/${rcommand}.resp"`
    diskname=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"name\"" | cut -sd'|' -f2 | tr -d '"'`
    disksize=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"sizeGb\"" | cut -sd'|' -f2 | tr -d '"'`
    diskzone=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"zone\"" | cut -sd'|' -f2 | tr -d '"'`
    diskzone=${diskzone##*/}
    diskstatus=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"status\"" | cut -sd'|' -f2 | tr -d '"'`
    for du in `echo "$diskObject" | grep "^0/\"items\"/$sn/\"users\"" | cut -sd'/' -f5`; do
      user=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"users\"/$du" | cut -sd'|' -f2 | tr -d '"'`
      userlist="${userlist}${user##*/},"
    done
    userlist="${userlist%,}"
    if [ -n "$view" ]; then
      disksource=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"sourceImage\"" | cut -sd'|' -f2 | tr -d '"'`
      disksource=${disksource##*/}
      disktype=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"type\"" | cut -sd'|' -f2 | tr -d '"'`
      disktype=${disktype##*/}
      for dl in `echo "$diskObject" | grep "^0/\"items\"/$sn/\"licenses\"" | cut -sd'/' -f5`; do
        license=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"licenses\"/$dl" | cut -sd'|' -f2 | tr -d '"'`
        licenselist="${licenselist}${license##*/},"
      done
      licenselist="${licenselist%,}"
      lastAttachTimestamp=`echo "$diskObject" | grep "^0/\"items\"/$sn/\"lastAttachTimestamp\"" | cut -sd'|' -f2 | tr -d '"'`
      
      case $view in
        list)
          echo "Disk: $diskname  Size: ${disksize}GB  Status: $diskstatus  Used By: $userlist  Last Attached At: $lastAttachTimestamp  Zone: $diskzone  Disk Type: $disktype  Disk Source Image: $disksource  Licenses: $licenselist"
          ;;
        table)
          echo "$diskname|$disksize|$diskstatus|$userlist|$lastAttachTimestamp|$diskzone|$disktype|$disksource|$licenselist"
          ;;
        column)
          echo -e "Disk: $diskname\nSize: ${disksize}GB\nStatus: $diskstatus\nUsed By: $userlist\nLast Attached At: $lastAttachTimestamp\nZone: $diskzone\nDisk Type: $disktype\nDisk Source Image: $disksource\nLicenses: $licenselist"
          ;;
        none)
          ;;
        *)
          echo -e "------------------------------------------------------------------------------\nDisk: $diskname  Size: ${disksize}GB  Status: $diskstatus  Disk Type: $disktype\nUsed By: $userlist\nLast Attached At: $lastAttachTimestamp  Zone: $diskzone\nDisk Source Image: $disksource  Licenses: $licenselist"
          ;;
      esac
    else
      echo "Disk: $diskname  Size: ${disksize}GB  Status: $diskstatus  Used By: ${userlist}"
    fi
    unset licenselist userlist
  done
}

[ -n "$list" ] && action=list
[ -z "$zone" ] && echo "Zone is mandatory, use option --zone" && proper_exit 1 165
[ -n "$name" ] && [ -z "$id" ] && id=$name

token=`get_oath2_token`

case $action in
  create)
    
    [ -z "$size" ] && [ -z "$snapshot" ] && echo "If disk is not created from a snapshot, its size is mandatory" && proper_exit 1 166
    CreateDisk
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    reqfailed && proper_exit 1 169
    ;;
  attach)
    [ -z "$to" ] && echo "Instance ID to attach this Disk to not provided, use option --to" && proper_exit 1 172
    [ -z "$id" ] && echo "Disk name not provided, use option --name" && proper_exit 1 173
    [ -z "$as" ] && echo "Disk device name not provided, use option --as" && proper_exit 1 174
    AttachDisk
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    reqfailed && proper_exit 1 177
    ;;
  detach)
    [ -z "$from" ] && echo "Instance to detach this disk from not provided, use option --from={instance name}" && proper_exit 1 180
    [ -z "$id" ] && echo "Disk name not provided, use option --name" && proper_exit 1 181
    DetachDisk
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    reqfailed && proper_exit 1 184
    ;;
  delete|destroy)
    [ -z "$id" ] && echo "Disk name not provided, use option --name|id" && proper_exit 1 187
    token=`get_oath2_token`
    DeleteDisk
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    reqfailed && proper_exit 1 190
    ;;
  show|list)

    ShowDisk
    reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
    reqfailed && proper_exit 1 195
    reqparsed=`printlist`
    ;;
  *)
    echo "Action $action is not supported yet"
    proper_exit 1 200
    ;;
esac

echo "$reqparsed"
