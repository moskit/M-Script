#!/bin/bash
# Copyright (C) 2008-2016 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/

CURL=`which curl 2>/dev/null`
CURL="$CURL -s -k"
V="1"

find_name_by_ip() {
  # if it is in nodes.list
  name=`grep "^${1}|" "$M_ROOT/nodes.list" 2>/dev/null | cut -d'|' -f4`
  if [ -z "$name" ]; then
    if [ ! -e "$M_TEMP/show_nodes.resp" ]; then
      IAMACHILD=1 "$rpath"/show_nodes --all >/dev/null 2>&1
    fi
    sn=`grep "|\"$1\"$" "$M_TEMP/show_nodes.resp" | cut -sd'/' -f3`
    name=`grep "\"items\"/$sn/\"name\"|" "$M_TEMP/show_nodes.resp" | cut -sd'|' -f2 | tr -d '"'`
  fi
}

printreturn() {
  if [ "_`echo "$1" | grep '^0/"name"|' | cut -sd'|' -f2 | tr -d '"'`" == "_$name" ]; then
    id=`echo "$1" | grep '^0/"id"|' | cut -sd'|' -f2 | tr -d '"'`
    iname=`echo "$1" | grep '^0/"name"|' | cut -sd'|' -f2 | tr -d '"'`
    creationTimestamp=`echo "$1" | grep '^0/"creationTimestamp"|' | cut -sd'|' -f2 | tr -d '"'`
    machineType=`echo "$1" | grep '^0/"machineType"|' | cut -sd'|' -f2 | tr -d '"'`
    machineType=${machineType##*/}
    istatus=`echo "$1" | grep '^0/"status"|' | cut -sd'|' -f2 | tr -d '"'`
    icluster=`echo "$1" | grep "\"tags\"/\"items\"" | grep "\"${CLUSTER_TAG}\-\-\-" | cut -sd'|' -f2 | tr -d '"' | cut -sd'-' -f4`
    region=`echo "$1" | grep '^0/"zone"|' | cut -sd'|' -f2 | tr -d '"'`
    region=${region##*/}
    intIP=`echo "$1" | grep '^0/"networkInterfaces"/0/"networkIP"|' | cut -sd'|' -f2 | tr -d '"'`
    extIP=`echo "$1" | grep '^0/"networkInterfaces"/0/"accessConfigs"/0/"natIP"|' | cut -sd'|' -f2 | tr -d '"'`
    echo -e "id|$id\nname|$iname\nmachineType|$machineType\nstatus|$istatus\ncluster|$icluster\nregion|$region\nintIP|$intIP\nextIP|$extIP"
    for disksn in `echo "$1" | grep '^0/"disks"/' | cut -sd'/' -f3 | sort | uniq`; do
      disk=`echo "$1" | grep "^0/\"disks\"/$disksn/"`
      disktype=`echo "$disk" | grep '/"type"|' | cut -sd'|' -f2 | tr -d '"'`
      diskmode=`echo "$disk" | grep '/"mode"|' | cut -sd'|' -f2 | tr -d '"'`
      diskname=`echo "$disk" | grep '/"deviceName"|' | cut -sd'|' -f2 | tr -d '"'`
      diskboot=`echo "$disk" | grep '/"boot"|' | cut -sd'|' -f2 | tr -d '"'`
      disklicenses=`echo "$disk" | grep '/"licenses"/' | cut -sd'|' -f2 | tr -d '"'`
      disklicenses=${disklicenses##*/}
      diskautoDelete=`echo "$disk" | grep '/"autoDelete"|' | cut -sd'|' -f2 | tr -d '"'`
      echo -e "disk${disksn}:type|$disktype\ndisk${disksn}:mode|$diskmode\ndisk${disksn}:name|$diskname\ndisk${disksn}:boot|$diskboot\ndisk${disksn}:autoDelete|$diskautoDelete\ndisk${disksn}:licenses|$disklicenses"
    done
  fi
}

request() {
  $CURL "https://www.googleapis.com/compute/v1/projects/$PROJECT_ID/zones/$region/instances/$name" -H "Authorization:$token" | "$M_ROOT"/lib/json2txt > "$M_TEMP"/${rcommand}.resp
}

find_zone() {
  # In GCE, zone and name identify the node. So it is a bit tricky, because
  # at least one detail has to be known beforehand: the zone the node is in.
  # Of course, it is defined in the cluster configuration, but what if it's 
  # been changed there. This would make its nodes lost, even if not totally,
  # but at least for some actions.
  # So we rely on the cloud list here, but to be on the safe side, avoid using
  # same names for nodes in different zones, even if GCE allows this.
  nodecluster=`cat "$M_ROOT/nodes.list" | grep -vE "^#|^[[:space:]]#" | grep "|$CLOUD$" | cut -sd'|' -f4,5 | grep ^$1\| | cut -sd'|' -f2`
  if [ -n "$nodecluster" ]; then
    region=`grep ^$nodecluster\| "$M_ROOT/conf/clusters.conf" | cut -sd'|' -f3`
  else
    region=`grep "|$name|" "$M_ROOT/cloud/${CLOUD}.list" | cut -sd'|' -f9`
  fi
  echo "$region"
}

possible_options="cloud id name region zone ip return verbose log_request"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
  if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
LOG="$M_ROOT/logs/cloud.log"

source "$rpath/functions.sh" || exit 1

lock_cloudops || exit 10

[ -n "$id" ] && name=$id

if [ -z "$name" ] ; then
  if [ -z "$ip" ] ; then
    echo "One of ip or name is required to identify the node"
    proper_exit 1 120
  else
    find_name_by_ip $ip
    [ -z "$name" ] && log "unable to find name by IP $ip" && proper_exit 1 125
  fi
fi

[ -z "$region" ] && [ -n "$zone" ] && region=$zone
[ -z "$region" ] && region=`find_zone $name`
[ -z "$region" ] && echo "Unable to determine zone" && proper_exit 1 131

token=`get_oath2_token`
request && log "Request sent" || proper_exit 1 134
reqparsed=`cat "$M_TEMP/${rcommand}.resp"`
[ `echo "$reqparsed" | wc -l` -eq 0 ] && log "file $M_TEMP/${rcommand}.resp is empty" && proper_exit 1 136
[ `echo "$reqparsed" | grep -c '"error"'` -ne 0 ] && log "request failed with error(s) `echo "$reqparsed" | grep '"message"|' | cut -d'|' -f2`" && proper_exit 1 137

printreturn "$reqparsed" || exit_status=2

proper_exit 0 141



