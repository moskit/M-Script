#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1
source "${rpath}/../../conf/mon.conf"
TMPDIR=$TMPDIR/cloud/rackspace
install -d $TMPDIR
CURL="$CURL -s"
declare -i icount

possible_options="cluster state filter region short noupdate view update_servers_list forceupdate all status count"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

[ -n "$short" ] && req='/servers' || req='/servers/detail'
[ -n "$forceupdate" ] && rm -f "${TMPDIR}"/${rcommand}.resp
[ -z "$status" ] && status="active"

request() {
  URL=`grep ^1\/auth\/serviceCatalog\/cloudServers\/0\/publicURL "${TMPDIR}/auth.resp" | cut -d'|' -f2`
  TOKEN=`grep ^1\/auth\/token\/id "${TMPDIR}/auth.resp" | cut -d'|' -f2`
  $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}${req}" | "${rpath}/../../lib/json2txt" > "${TMPDIR}/${rcommand}.resp"
  [ -n "`find "${TMPDIR}" -mtime -60 -name flavors.resp`" ] || $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}/flavors/detail" | "${rpath}/../../lib/json2txt" > "${TMPDIR}/flavors.resp"
  [ -n "`find "${TMPDIR}" -mtime -60 -name images.resp`" ] || $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}/images/detail" | "${rpath}/../../lib/json2txt" > "${TMPDIR}/images.resp"
}

list_servers() {
  IFS1=$IFS
  IFS='
'
  if [ -f "${TMPDIR}/${rcommand}.resp" ] ; then
    for n in `cat "${TMPDIR}/${rcommand}.resp" | cut -d'/' -f3 | sort | uniq` ; do
      unset id name istatus extIP intIP IP imageId flavorId region icluster
      for LINE in `grep \/servers\/${n}\/ "${TMPDIR}/${rcommand}.resp"` ; do
        LINE=`echo $LINE | awk -F"servers/${n}/" '{print $2}'`
        lvar=`echo $LINE | cut -d'|' -f1`
        lvalue=`echo $LINE | cut -d'|' -f2`
        case $lvar in
          imageId)
            imageId=`imageid $lvalue`
            ;;
          flavorId)
            flavorId=`flavorid $lvalue`
            ;;
          status)
            istatus=`echo $lvalue | sed 's|.|\l&|g'`
            ;;
          addresses/public/*)
            extIP="$extIP $lvalue"
            ;;
          addresses/private/*)
            intIP="$intIP $lvalue"
            ;;
          metadata/cluster)
            icluster="$lvalue"
            ;;
          *)
            eval "$lvar=\"$lvalue\""
            ;;
        esac
      done
      if [ "X$NETWORK" == "Xexternal" ] ; then
        IP=$extIP
      else
        IP=$intIP
      fi
      for ip in $IP ; do
        ip=${ip#* } ; ip=${ip% *}
        [ -z "$icluster" ] && icluster=`grep ^$ip\| "${rpath}/../../servers.list" | cut -d'|' -f5` && break
      done
      if [ -z "$update_servers_list" ] ; then
        # icluster existence condition is needed for the case there are multiple
        # projects (cluster groups) in the same cloud
        # Note: don't use same cluster names for different projects within the
        # same cloud!
        if [ -n "$icluster" -o -n "$all" ] ; then
          [ -n "$cluster" -a "$cluster" != "$icluster" ] && continue
          [ "X$status" != "X$istatus" ] && [ "X$status" != "Xall" ] && continue
          case $view in
            list)
              echo "ID: $id  Name: $name  Status: $status  ext IP: $extIP  intIP: $intIP  Image: $imageId  Size: $flavorId"
              ;;
            column)
              echo -e "ID: $id\nName: $name\nStatus: $status\next IP: $extIP\nintIP: $intIP\nImage: $imageId\nSize: $flavorId\n"
              ;;
            none)
              ;;
            *)
              echo "------------------------------------------------------------------------------"
              echo "Server ID: $id    Name: $name    Cluster: $icluster"
              echo "Public IP: $extIP"
              echo "Private IP: $intIP"
              echo "Server image: $imageId"
              echo "Server size: $flavorId    Status: $istatus"
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^${icluster}\| "${rpath}/../../conf/clusters.conf"` -ne 0 ] ; then
            key=`grep ^${icluster}\| "${rpath}/../../conf/clusters.conf" | cut -d'|' -f2`
            for ip in $IP ; do
              ip=${ip#* } ; ip=${ip% *}
              if [ `grep -c ^$ip\| "${rpath}/../../servers.list"` -ne 0 ] ; then
                sed -i /^$ip\|/d "${rpath}/../../servers.list"
              fi
              echo "${ip}|${key}|${region}|${name}|${icluster}" >> "${rpath}/../../servers.list"
            done
          fi
        fi
      fi
      
    done
  else
    echo "No data. Run without --noupdate"
  fi
  IFS=$IFS1
}

imageid() {
  imagenum=`grep \/id\|${1}$ "${TMPDIR}/images.resp" | cut -d'/' -f3`
  grep \/$imagenum\/name\| "${TMPDIR}/images.resp" | cut -d'|' -f2
}

flavorid() {
  imagenum=`grep \/id\|${1}$ "${TMPDIR}/flavors.resp" | cut -d'/' -f3`
  grep \/$imagenum\/name\| "${TMPDIR}/flavors.resp" | cut -d'|' -f2
}

source "${rpath}/../../conf/cloud.conf"

if [ -z "$noupdate" ] ; then
  [ -f "${TMPDIR}/auth.resp" ] || ${rpath}/auth
  request
  if [ `grep -c ^1\/unauthorized\/code\|401$ "${TMPDIR}/${rcommand}.resp"` -eq 1 ] ; then
    ${rpath}/auth
    request
  fi
fi
list_servers

[ -n "$count" ] && echo $icount
