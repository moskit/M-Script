#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1

#debug=1

[ -n "$debug" ] && debug=true || debug=false
$debug && LOG="$M_ROOT/logs/show_images.log"

possible_options="noupdate"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optname=`echo $s_optname | tr -d '-'`
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/cloud.conf"
source "$M_ROOT/lib/cloud_functions.sh"
M_TEMP="$M_TEMP/cloud/rackspace"
install -d "$M_TEMP"
if [ -z "$IAMACHILD" ]; then
  lock_cloudops || exit 10
fi
CURL="$CURL -s -k"

proper_exit() {
  log "exit status: $1"
  unlock_cloudops
  exit $1
}

request() {
  URL=`grep ^0\/auth\/serviceCatalog\/cloudServers\/0\/publicURL "${M_TEMP}/auth.resp" | cut -d'|' -f2`
  TOKEN=`grep ^0\/auth\/token\/id "${M_TEMP}/auth.resp" | cut -d'|' -f2`
  URL=`eval "echo $URL"` ; TOKEN=`eval "echo $TOKEN"`
  
  $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}/images/detail" | "${rpath}/../../lib/json2txt" > "${M_TEMP}/images.resp"
  (nump=0; f=false ; cat "${M_TEMP}/images.resp" | grep -E "/id\||/name\|" | cut -d'/' -f3,4 | while read L ; do num=`echo $L | cut -d'/' -f1`; if $f ; then [ $num -ne $nump ] && echo || echo -n "|"; fi; echo -n -e "$L" | cut -d'|' -f2 | tr -d '\n'; nump=$num; f=true ; done; echo) > "${M_TEMP}/images.list"
}

list_images() {
  IFS1=$IFS
  IFS='
'
  if [ -f "${M_TEMP}/images.resp" ] ; then
    for sn in `cat "${M_TEMP}/images.resp" | cut -d'/' -f3 | sort | uniq` ; do
      unset id name istatus created updated progress
      for LINE in `grep "/images/${sn}/" "${M_TEMP}/images.resp"` ; do
        LINE=`echo $LINE | awk -F"images/${sn}/" '{print $2}'`
        lvar=`echo $LINE | cut -d'|' -f1`
        if [ -n "$filter" ] ; then
          for fvar in `echo -e ${filter} | tr ',' '\n'` ; do            
            [[ $lvar =~ $fvar ]] || continue 2
          done
        fi
        lvalue=`echo $LINE | cut -d'|' -f2`
        lvalue=`eval "echo $lvalue"`
        case $lvar in
          status)
            istatus=`echo $lvalue | sed 's|.|\l&|g'`
            ;;
          progress)
            [ -n "$progress" ] && [ "X$lvalue" == "X100" ] && progress="" || progress="Progress: $lvalue"
            ;;
          *)
            eval "$lvar=\"$lvalue\""
            ;;
        esac
      done

      case $view in
        list)
          echo "ID: $id  Name: $name  Status: $istatus  Created: $created  Updated: $updated  $progress"
          ;;
        table)
          echo "${id}|${name}|${istatus}|$created|$updated|$progress"
          ;;
        column)
          echo -e "ID: $id\nName: $name\nStatus: $istatus\nCreated: $created\n Updated: $updated\n$progress\n"
          ;;
        none)
          ;;
        *)
          echo "------------------------------------------------------------------------------"
          echo "Image ID: $id    Image name: $name"
          echo "Created: $created  Updated: $updated"
          echo "Status: $istatus  $progress"
          ;;
      esac
      
    done
  else
    log "response file ${M_TEMP}/images.resp not found"
  fi
  IFS=$IFS1
}

try_auth() {
  local -i i
  i=0
  while [ ! -e "${M_TEMP}/auth.resp" -o `cat "${M_TEMP}/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && log "Problem getting authorization from the Rackspace Cloud API" && proper_exit 1
    ${rpath}/auth
    i+=1
    sleep 10
  done
  [ $i -ne 0 ] && log "$i additional auth request(s) due to no reply from API"
}

if [ -z "$noupdate" ] ; then
  try_auth
  request
  declare -i n
  n=0
  while [ `grep -c ^0\/unauthorized\/code\|401$ "${M_TEMP}/images.resp"` -eq 1 ] ; do
    [ $n -gt 10 ] && log "Problem getting authorization renewal from the Rackspace Cloud API" && proper_exit 1
    [ $n -gt 1 ] && sleep 30
    rm -f "${M_TEMP}/auth.resp"
    try_auth
    request
    n+=1
  done
  [ $n -gt 0 ] && log "$n additional auth requests due to authorization expired"
fi
unlock_cloudops

list_images

exit 0

