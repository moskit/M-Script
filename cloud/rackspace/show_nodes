#!/bin/bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1

#debug=1

[ -n "$debug" ] && debug=true || debug=false
$debug && LOG="$M_ROOT/logs/show_nodes.log"

possible_options="cluster state filter region short noupdate view update_nodes_list forceupdate all status count resolveids cloud"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$cloud" ] && CLOUD=$cloud
[ -z "$CLOUD" ] && echo "No cloud defined" && exit 1

source "$M_ROOT/conf/mon.conf"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

[ -n "$update_nodes_list" -a -n "$filter" ] && echo "Impossible options combination" && exit 1
M_TEMP="$M_TEMP/cloud/$CLOUD"
install -d "$M_TEMP"
export IAMACHILD M_TEMP CLOUD
lock_cloudops || exit 10

CURL="$CURL -s -k"
declare -i icount

[ -n "$short" ] && req='/servers' || req='/servers/detail'
[ -n "$forceupdate" ] && unset noupdate # for compatibility
[ -z "$status" -a -n "$state" ] && status=$state
[ -z "$status" ] && status="active"
[ -n "$filter" ] && filter="${filter},addresses,cluster"

request() {
  local updateflavors updateimages
  updateflavors=false
  updateimages=false
  URL=`grep ^0\/\"auth\"\/\"serviceCatalog\"\/\"cloudServers\"\/0\/\"publicURL\" "$M_TEMP/auth.resp" | cut -d'|' -f2`
  TOKEN=`grep ^0\/\"auth\"\/\"token\"\/\"id\" "$M_TEMP/auth.resp" | cut -d'|' -f2`
  URL=`eval "echo $URL"` ; TOKEN=`eval "echo $TOKEN"`
  log "calling API"
  $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}${req}" | "$rpath/../../lib/json2txt" > "$M_TEMP/${rcommand}.resp"
  if [ -n "`find "$M_TEMP" -mtime -2 -name flavors.resp`" ]; then
    if grep -q \"code\"\|401$ "$M_TEMP/flavors.resp" ; then
      updateflavors=true
    fi
  else
    updateflavors=true
  fi
  if [ -n "`find "$M_TEMP" -mtime -2 -name images.resp`" ]; then
    if grep -q \"code\"\|401$ "$M_TEMP/images.resp" ; then
      updateimages=true
    fi
  else
    updateimages=true
  fi
  $updateflavors && $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "$URL/flavors/detail" | "$M_ROOT/lib/json2txt" > "$M_TEMP/flavors.resp"
  (nump=0; f=false ; cat "$M_TEMP/flavors.resp" | grep -E "/\"id\"\||/\"name\"\|" | cut -d'/' -f3,4 | while read L ; do num=`echo $L | cut -d'/' -f1`; if $f ; then [ $num -ne $nump ] && echo || echo -n "|"; fi; echo -n -e "$L" | cut -d'|' -f2 | tr -d '\n'; nump=$num; f=true ; done; echo) > "$M_TEMP/flavors.list"
  $updateimages && $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "$URL/images/detail" | "$M_ROOT/lib/json2txt" > "$M_TEMP/images.resp"
  (nump=0; f=false ; cat "$M_TEMP/images.resp" | grep -E "/\"id\"\||/\"name\"\|" | cut -d'/' -f3,4 | while read L ; do num=`echo $L | cut -d'/' -f1`; if $f ; then [ $num -ne $nump ] && echo || echo -n "|"; fi; echo -n -e "$L" | cut -d'|' -f2 | tr -d '\n'; nump=$num; f=true ; done; echo) > "$M_TEMP/images.list"
}

list_nodes() {
  $debug && [ -n "$update_nodes_list" ] && echo -e "\n`date`\n=====================\n" >> $LOG
  IFS1=$IFS
  IFS='
'
  if [ `cat "$M_TEMP/${rcommand}.resp" 2>/dev/null | wc -l` -gt 0 ]; then
    declare -a nodelist
    for sn in `cat "$M_TEMP/${rcommand}.resp" | cut -d'/' -f3 | sort | uniq` ; do
      unset id name istatus extIP intIP IP imageId flavorId region icluster
      for LINE in `grep "/\"servers\"/$sn/" "$M_TEMP/${rcommand}.resp"` ; do
        LINE=`echo $LINE | awk -F"\"servers\"/$sn/" '{print $2}'`
        lvar=`echo $LINE | cut -d'|' -f1 | tr -d '"'`
        if [ -n "$filter" ] ; then
          for fvar in `echo -e $filter | tr ',' '\n'` ; do            
            [[ $lvar =~ $fvar ]] || continue 2
          done
        fi
        lvalue=`echo $LINE | cut -d'|' -f2`
        lvalue=`eval "echo $lvalue"`
        case $lvar in
          imageId)
            [ -n "$resolveids" ] && imageId=`imageid $lvalue` || imageId=$lvalue
            ;;
          flavorId)
            [ -n "$resolveids" ] && flavorId=`flavorid $lvalue` || flavorId=$lvalue
            ;;
          status)
            istatus=`echo $lvalue | sed 's|.|\l&|g'`
            ;;
          addresses/public/*)
            extIP="$extIP $lvalue"
            ;;
          addresses/private/*)
            intIP="$intIP $lvalue"
            ;;
          metadata/cluster)
            icluster="$lvalue"
            ;;
          *)
            eval "$lvar=\"$lvalue\""
            ;;
        esac
      done
      if [ "_$NETWORK" == "_external" ] ; then
        IP=$extIP
      else
        IP=$intIP
      fi
      for ip in $IP ; do
        ip=`echo $ip | tr -d ' '`
        if [ -z "$icluster" ] ; then
          # nodes having no cluster in metadata but added manually to nodes.list
          icluster=`grep ^$ip\| "$M_ROOT/nodes.list" | cut -d'|' -f5`
          $debug && [ -n "$update_nodes_list" ] && ecf=1 && log "missing cluster for IP ${ip}, assumed `[ -n "$icluster" ] && echo "$icluster" || echo "none"`"
          break
        else
          # no icluster means that node will not be shown, but only if there
          # is no option --all. With this option, however, we want to see all
          # clusters assigned via metadata
          [ `grep -c ^$icluster\| "$rpath/../../conf/clusters.conf"` -eq 0 ] && [ -z "$all" ] && unset icluster
          $debug && [ -n "$update_nodes_list" ] && unset ecf
        fi
      done
      if [ -z "$update_nodes_list" ] ; then
        # icluster existence condition is needed for the case there are multiple
        # projects (cluster groups) in the same cloud.
        # Note that if you use same names for clusters in different cluster
        # groups, you'll get them mixed here.
        if [ -n "$icluster" ] || [ -n "$all" ] ; then
          [ -z "$all" ] && [ -n "$cluster" ] && [[ "$cluster" != "$icluster" ]] && continue
          
          [ "_$status" != "_$istatus" ] && [ "_$status" != "_all" ] && continue
          extIP=`echo $extIP | tr -d ' '`
          intIP=`echo $intIP | tr -d ' '`
          check_super_cluster $extIP "$icluster" && continue
          check_super_cluster $intIP "$icluster" && continue
          case $view in
            list)
              echo "ID: $id  Name: $name  Status: $istatus  ext IP: $extIP  intIP: $intIP  Cluster: $icluster  Image: $imageId  Size: $flavorId"
              ;;
            table)
              echo "$id|$name|$istatus|$region|$extIP|$intIP|$icluster|$imageId|$flavorId"
              ;;
            column)
              echo -e "ID: $id\nName: $name\nStatus: $istatus\next IP: $extIP\nintIP: $intIP\nImage: $imageId\nSize: $flavorId\n"
              ;;
            none)
              ;;
            *)
              echo "------------------------------------------------------------------------------"
              echo "Node ID: $id    Name: $name    Cluster: $icluster"
              echo "Public IP: $extIP"
              echo "Private IP: $intIP"
              echo "Node image: $imageId"
              echo "Node size: $flavorId    Status: $istatus"
              ;;
          esac
          icount+=1
        fi
      else
        if [ -n "$icluster" ] ; then
          if [ `grep -c ^$icluster\| "$rpath/../../conf/clusters.conf"` -ne 0 ] ; then
            
            key=`grep ^$icluster\| "$rpath/../../conf/clusters.conf" | cut -d'|' -f2`
            for ip in $IP ; do
              ip=`echo $ip | tr -d ' '`
              check_super_cluster $ip "$icluster" && continue
              nodelist+=("$ip|$key|$region|$name|$icluster|$CLOUD")
              $debug && [ -n "$ecf" ] && log "$ip ($name) added"
            done
          elif [ -n "$all" ]; then
            for ip in $IP ; do
              ip=`echo $ip | tr -d ' '`
              check_super_cluster $ip "$icluster" && continue
              nodelist+=("$ip|$key|$region|$name|$icluster|$CLOUD")
              $debug && [ -n "$ecf" ] && log "$ip ($name) added"
            done
          fi
        fi
      fi
      
    done
    if [ -z "$noupdate" ]; then
      if [ ${#nodelist[*]} -eq 0 ]; then
        log "ERROR: generated list is empty, not saving it"
      else
        log "saving generated list (${#nodelist[*]} nodes)"
        for ((i=0; i<${#nodelist[*]}; i++)); do echo "${nodelist[$i]}"; done > "$M_ROOT/cloud/nodes.list.${CLOUD}"
      fi
    fi
  else
    echo "No local data found. Run without --noupdate"
    proper_exit 1 233
  fi
  IFS=$IFS1
}

imageid() {
  iname=`grep ^$1\| "$M_TEMP/images.list" | cut -d'|' -f2 | tr -d '"'`
  [ -z "$iname" ] && return 1
  echo "$iname"
}

flavorid() {
  fname=`grep ^$1\| "$M_TEMP/flavors.list" | cut -d'|' -f2 | tr -d '"'`
  [ -z "$fname" ] && return 1
  echo "$fname"
}

try_auth() {
  local -i i
  i=0
  while [ ! -e "$M_TEMP/auth.resp" -o `cat "$M_TEMP/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && log "Problem getting authorization from the Rackspace Cloud API" && proper_exit 1 249
    "$M_ROOT/cloud/$CLOUD_PROVIDER"/auth
    i+=1
    sleep 10
  done
  [ $i -ne 0 ] && log "$i additional auth request(s) due to no reply from API"
}

# force update if the tmp file is older than FORCE_LIST_UPDATE_AFTER
# if no setting, force update is disabled
if [ -n "$FORCE_LIST_UPDATE_AFTER" -a -n "$noupdate" ] ; then
  tmpfileage=$(expr `date +"%s"` - `stat -c "%Z" $M_TEMP/${rcommand}.resp 2>/dev/null || echo 0` || echo 86400)
  [ $tmpfileage -gt $FORCE_LIST_UPDATE_AFTER ] 2>/dev/null && log "$M_TEMP/${rcommand}.resp is older than $FORCE_LIST_UPDATE_AFTER sec, update forced" && unset noupdate
fi
if [ -z "$noupdate" ] ; then
  try_auth
  request
  declare -i n
  n=0
  while [ `grep -c \"code\"\|401$ "$M_TEMP/${rcommand}.resp"` -eq 1 ] ; do
    [ $n -gt 10 ] && log "Problem getting authorization renewal from the Rackspace Cloud API" && proper_exit 1 269
    [ $n -gt 1 ] && sleep 30
    rm -f "$M_TEMP/auth.resp"
    try_auth
    request
    n+=1
  done
  [ $n -gt 0 ] && log "$n additional auth requests due to authorization expired"
fi
list_nodes

[ -n "$count" ] && echo $icount
proper_exit 0 281

