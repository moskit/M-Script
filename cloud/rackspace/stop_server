#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`

CURL="$CURL -s -k"
V="v1.0"

source "${rpath}/../../conf/mon.conf"
source "${rpath}/../../conf/cloud.conf"
TMPDIR="${TMPDIR}/cloud/${CLOUD}"

possible_options="id name ip verbose force"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && echo "Stop server? Which one?" && exit 1
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$force" ] && force=true

find_by_ip() {
  if [ -f "${TMPDIR}/show_servers.resp" ] ; then
    sn=`grep addresses "${TMPDIR}/show_servers.resp" | grep "${1}$" | cut -d'/' -f3`
    id=`grep \/$sn\/id\| "${TMPDIR}/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$id" ] ; then
    id=`${rpath}/show_servers --forceupdate --view=table | grep \|${1}\| | cut -d'|' -f1`
  fi
}

if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the server"
      exit 1
    else
      ip=`cat "${rpath}/../../servers.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      [ `echo $ip | wc -w` -gt 1 ] && echo "Found more than 1 IP for this name! Exiting." && exit 1
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      else
        id=`${rpath}/show_servers --forceupdate --view=table | cut -d'|' -f1,2 | grep \|${name}$ | cut -d'|' -f1`
      fi
    fi
  else
    find_by_ip $ip
  fi
else
  if [ -f "${TMPDIR}/show_servers.resp" ] ; then
    sn=`grep \/id\| "${TMPDIR}/show_servers.resp" | grep "${id}$" | cut -d'/' -f3`
    name=`grep \/$sn\/name\| "${TMPDIR}/show_servers.resp" | cut -d'|' -f2`
    ipint=`grep \/$sn\/addresses\/private "${TMPDIR}/show_servers.resp" | cut -d'|' -f2`
    ipext=`grep \/$sn\/addresses\/public "${TMPDIR}/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$name" ] ; then
    nameips=`${rpath}/show_servers --forceupdate --view=table | grep ^${id}\| | cut -d'|' -f2,4,5`
    name=`echo "$nameips" | cut -d'|' -f1`
    ipext=`echo "$nameips" | cut -d'|' -f2`
    ipint=`echo "$nameips" | cut -d'|' -f3`
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && exit 1
req="/servers/$id"

request() {
  URL=`grep ^1\/auth\/serviceCatalog\/cloudServers\/0\/publicURL "${TMPDIR}/auth.resp" | cut -d'|' -f2`
  echo "Sending DELETE to ${URL}${req}" >> "$rpath"/../../logs/cloud.log
  TOKEN=`grep ^1\/auth\/token\/id "${TMPDIR}/auth.resp" | cut -d'|' -f2`
  $CURL -X DELETE -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}${req}" | "${rpath}/../../lib/json2txt" > "${TMPDIR}/${rcommand}.resp"
  echo $?
}

try_auth() {
  local -i i
  i=0
  while [ ! -e "${TMPDIR}/auth.resp" -o `cat "${TMPDIR}/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: Problem getting authorization from the Rackspace Cloud API" >> "$rpath"/../../logs/cloud.log && exit 1
    ${rpath}/auth
    i+=1
    sleep 10
  done
  [ $i -ne 0 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $i additional auth requests due to no reply from API" >> "$rpath"/../../logs/cloud.log
}

source "${rpath}/../../conf/cloud.conf"

if [ -z "$noupdate" ] ; then
  try_auth
  reqres=`request`
  [ $reqres -gt 0 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: Curl request returned status $reqres" >> "$rpath"/../../logs/cloud.log
  declare -i n
  n=0
  while [ `grep -c ^1\/unauthorized\/code\|401$ "${TMPDIR}/${rcommand}.resp"` -eq 1 ] ; do
    [ $n -gt 10 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: Problem getting authorization renewal from the Rackspace Cloud API" >> "$rpath"/../../logs/cloud.log && exit 1
    [ $n -gt 1 ] && sleep 30
    rm -f "${TMPDIR}/auth.resp"
    try_auth
    reqres=`request`
    [ $reqres -gt 0 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: Curl request returned status $reqres" >> "$rpath"/../../logs/cloud.log
    n+=1
  done
  [ $n -gt 0 ] && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $n additional auth requests due to authorization expired" >> "$rpath"/../../logs/cloud.log
fi

cat "${TMPDIR}/${rcommand}.resp" >> "$rpath"/../../logs/cloud.log

IPS=( "${ipint}" "${ipext}" "${ip}" )

if [ $reqres -eq 0 -a `grep -c code\|4 "${TMPDIR}/${rcommand}.resp"` -eq 0 ]; then
  echo -e "`date +"%m.%d %H:%M"` rackspace/stop_server: server name ${name}, id ${id}, IP ${IPS[*]} terminated succesfully\n\n" >> "$rpath"/../rackspace.log | tee -a "$rpath"/../../logs/cloud.log
  removed=true
fi

if [ $removed -o $force ]; then
  SSHK=`which ssh-keygen 2>/dev/null`
  [ -n "$name" ] && $SSHK -q -R "$name" >/dev/null 2>&1 && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $name removed from known_hosts" >> "$rpath"/../../logs/cloud.log

  for ipa in ${IPS[*]} ; do
    if [ -n "$ipa" ] ; then
      $SSHK -q -R "$ipa" >/dev/null 2>&1 && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $ipa removed from known_hosts" >> "$rpath"/../../logs/cloud.log
      sed -i "/^$ipa|/d" "${rpath}/../../servers.list" && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $ipa removed from servers.list" >> "$rpath"/../../logs/cloud.log
      sed -i "/^$ipa /d" /etc/hosts && echo "`date +"%m.%d %H:%M"` rackspace/stop_server: $ipa removed from /etc/hosts" >> "$rpath"/../../logs/cloud.log
    fi
  done
  
  for bcluster in $APP_SERVERS ; do
    [ "X${bcluster%%|*}" == "X$cluster" ] && needs_balancer=true
  done
  if $needs_balancer ; then
    if [ -n "$BALANCER" ] ; then
      case "$BALANCER" in
      nginx)
        update_nginx_proxy
        ;;
      esac
    fi
  fi

fi


