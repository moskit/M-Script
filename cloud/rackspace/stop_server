#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`

CURL="$CURL -s -k"
V="v1.0"

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP"/cloud/rackspace
install -d "$M_TEMP"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"

trap unlock_cloudops 3
trap unlock_cloudops 15

possible_options="cloud id name ip verbose force last first cluster"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && echo "Stop server? Which one?" && exit 1
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

[ -n "$cluster" ] && [ `grep -c \|$cluster$ "$M_ROOT"/servers.list` -eq 0 ] && log "No cluster $cluster in servers.list" && exit 1
[ -z "$cluster" ] && cluster=$M_CLUSTER

[ -n "$force" ] && force=true || force=false
removed=false
if [ -n "$last" -o -n "$first" ]; then
  [ -z "$cluster" ] && log "options --last and --first require --cluster" && exit 1
  [ -n "$last" -a -n "$first" ] && log "both --last and --first defined" && exit 1
  [ -n "$last" ] && name=`"$M_ROOT"/cloud/common/get_ips --cluster=$cluster --names | sort -n | tail -1`
  [ -n "$first" ] && name=`"$M_ROOT"/cloud/common/get_ips --cluster=$cluster --names | sort -n | head -1`
fi

find_by_ip() {
  if [ -f "${M_TEMP}/show_servers.resp" ] ; then
    sn=`grep addresses "${M_TEMP}/show_servers.resp" | grep "|\"${1}\"$" | cut -d'/' -f3`
    id=`grep \/$sn\/id\| "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$id" ] ; then
    log "** warning: server ID not found for IP ${1}, getting servers list from the API"
    id=`IAMACHILD=1 ${rpath}/show_servers --forceupdate --view=table | grep \|${1}\| | cut -d'|' -f1`
  fi
  find_cluster "$1"
}

find_cluster() {
  icluster=`grep ^${1}\| "$M_ROOT"/servers.list | cut -d'|' -f5`
  if [ -z "$icluster" ]; then
    if [ `grep -c ^${1}\| "$M_ROOT"/servers.list` -eq 0 ]; then
      log "no records with this IP ($1) in the servers.list"
    else
      log "cluster for this IP ($1) does not seem defined in the servers.list"
    fi
  else
    if [ -n "$cluster" ]; then
      if [ "$cluster" != "$icluster" ]; then
        log "unknown error: cluster provided as option doesn't match the found one: $cluster != ${icluster}, re-assigning cluster=${icluster}"
        cluster=${icluster}
      fi
    else
      cluster=${icluster}
    fi
  fi
}

lock_cloudops || exit 10

log "stopping server $@"
if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the server"
      proper_exit 1 110
    else
      ip=`cat "${rpath}/../../servers.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      [ `echo $ip | wc -w` -gt 1 ] && echo "Found more than 1 IP for this name! Use IP or ID to identify the server. Exiting." && proper_exit 1 113
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      else
        log "** warning: server IP not found for name ${name}, getting servers list from the API"
        id=`IAMACHILD=1 ${rpath}/show_servers --forceupdate --view=table | cut -d'|' -f1,2 | grep \|${name}$ | cut -d'|' -f1`
      fi
    fi
  else
    find_by_ip $ip
  fi
fi
if [ -n "$id" ] ; then
  if [ -f "${M_TEMP}/show_servers.resp" ] ; then
    sn=`grep \/id\| "${M_TEMP}/show_servers.resp" | grep "|${id}$" | cut -d'/' -f3`
    name=`grep \/$sn\/name\| "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
    ipint=`grep \/$sn\/addresses\/private "${M_TEMP}/show_servers.resp" | cut -d'|' -f2 | tr -d '"'`
    ipext=`grep \/$sn\/addresses\/public "${M_TEMP}/show_servers.resp" | cut -d'|' -f2 | tr -d '"'`
  fi
  if [ -z "$name" ] ; then
    log "** warning: server name not found for id ${id}, getting servers list from the API"
    nameips=`IAMACHILD=1 ${rpath}/show_servers --forceupdate --view=table | grep ^${id}\| | cut -d'|' -f2,4,5`
    name=`echo "$nameips" | cut -d'|' -f1`
    ipext=`echo "$nameips" | cut -d'|' -f2`
    ipint=`echo "$nameips" | cut -d'|' -f3`
  fi
  [ "X$NETWORK" == "Xexternal" ] && find_cluster "$ipext" || find_cluster "$ipint"
  if [ -z "$cluster" ]; then
    find_cluster "$ipint"
    find_cluster "$ipext"
  fi
  [ -z "$cluster" ] && log "unable to find the cluster for this server, not checking the minimal number of servers in the cluster"
else
  echo "Unable to find ID of this server" && proper_exit 1 144
fi
req="/servers/$id"

request() {
  URL=`grep ^0\/\"auth\"\/\"serviceCatalog\"\/\"cloudServers\"\/0\/\"publicURL\" "$M_TEMP/auth.resp" | cut -d'|' -f2 | tr -d '"'`
  log "Sending DELETE to \"${URL}${req}\""
  TOKEN=`grep ^0\/\"auth\"\/\"token\"\/\"id\" "$M_TEMP/auth.resp" | cut -d'|' -f2| tr -d '"'`
  $CURL -X DELETE -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}${req}" | "$rpath/../../lib/json2txt" > "$M_TEMP/${rcommand}.resp"
  echo $?
}

try_auth() {
  local -i i
  i=0
  while [ ! -e "${M_TEMP}/auth.resp" -o `cat "${M_TEMP}/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && log "Problem getting authorization from the Rackspace Cloud API" && proper_exit 1 160
    ${rpath}/auth
    i+=1
    sleep 10
  done
  [ $i -ne 0 ] && log "$i auth requests sent to the Rackspace Cloud API"
}

exit_status=0 # TODO

check_cluster_minimum "$cluster" || proper_exit 5 170
try_auth
reqres=`request`
[ $reqres -gt 0 ] && log "Curl request returned status $reqres"
declare -i n
n=0
while [ `grep -c ^0\/\"unauthorized\"\/\"code\"\|401$ "$M_TEMP/${rcommand}.resp"` -eq 1 ] ; do
  [ $n -gt 10 ] && log "Problem getting authorization renewal from the Rackspace Cloud API" && proper_exit 1 177
  [ $n -gt 1 ] && sleep 30
  rm -f "$M_TEMP/auth.resp"
  try_auth
  reqres=`request`
  [ $reqres -gt 0 ] && log "Curl request returned status $reqres"
  n+=1
done
[ $n -gt 0 ] && log "$n additional auth requests due to authorization expired"

cat "$M_TEMP/${rcommand}.resp" >> "$LOG"

IPS=( `echo -e "$ipint\n$ipext\n$ip" | sort | uniq` )

if [ $reqres -eq 0 -a `grep -c \"code\"\|4 "$M_TEMP/${rcommand}.resp"` -eq 0 ]; then
  log "Server name ${name}, id ${id}, IP ${IPS[*]} terminated successfully"
  echo -e "`date`\n\nServer ${id} `[ -n "${IPS[*]}" ] && echo "IP(s): ${IPS[*]}"` terminated" >> "$rpath"/../rackspace.log
  removed=true
fi

if [ $removed -o $force ]; then
  SSHK=`which ssh-keygen 2>/dev/null`
  [ -n "$name" ] && $SSHK -q -R "$name" >/dev/null 2>&1 && log "$name removed from known_hosts"

  for ipa in ${IPS[*]} ; do
    if [ -n "$ipa" ] ; then
      $SSHK -q -R "$ipa" >/dev/null 2>&1 && log "$ipa removed from known_hosts"
      sed -i "/^$ipa|/d" "$rpath/../../servers.list" && log "$ipa removed from servers.list"
      sed -i "/^$ipa /d" /etc/hosts && log "$ipa removed from /etc/hosts"
    fi
  done
  
  for bcluster in $APP_SERVERS ; do
    [ "X${bcluster%%|*}" == "X$cluster" ] && needs_balancer=true
  done
  if $needs_balancer ; then
    if [ -n "$BALANCER" ] ; then
      case "$BALANCER" in
      nginx)
        update_nginx_proxy
        ;;
      esac
    fi
  fi
fi

proper_exit $exit_status 223

