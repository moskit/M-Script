#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/ (this is needed to fix vi syntax highlighting)

CURL=`which curl 2>/dev/null`

LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`

CURL="$CURL -s -k"
V="v1.0"

possible_options="cloud id name ip return verbose cluster help updatelist slow"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`
[ -z "$ARGV" ] && ${0} --help
IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

find_by_ip() {
  if [ -f "$M_TEMP/show_servers.resp" ] ; then
    sn=`grep "\"addresses\"" "$M_TEMP/show_servers.resp" | grep "\"${1}\"$" | cut -d'/' -f3`
    id=`grep "/$sn/\"id\"|" "$M_TEMP/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$id" ]; then
    id=`IAMACHILD=1 "$rpath"/show_servers --cloud=$CLOUD --forceupdate --view=table | grep "|$1|" | cut -d'|' -f1`
  fi
  # we trust the cloud API more than local list (cloud/$CLOUD.list), but cloud
  # API has notable lag in listing new servers (the call show_servers is based 
  # on), so we fall back to the local list in this case, but with verification
  # via getting server details by its ID (this call has no lag)
  [ -z "$id" ] && id=`cat "$M_ROOT/cloud/${CLOUD}.list" | grep "|\"${1}\"|" | cut -d'|' -f1`
  [ `expr "$id" : ".*[^0-9]"` -ne 0 ] && log "Bad ID" && proper_exit 1 65
  if [ -z "$id" ]; then
    log "unable to find server ID by its IP"
    sed -i "/^${1}.*${CLOUD}$/d" "$M_ROOT/servers.list"
  else
    verify_by_id $id
  fi
}

find_by_name() {
  id=`IAMACHILD=1 "$rpath"/show_servers --cloud=$CLOUD --forceupdate --view=table | cut -d'|' -f1,2 | grep "|${name}$" | cut -d'|' -f1`
  # falling back to the local list (see comment above)
  [ -z "$id" ] && id=`cat "$M_ROOT/cloud/${CLOUD}.list" | cut -d'|' -f1,4 | grep "|\"${name}\"$" | cut -d'|' -f1`
  if [ -z "$id" ]; then
    log "unable to find server ID by its name"
    sed -i "/\|${1}\|.*${CLOUD}$/d" "$M_ROOT/servers.list"
  else
    verify_by_id $id
  fi
}

verify_by_id() {
  local ip
  if [ -z "`IAMACHILD=1 "$rpath"/get_server_details --cloud=$CLOUD --id=$1 | grep '"id"|'`" ]; then
    log "this server ID is present in the local list (ID $id), but API call returns this:"
    log "`cat "$M_TEMP/get_server_details.resp"`"
    serverdetails=`grep "^$id|" "$M_ROOT/cloud/${CLOUD_PROVIDER}.list"`
    if [[ "$NETWORK" == "external" ]]; then
      ip="`echo "$serverdetails" | cut -s -d'|' -f6 | tr -d '"'`"
    else
      ip="`echo "$serverdetails" | cut -s -d'|' -f7 | tr -d '"'`"
    fi
    sed -i "/^${ip}|/d" "$M_ROOT/servers.list"
    unset id
  fi
}

list_the_cluster() {
  # 1. compile full list
  # 2. if 'slow' is set, verify each server by querying its personal details
  ips1=`cat "$M_ROOT/servers.list" | grep \|${CLOUD}$ | cut -d'|' -f1,5 | grep \|${cluster}$ | cut -d'|' -f1`
  if [ "X$NETWORK" == "Xexternal" ]; then
    ips2=`cat "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$" | cut -d'|' -f6 | tr -d '"'`
  else
    ips2=`cat "$M_ROOT/cloud/${CLOUD}.list" 2>/dev/null | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$" | cut -d'|' -f7 | tr -d '"'`
  fi
  ips=`echo -e "$ips1\n$ips2" | grep -v ^$ | sort | uniq`
  if [ -n "$slow" ]; then
    for ip in `echo "$ips"` ; do
      serverdetails=`IAMACHILD=1 "$M_ROOT"/cloud/common/get_server_details --cloud=$CLOUD --ip=$ip`
      if [ -z "`echo "$serverdetails" | grep '"id"|'`" ]; then
        sed -i "/^${ip}.*${CLOUD}$/d" "$M_ROOT/servers.list"
        sed -i "/\|\"${ip}\"\|/d" "$M_ROOT/cloud/${CLOUD}.list"
      else
        grep -q "|\"${ip}\"|" "$M_ROOT/cloud/${CLOUD}.list" || echo "$serverdetails" | grep -vE "/\"progress\"|/\"status\"" | cut -d'|' -f2 | tr '\n' '|' | sed 's_|$_\n_' >> "$M_ROOT/cloud/${CLOUD}.list"
        if `grep -q "^${ip}|" "$M_ROOT/servers.list"` ; then
          name="`echo "$serverdetails" | grep '"name"|' | cut -s -d'|' -f2 | tr -d '"'`"
          cluster="`echo "$serverdetails" | grep '"metadata"/"cluster"|' | cut -s -d'|' -f2 | tr -d '"'`"
          key="`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f2 | tr -d '"'`"
          echo "$ip|$key||$name|$cluster|$CLOUD" >> "$M_ROOT/servers.list"
        fi
      fi
    done
  else
    for ip in `echo "$ips"` ; do
      grep -q "|\"${ip}\"|" "$M_ROOT/cloud/${CLOUD}.list" || IAMACHILD=1 "$rpath"/get_server_details --cloud=$CLOUD --ip=$ip | grep -vE "/\"progress\"|/\"status\"" | cut -d'|' -f2 | tr '\n' '|' | sed 's_|$_\n_' >> "$M_ROOT/cloud/${CLOUD}.list"
      grep -q ^${ip}\| "$M_ROOT/servers.list" || echo "$ip|||||$CLOUD" >> "$M_ROOT/servers.list"
    done
  fi
  cat "$M_ROOT/cloud/${CLOUD}.list" | grep -E "\|\"${cluster}\"\||\|\"${cluster}\"$"
}

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ $found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: $missing_options not found"
  exit 1
fi

[ -n "$help" ] && cat << "EOF"

Finds and lists server(s) in Rackspace-based clouds

Usage: $rcommand <options>

Options:

  --id=[id]                     - finds a server by its ID
  
  --ip=[ip]                     - finds a server by its IP
  
  --name=[server name]          - finds server(s) by name
  
  --cluster=[cluster name]      - finds all servers in this cluster
                                  (see also --fast and --slow below)
                                  cluster doesn't affect the search by other
                                  parameters, if defined; i.e. if you search by
                                  IP with cluster defined, it will find a server
                                  even if it is in another cluster
  
  --cloud=[cloud name]          - must be provided for any of the searches
                                  above; can be provided either via command-line
                                  option or via environment variable CLOUD;
                                  command-line option has higher priority
                                  
  --fast                        - for cluster search, checks only provider-
                                  specific list (cloud/rackspace.list)
                                  
  --slow                        - for cluster search, gets details for each
                                  server in this cloud listed in servers.list
                                  and cloud/rackspace.list from the cloud API
                                  and does its best to fix any inconsistencies
                                  found
                                  
  --updatelist                  - updates servers.list with servers found
                                  (applicable only to single server search)
  
                                  
EOF

[ -n "$cloud" ] && CLOUD=$cloud
export CLOUD
[ -n "$fast" -a -n "$slow" ] && echo "both --fast and --slow options are set, not sure what to do" && exit 1

source "$rpath/../../conf/mon.conf"
[ -n "$CLOUD" ] && source "$rpath/../../conf/clouds/${CLOUD}.conf"
source "$rpath/../../lib/cloud_functions.sh"
M_TEMP="$M_TEMP/cloud/$CLOUD"

if [ -z "$IAMACHILD" ]; then
  lock_cloudops || exit 10
fi

if [ -z "$id" ]; then
  if [ -z "$ip" ]; then
    if [ -z "$name" ]; then
      if [ -z "$cluster" ]; then
        echo "One of id, ip, name or cluster is required to identify the server"
        proper_exit 1 204
      else
        list_the_cluster
        proper_exit 0 207
      fi
    else
      # ip must be present in servers.list, so it's simple
      ip=`cat "$rpath/../../servers.list" | grep -vE "^#|^[[:space:]]#" | cut -d'|' -f1,4,6 | grep -v ^$ | grep "|${CLOUD}$" | grep "|${name}|" | cut -d'|' -f1`
      if [ -n "$ip" ]; then
        find_by_ip $ip
      else
      # if it is not present for some reason, complex and slow procedure starts
        find_by_name $name
      fi
    fi
  else
    find_by_ip $ip
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && proper_exit 1 223

req="/servers/$id"

request() {
  URL=`grep ^0\/\"auth\"\/\"serviceCatalog\"\/\"cloudServers\"\/0\/\"publicURL\" "$M_TEMP/auth.resp" | cut -d'|' -f2 | tr -d '"'`
  TOKEN=`grep ^0\/\"auth\"\/\"token\"\/\"id\" "$M_TEMP/auth.resp" | cut -d'|' -f2 | tr -d '"'`
  $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}$req" | "$rpath/../../lib/json2txt" > "$M_TEMP/${rcommand}.resp"
}

[ -f "$M_TEMP/auth.resp" ] || "$rpath"/auth
request
if [ `grep -c ^0\/\"unauthorized\"\/\"code\"\|401$ "$M_TEMP/${rcommand}.resp"` -eq 1 ] ; then
  "$rpath"/auth
  request
fi

if [ `grep -c ^0\/\"itemNotFound\"\/\"code\"\|404$ "$M_TEMP/${rcommand}.resp"` -eq 1 ] ; then
  echo "Server with ID $id does not exist" && proper_exit 1 243
fi

if [ -n "$updatelist" ]; then
  serverdetails="`cat "$M_TEMP/${rcommand}.resp"`"
  if [[ "$NETWORK" == "external" ]]; then
    ip="`echo "$serverdetails" | grep '/"addresses"/"public"/0|' | cut -s -d'|' -f2 | tr -d '"'`"
  else
    ip="`echo "$serverdetails" | grep '/"addresses"/"private"/0|' | cut -s -d'|' -f2 | tr -d '"'`"
  fi
  if ! `grep -q "^${ip}|" "$M_ROOT/servers.list"` ; then
    name="`echo "$serverdetails" | grep '"name"|' | cut -s -d'|' -f2 | tr -d '"'`"
    cluster="`echo "$serverdetails" | grep '"metadata"/"cluster"|' | cut -s -d'|' -f2 | tr -d '"'`"
    key="`grep "^$cluster|" "$M_ROOT/conf/clusters.conf" | cut -s -d'|' -f2 | tr -d '"'`"
    echo "$ip|$key||$name|$cluster|$CLOUD" >> "$M_ROOT/servers.list"
  fi
else
  cat "$M_TEMP/${rcommand}.resp"
fi

proper_exit 0 223

