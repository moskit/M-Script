#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")
CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`

CURL="$CURL -s -k"
V="v1.0"

possible_options="region flavor cluster name ip id verbose imagename"
necessary_options=""

ARGV=`echo ${@} | sed 's/^--//' | sed 's/ --/|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "X$s_optarg" == "X$s_optname" ] && s_optarg="yes"
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "X$s_optname" == "X$option" ] && eval "$s_optname=\"$s_optarg\"" && found=1
  done
   if [[ $found -ne 1 ]]; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP/cloud/rackspace"
install -d "$M_TEMP"
source "$M_ROOT/conf/cloud.conf"
source "$M_ROOT/lib/cloud_functions.sh"

[ -z "$cluster" ] && cluster="$M_CLUSTER"

find_by_ip() {
  if [ -f "${M_TEMP}/show_servers.resp" ] ; then
    sn=`grep addresses "${M_TEMP}/show_servers.resp" | grep "|\"${1}\"$" | cut -d'/' -f3`
    id=`grep \/$sn\/id\| "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$id" ] ; then
    id=`${rpath}/show_servers --forceupdate --view=table | grep \|${1}\| | cut -d'|' -f1`
  fi
}

if [ -z "$id" ] ; then
  if [ -z "$ip" ] ; then
    if [ -z "$name" ] ; then
      echo "One of id, ip or name is required to identify the server"
      exit 1
    else
      ip=`cat "$M_ROOT/servers.list" | cut -d'|' -f1,4 | grep \|$name$ | cut -d'|' -f1`
      [ `echo $ip | wc -w` -gt 1 ] && echo "Found more than 1 IP for this name! Exiting." && exit 1
      if [ -n "$ip" ] ; then
        find_by_ip $ip
      else
        id=`${rpath}/show_servers --forceupdate --view=table | cut -d'|' -f1,2 | grep \|${name}$ | cut -d'|' -f1`
      fi
    fi
  else
    find_by_ip $ip
  fi
else
  if [ -f "${M_TEMP}/show_servers.resp" ] ; then
    sn=`grep \/id\| "${M_TEMP}/show_servers.resp" | grep "|${id}$" | cut -d'/' -f3`
    name=`grep \/$sn\/name\| "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
    ipint=`grep \/$sn\/addresses\/private "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
    ipext=`grep \/$sn\/addresses\/public "${M_TEMP}/show_servers.resp" | cut -d'|' -f2`
  fi
  if [ -z "$name" ] ; then
    nameips=`${rpath}/show_servers --forceupdate --view=table | grep ^${id}\| | cut -d'|' -f2,4,5`
    name=`echo "$nameips" | cut -d'|' -f1`
    ipext=`echo "$nameips" | cut -d'|' -f2`
    ipint=`echo "$nameips" | cut -d'|' -f3`
  fi
fi
[ -z "$id" ] && echo "Unable to find ID of this server" && exit 1
[ -z "$imagename" ] && imagename="${id}.${name}.`date -u +"%s"`"

request() {
  log "Sending request..."
  URL=`grep ^0\/auth\/serviceCatalog\/cloudServers\/0\/publicURL "${M_TEMP}/auth.resp" | cut -d'|' -f2 | tr -d '"'`
  TOKEN=`grep ^0\/auth\/token\/id "${M_TEMP}/auth.resp" | cut -d'|' -f2 | tr -d '"'`
  $CURL -X POST -T "$M_TEMP/${rcommand}.req" -H "Content-Type: application/json" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "${URL}/images" | "$M_ROOT/lib/json2txt" > "${M_TEMP}/${rcommand}.resp"
}

cat "${rpath}/save_server.$V.json.1" | sed "s|SERVER_ID|$id|;s|IMAGE_NAME|$imagename|" > "$M_TEMP/${rcommand}.req"

log "request generated"
$debug && log "`cat "$M_TEMP/${rcommand}.req"`"

try_auth() {
  local -i i
  i=0
  while [ ! -e "${M_TEMP}/auth.resp" -o `cat "${M_TEMP}/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && log "Problem getting authorization from the Rackspace Cloud API" && exit 1
    ${rpath}/auth
    i+=1
    sleep 10
  done
  i+=-1
  [ $i -gt 0 ] && log "$i additional auth requests due to no reply from API"
}

source "$M_ROOT/conf/cloud.conf"
exit_status=0

try_auth
request && log "Request sent"
declare -i n
n=0
while [ `grep -c ^0\/unauthorized\/code\|401$ "${M_TEMP}/${rcommand}.resp"` -eq 1 ] ; do
  [ $n -gt 10 ] && log "Problem getting authorization renewal from the Rackspace Cloud API" && exit 1
  [ $n -gt 1 ] && sleep 30
  rm -f "${M_TEMP}/auth.resp"
  try_auth
  request && log "Request sent"
  n+=1
done
[ $n -gt 0 ] && log "$n additional auth requests due to authorization expired"

code=`grep \/code\| "${M_TEMP}/${rcommand}.resp" | cut -d'|' -f2`
[ -n "$code" ] && echo -n "${code}: "
grep \/message\| "${M_TEMP}/${rcommand}.resp"

exit $exit_status

