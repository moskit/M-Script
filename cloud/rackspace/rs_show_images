#!/usr/bin/env bash
# Copyright (C) 2008-2011 Igor Simonov (me@igorsimonov.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

rcommand=${0##*/}
rpath=${0%/*}
#*/
[ -z "$M_ROOT" ] && M_ROOT=$(readlink -f "$rpath/../../")

CURL=`which curl 2>/dev/null`
LYNX=`which lynx 2>/dev/null`
LINKS=`which links 2>/dev/null`
WGET=`which wget 2>/dev/null`
[ -z "$CURL" ] && echo "Curl not found" && exit 1

possible_options="public private status state noupdate forceupdate short"
necessary_options=""

ARGV=`echo $@ | sed 's/^--//;s/ --/|/g;s/ /|/g'`

IFS1=$IFS
IFS='|'
for s_option in $ARGV
do
  s_optname=${s_option%%=*}
  s_optarg=${s_option##*=}
  [ "_$s_optarg" == "_$s_optname" ] && s_optarg="yes"
  found=false
  for option in `echo $possible_options | sed 's/ /|/g'`; do 
    [ "_$s_optname" == "_$option" ] && eval "$s_optname=\"$s_optarg\"" && found=true
  done
   if ! $found ; then 
    echo "Unknown option: $s_optname"
    exit 1
  fi
done
IFS=$IFS1

found=0
for option in `echo $necessary_options | sed 's/,//g'`; do
  [ "X$(eval echo \$$option)" == "X" ] && missing_options="${missing_options}, --${option}" && found=1
done
if [[ found -eq 1 ]]; then
  missing_options=${missing_options#*,}
  echo "Necessary options: ${missing_options} not found"
  exit 1
fi

source "$M_ROOT/conf/mon.conf"
M_TEMP="$M_TEMP"/cloud/rackspace
install -d "$M_TEMP"
source "$M_ROOT/conf/clouds/${CLOUD}.conf"
source "$M_ROOT/lib/cloud_functions.sh"
lock_cloudops || exit 10
CURL="$CURL -s -k"

[ -n "$short" ] && [ -f "$M_TEMP/images.list" ] && cat "$M_TEMP/images.list" && exit 0
[ -n "$forceupdate" ] && rm -f "$M_TEMP"/images.resp
[ -z "$status" -a -n "$state" ] && status=$state
[ -z "$status" ] && status="active"

request() {
  local updateimages
  updateimages=false
  URL=`grep ^0\/auth\/serviceCatalog\/cloudServers\/0\/publicURL "$M_TEMP/auth.resp" | cut -d'|' -f2`
  TOKEN=`grep ^0\/auth\/token\/id "$M_TEMP/auth.resp" | cut -d'|' -f2`

  if [ -n "`find "$M_TEMP" -mtime -2 -name images.resp`" ]; then
    if grep -q code\|401$ "$M_TEMP/images.resp" ; then
      updateimages=true
    fi
  else
    updateimages=true
  fi

  $updateimages && $CURL -X GET -H "Content-Type: application/json; charset=UTF-8" -H "Accept: application/json" -H "X-Auth-Token: $TOKEN" "$URL/images/detail" | "${rpath}/../../lib/json2txt" > "$M_TEMP/images.resp"
  (nump=0; f=false ; cat "$M_TEMP/images.resp" | grep -E "/id\||/name\|" | cut -d'/' -f3,4 | while read L ; do num=`echo $L | cut -d'/' -f1`; if $f ; then [ $num -ne $nump ] && echo || echo -n "|"; fi; echo -n -e "$L" | cut -d'|' -f2 | tr -d '\n'; nump=$num; f=true ; done; echo) > "$M_TEMP/images.list"
}

list_images() {
  IFS1=$IFS
  IFS='
'
  if [ -f "$M_TEMP/images.resp" ] ; then
    for imnum in `cat "$M_TEMP/images.resp" | sed 's|^0/images/||g' | cut -d'/' -f1 | sort | uniq` ; do
      im=`grep ^0\/images\/${imnum}\/ "$M_TEMP/images.resp"`
      for LN in `echo "$im" | cut -d'/' -f4 | sed 's_|_=\"_g;s_$_\"_g'` ; do
        eval "$LN"
      done
      echo "$id|$name|$status|$created|$updated|$progress"
    done
  fi
  IFS=$IFS1
}

try_auth() {
  local -i i
  i=0
  while [ ! -e "$M_TEMP/auth.resp" -o `cat "$M_TEMP/auth.resp" 2>/dev/null | wc -l` -eq 0 ] ; do
    [ $i -gt 10 ] && log "Problem getting authorization from the Rackspace Cloud API" && exit 1
    ${rpath}/auth
    i+=1
    sleep 10
  done
  [ $i -ne 0 ] && log "$i additional auth request(s) due to no reply from API"
}

if [ -z "$noupdate" ] ; then
  try_auth
  request
  declare -i n
  n=0
  while [ `grep -c ^0\/unauthorized\/code\|401$ "$M_TEMP/images.resp"` -eq 1 ] ; do
    [ $n -gt 10 ] && log "Problem getting authorization renewal from the Rackspace Cloud API" && exit 1
    [ $n -gt 1 ] && sleep 30
    rm -f "$M_TEMP/auth.resp"
    try_auth
    request
    n+=1
  done
  [ $n -gt 0 ] && log "$n additional auth requests due to authorization expired"
fi

unlock_cloudops

list_images


