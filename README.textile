h1. Introduction

M-Script is, basically, a collection of shell scripts for various server management tasks. Each of the scripts can be run separately when/if needed, but bound together they form a well-integrated solution, still flexible because it is easy to combine/pipe/edit shell scripts to make them do exactly what you need.

It is based upon the main "Unix Way principles":http://en.wikipedia.org/wiki/Unix_philosophy :

* Write programs that do one thing and do it well.
* Write programs to work together.
* Write programs to handle text streams, because that is a universal interface.
* And, of course, the KISS(Keep It Simple, Stupid) principle

h2. Functionality

M-Script is designed to help in:

* Monitoring
* Backups
* Cloud management: auto-scalability based on monitoring

h2. Features

* Pluggable monitoring modules
* 3-level alerting system
* Easy watchdogs creation
* Database for monitoring data (SQLite)
* Graphs for monitoring data
* Databases and files backups, local and/or remote
* Remote backups: to/from, FTP, SCP, Rsync, S3, EC2 EBS snapshots
* Cloud servers management: start, stop, save, list, load balancing (Nginx), EC2 Route53 DNS support
* Dashboard web interface

h2. Usage Example

You found out that you get the users activity peak each time it gets rainy in London. So what you want is to start one additional Amazon EC2 instance and add it to your application servers cluster.

First you need a custom monitoring plugin. In our case it is going to be a London weather monitoring plugin.

All it has to do is provide output lines starting with <OK> if the weather is sunny, or one of three alert levels if not, like this:
* <OK> Weather in London: Sunny
* <*> Weather in London: Rainy
* <**> Weather in London: Heavy Rain
* <***> Weather in London: Rain / Thunder

So here is the plugin (Shell, but you can use whatever you think is a better fit):

<pre><code class="sh">
#!/bin/bash

weather=`/usr/bin/curl -s http://rss.weather.com/weather/rss/local/UKXX0085 \
| grep \<description\> | grep wxicons | awk -F'/>' '{print $2}' | sed 's|For more.*$||'`
[[ $weather =~ Sunny ]] && echo "<OK> Weather in London: Sunny" && exit 0
[[ $weather =~ Rain ]] && [[ $weather =~ Thunder ]] && \
echo "<***> Weather in London: Rain / Thunder" && exit 0
[[ $weather =~ Heavy\ Rain ]] && echo "<**> Weather in London: Heavy Rain" && exit 0
[[ $weather =~ Rain ]] && echo "<*> Weather in London: Rainy" && exit 0
echo "<OK> Weather in London: Cloudy"
</code></pre>

Now, you want to start one additional application server if it becomes rainy, two servers if the rain is heavy, and three servers if it's a thunderstorm. This is done in the actions configuration file conf/actions.conf:

<pre><code class="sh">
Weather\ in\ London%1%cloud/ec2/start_server --cluster=application --number=1
Weather\ in\ London%2%cloud/ec2/start_server --cluster=application --number=2
Weather\ in\ London%3%cloud/ec2/start_server --cluster=application --number=3
</code></pre>

That's all.

You don't have to stop servers if the weather is sunny: you start them to address possible load peak beforehand. If the peak doesn't come or has finished, additional servers stop automatically because the load is low.

